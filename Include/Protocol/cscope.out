cscope 15 $HOME/VT/SPRING_2021/6504/Assignment1/Include/Protocol               0000607569
	@AbsolutePointer.h

13 #i‚de‡
__ABSOLUTE_POINTER_H__


14 
	#__ABSOLUTE_POINTER_H__


	)

17 
	#EFI_ABSOLUTE_POINTER_PROTOCOL_GUID
 \

	)

21 
_EFI_ABSOLUTE_POINTER_PROTOCOL
 
	tEFI_ABSOLUTE_POINTER_PROTOCOL
;

35 
UINT64
 
	mAbsﬁuãMöX
;

36 
UINT64
 
	mAbsﬁuãMöY
;

37 
UINT64
 
	mAbsﬁuãMöZ
;

38 
UINT64
 
	mAbsﬁuãMaxX
;

40 
UINT64
 
	mAbsﬁuãMaxY
;

42 
UINT64
 
	mAbsﬁuãMaxZ
;

44 
UINT32
 
	mAâribuãs
;

47 } 
	tEFI_ABSOLUTE_POINTER_MODE
;

52 
	#EFI_ABSP_Suµ‹tsA…A˘ive
 0x00000001

	)

57 
	#EFI_ABSP_Suµ‹tsPªssuªAsZ
 0x00000002

	)

86 
	gEFI_STATUS


87 (
	tEFIAPI
 *
	tEFI_ABSOLUTE_POINTER_RESET
)(

88 
	tIN
 
	tEFI_ABSOLUTE_POINTER_PROTOCOL
 *
	tThis
,

89 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


95 
	#EFI_ABSP_TouchA˘ive
 0x00000001

	)

100 
	#EFI_ABS_A…A˘ive
 0x00000002

	)

113 
UINT64
 
	mCuºítX
;

121 
UINT64
 
	mCuºítY
;

129 
UINT64
 
	mCuºítZ
;

135 
UINT32
 
	mA˘iveBuâ⁄s
;

136 } 
	tEFI_ABSOLUTE_POINTER_STATE
;

169 
	gEFI_STATUS


170 (
	tEFIAPI
 *
	tEFI_ABSOLUTE_POINTER_GET_STATE
)(

171 
	tIN
 
	tEFI_ABSOLUTE_POINTER_PROTOCOL
 *
	tThis
,

172 
	tOUT
 
	tEFI_ABSOLUTE_POINTER_STATE
 *
	tSèã


184 
	s_EFI_ABSOLUTE_POINTER_PROTOCOL
 {

185 
EFI_ABSOLUTE_POINTER_RESET
 
	mRe£t
;

186 
EFI_ABSOLUTE_POINTER_GET_STATE
 
	mGëSèã
;

190 
EFI_EVENT
 
	mWaôF‹I≈ut
;

194 
EFI_ABSOLUTE_POINTER_MODE
 *
	mMode
;

198 
EFI_GUID
 
gEfiAbsﬁuãPoöãrPrŸocﬁGuid
;

	@AcpiSystemDescriptionTable.h

12 #i‚de‡
__ACPI_SYSTEM_DESCRIPTION_TABLE_H___


13 
	#__ACPI_SYSTEM_DESCRIPTION_TABLE_H___


	)

15 
	#EFI_ACPI_SDT_PROTOCOL_GUID
 \

	)

18 
UINT32
 
	tEFI_ACPI_TABLE_VERSION
;

19 
VOID
 *
	tEFI_ACPI_HANDLE
;

21 
	#EFI_ACPI_TABLE_VERSION_NONE
 (1 << 0)

	)

22 
	#EFI_ACPI_TABLE_VERSION_1_0B
 (1 << 1)

	)

23 
	#EFI_ACPI_TABLE_VERSION_2_0
 (1 << 2)

	)

24 
	#EFI_ACPI_TABLE_VERSION_3_0
 (1 << 3)

	)

25 
	#EFI_ACPI_TABLE_VERSION_4_0
 (1 << 4)

	)

26 
	#EFI_ACPI_TABLE_VERSION_5_0
 (1 << 5)

	)

28 
UINT32
 
	tEFI_ACPI_DATA_TYPE
;

29 
	#EFI_ACPI_DATA_TYPE_NONE
 0

	)

30 
	#EFI_ACPI_DATA_TYPE_OPCODE
 1

	)

31 
	#EFI_ACPI_DATA_TYPE_NAME_STRING
 2

	)

32 
	#EFI_ACPI_DATA_TYPE_OP
 3

	)

33 
	#EFI_ACPI_DATA_TYPE_UINT
 4

	)

34 
	#EFI_ACPI_DATA_TYPE_STRING
 5

	)

35 
	#EFI_ACPI_DATA_TYPE_CHILD
 6

	)

38 
UINT32
 
	mSig«tuª
;

39 
UINT32
 
	mLígth
;

40 
UINT8
 
	mRevisi⁄
;

41 
UINT8
 
	mChecksum
;

42 
CHAR8
 
	mOemId
[6];

43 
CHAR8
 
	mOemTabÀId
[8];

44 
UINT32
 
	mOemRevisi⁄
;

45 
UINT32
 
	mCª©‹Id
;

46 
UINT32
 
	mCª©‹Revisi⁄
;

47 } 
	tEFI_ACPI_SDT_HEADER
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_ACPI_NOTIFICATION_FN
)(

52 
	tIN
 
	tEFI_ACPI_SDT_HEADER
 *
	tTabÀ
,

53 
	tIN
 
	tEFI_ACPI_TABLE_VERSION
 
	tVîsi⁄
,

54 
	tIN
 
	tUINTN
 
	tTabÀKey


84 
	gEFI_STATUS


85 (
	tEFIAPI
 *
	tEFI_ACPI_GET_ACPI_TABLE2
)(

86 
	tIN
 
	tUINTN
 
	tIndex
,

87 
	tOUT
 
	tEFI_ACPI_SDT_HEADER
 **
	tTabÀ
,

88 
	tOUT
 
	tEFI_ACPI_TABLE_VERSION
 *
	tVîsi⁄
,

89 
	tOUT
 
	tUINTN
 *
	tTabÀKey


107 
	gEFI_STATUS


108 (
	tEFIAPI
 *
	tEFI_ACPI_REGISTER_NOTIFY
)(

109 
	tIN
 
	tBOOLEAN
 
	tRegi°î
,

110 
	tIN
 
	tEFI_ACPI_NOTIFICATION_FN
 
	tNŸifiˇti⁄


125 
	gEFI_STATUS


126 (
	tEFIAPI
 *
	tEFI_ACPI_OPEN
)(

127 
	tIN
 
	tVOID
 *
	tBuf„r
,

128 
	tOUT
 
	tEFI_ACPI_HANDLE
 *
	tH™dÀ


141 
	gEFI_STATUS


142 (
	tEFIAPI
 *
	tEFI_ACPI_OPEN_SDT
)(

143 
	tIN
 
	tUINTN
 
	tTabÀKey
,

144 
	tOUT
 
	tEFI_ACPI_HANDLE
 *
	tH™dÀ


156 
	gEFI_STATUS


157 (
	tEFIAPI
 *
	tEFI_ACPI_CLOSE
)(

158 
	tIN
 
	tEFI_ACPI_HANDLE
 
	tH™dÀ


173 
	gEFI_STATUS


174 (
	tEFIAPI
 *
	tEFI_ACPI_GET_CHILD
)(

175 
	tIN
 
	tEFI_ACPI_HANDLE
 
	tP¨ítH™dÀ
,

176 
	tIN
 
	tOUT
 
	tEFI_ACPI_HANDLE
 *
	tH™dÀ


193 
	gEFI_STATUS


194 (
	tEFIAPI
 *
	tEFI_ACPI_GET_OPTION
)(

195 
	tIN
 
	tEFI_ACPI_HANDLE
 
	tH™dÀ
,

196 
	tIN
 
	tUINTN
 
	tIndex
,

197 
	tOUT
 
	tEFI_ACPI_DATA_TYPE
 *
	tD©aTy≥
,

198 
	tOUT
 
	tCONST
 
	tVOID
 **
	tD©a
,

199 
	tOUT
 
	tUINTN
 *
	tD©aSize


218 
	gEFI_STATUS


219 (
	tEFIAPI
 *
	tEFI_ACPI_SET_OPTION
)(

220 
	tIN
 
	tEFI_ACPI_HANDLE
 
	tH™dÀ
,

221 
	tIN
 
	tUINTN
 
	tIndex
,

222 
	tIN
 
	tCONST
 
	tVOID
 *
	tD©a
,

223 
	tIN
 
	tUINTN
 
	tD©aSize


238 
	gEFI_STATUS


239 (
	tEFIAPI
 *
	tEFI_ACPI_FIND_PATH
)(

240 
	tIN
 
	tEFI_ACPI_HANDLE
 
	tH™dÀIn
,

241 
	tIN
 
	tVOID
 *
	tA˝iP©h
,

242 
	tOUT
 
	tEFI_ACPI_HANDLE
 *
	tH™dÀOut


245 
	s_EFI_ACPI_SDT_PROTOCOL
 {

249 
EFI_ACPI_TABLE_VERSION
 
	mA˝iVîsi⁄
;

250 
EFI_ACPI_GET_ACPI_TABLE2
 
	mGëA˝iTabÀ
;

251 
EFI_ACPI_REGISTER_NOTIFY
 
	mRegi°îNŸify
;

252 
EFI_ACPI_OPEN
 
	mO≥n
;

253 
EFI_ACPI_OPEN_SDT
 
	mO≥nSdt
;

254 
EFI_ACPI_CLOSE
 
	mClo£
;

255 
EFI_ACPI_GET_CHILD
 
	mGëChûd
;

256 
EFI_ACPI_GET_OPTION
 
	mGëO±i⁄
;

257 
EFI_ACPI_SET_OPTION
 
	mSëO±i⁄
;

258 
EFI_ACPI_FIND_PATH
 
	mFödP©h
;

259 } 
	tEFI_ACPI_SDT_PROTOCOL
;

261 
EFI_GUID
 
gEfiA˝iSdtPrŸocﬁGuid
;

	@AcpiTable.h

13 #i‚de‡
__ACPI_TABLE_H___


14 
	#__ACPI_TABLE_H___


	)

16 
	#EFI_ACPI_TABLE_PROTOCOL_GUID
 \

	)

20 
_EFI_ACPI_TABLE_PROTOCOL
 
	tEFI_ACPI_TABLE_PROTOCOL
;

72 
	gEFI_STATUS


73 (
	tEFIAPI
 *
	tEFI_ACPI_TABLE_INSTALL_ACPI_TABLE
)(

74 
	tIN
 
	tEFI_ACPI_TABLE_PROTOCOL
 *
	tThis
,

75 
	tIN
 
	tVOID
 *
	tA˝iTabÀBuf„r
,

76 
	tIN
 
	tUINTN
 
	tA˝iTabÀBuf„rSize
,

77 
	tOUT
 
	tUINTN
 *
	tTabÀKey


106 
	gEFI_STATUS


107 (
	tEFIAPI
 *
	tEFI_ACPI_TABLE_UNINSTALL_ACPI_TABLE
)(

108 
	tIN
 
	tEFI_ACPI_TABLE_PROTOCOL
 *
	tThis
,

109 
	tIN
 
	tUINTN
 
	tTabÀKey


116 
	s_EFI_ACPI_TABLE_PROTOCOL
 {

117 
EFI_ACPI_TABLE_INSTALL_ACPI_TABLE
 
	mIn°ÆlA˝iTabÀ
;

118 
EFI_ACPI_TABLE_UNINSTALL_ACPI_TABLE
 
	mUnö°ÆlA˝iTabÀ
;

121 
EFI_GUID
 
gEfiA˝iTabÀPrŸocﬁGuid
;

	@AdapterInformation.h

14 #i‚de‡
__EFI_ADAPTER_INFORMATION_PROTOCOL_H__


15 
	#__EFI_ADAPTER_INFORMATION_PROTOCOL_H__


	)

18 
	#EFI_ADAPTER_INFORMATION_PROTOCOL_GUID
 \

	)

23 
	#EFI_ADAPTER_INFO_MEDIA_STATE_GUID
 \

	)

28 
	#EFI_ADAPTER_INFO_NETWORK_BOOT_GUID
 \

	)

33 
	#EFI_ADAPTER_INFO_SAN_MAC_ADDRESS_GUID
 \

	)

38 
	#EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID
 \

	)

43 
	#EFI_ADAPTER_INFO_MEDIA_TYPE_GUID
 \

	)

49 
_EFI_ADAPTER_INFORMATION_PROTOCOL
 
	tEFI_ADAPTER_INFORMATION_PROTOCOL
;

61 
EFI_STATUS
 
	mMedüSèã
;

62 } 
	tEFI_ADAPTER_INFO_MEDIA_STATE
;

74 
UINT8
 
	mMedüTy≥
;

75 } 
	tEFI_ADAPTER_INFO_MEDIA_TYPE
;

84 
BOOLEAN
 
	miScsiIpv4BoŸC≠ablôy
;

88 
BOOLEAN
 
	miScsiIpv6BoŸC≠ablôy
;

92 
BOOLEAN
 
	mFC€BoŸC≠ablôy
;

97 
BOOLEAN
 
	mOfÊﬂdC≠abûôy
;

102 
BOOLEAN
 
	miScsiMpioC≠abûôy
;

107 
BOOLEAN
 
	miScsiIpv4BoŸ
;

112 
BOOLEAN
 
	miScsiIpv6BoŸ
;

116 
BOOLEAN
 
	mFC€BoŸ
;

117 } 
	tEFI_ADAPTER_INFO_NETWORK_BOOT
;

127 
EFI_MAC_ADDRESS
 
	mS™MacAddªss
;

128 } 
	tEFI_ADAPTER_INFO_SAN_MAC_ADDRESS
;

137 
BOOLEAN
 
	mIpv6Suµ‹t
;

138 } 
	tEFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT
;

163 
	gEFI_STATUS


164 (
	tEFIAPI
 *
	tEFI_ADAPTER_INFO_GET_INFO
)(

165 
	tIN
 
	tEFI_ADAPTER_INFORMATION_PROTOCOL
 *
	tThis
,

166 
	tIN
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

167 
	tOUT
 
	tVOID
 **
	tInf‹m©i⁄Block
,

168 
	tOUT
 
	tUINTN
 *
	tInf‹m©i⁄BlockSize


193 
	gEFI_STATUS


194 (
	tEFIAPI
 *
	tEFI_ADAPTER_INFO_SET_INFO
)(

195 
	tIN
 
	tEFI_ADAPTER_INFORMATION_PROTOCOL
 *
	tThis
,

196 
	tIN
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

197 
	tIN
 
	tVOID
 *
	tInf‹m©i⁄Block
,

198 
	tIN
 
	tUINTN
 
	tInf‹m©i⁄BlockSize


224 
	gEFI_STATUS


225 (
	tEFIAPI
 *
	tEFI_ADAPTER_INFO_GET_SUPPORTED_TYPES
)(

226 
	tIN
 
	tEFI_ADAPTER_INFORMATION_PROTOCOL
 *
	tThis
,

227 
	tOUT
 
	tEFI_GUID
 **
	tInfoTy≥sBuf„r
,

228 
	tOUT
 
	tUINTN
 *
	tInfoTy≥sBuf„rCou¡


238 
	s_EFI_ADAPTER_INFORMATION_PROTOCOL
 {

239 
EFI_ADAPTER_INFO_GET_INFO
 
	mGëInf‹m©i⁄
;

240 
EFI_ADAPTER_INFO_SET_INFO
 
	mSëInf‹m©i⁄
;

241 
EFI_ADAPTER_INFO_GET_SUPPORTED_TYPES
 
	mGëSuµ‹ãdTy≥s
;

244 
EFI_GUID
 
gEfiAd≠ãrInf‹m©i⁄PrŸocﬁGuid
;

246 
EFI_GUID
 
gEfiAd≠ãrInfoMedüSèãGuid
;

248 
EFI_GUID
 
gEfiAd≠ãrInfoNëw‹kBoŸGuid
;

250 
EFI_GUID
 
gEfiAd≠ãrInfoS™MacAddªssGuid
;

252 
EFI_GUID
 
gEfiAd≠ãrInfoUndiIpv6Suµ‹tGuid
;

	@Arp.h

18 #i‚de‡
__EFI_ARP_PROTOCOL_H__


19 
	#__EFI_ARP_PROTOCOL_H__


	)

21 
	#EFI_ARP_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

26 
	#EFI_ARP_PROTOCOL_GUID
 \

	)

31 
_EFI_ARP_PROTOCOL
 
	tEFI_ARP_PROTOCOL
;

37 
UINT32
 
	mSize
;

43 
BOOLEAN
 
	mDíyFœg
;

49 
BOOLEAN
 
	mSèticFœg
;

54 
UINT16
 
	mHwAddªssTy≥
;

59 
UINT16
 
	mSwAddªssTy≥
;

64 
UINT8
 
	mHwAddªssLígth
;

69 
UINT8
 
	mSwAddªssLígth
;

70 } 
	tEFI_ARP_FIND_DATA
;

76 
UINT16
 
	mSwAddªssTy≥
;

81 
UINT8
 
	mSwAddªssLígth
;

89 
VOID
 *
	mSèti⁄Addªss
;

96 
UINT32
 
	mE¡ryTimeOut
;

102 
UINT32
 
	mRëryCou¡
;

109 
UINT32
 
	mRëryTimeOut
;

110 } 
	tEFI_ARP_CONFIG_DATA
;

142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_ARP_CONFIGURE
)(

144 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

145 
	tIN
 
	tEFI_ARP_CONFIG_DATA
 *
	tC⁄figD©a
 
	tOPTIONAL


194 
	gEFI_STATUS


195 (
	tEFIAPI
 *
	tEFI_ARP_ADD
)(

196 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

197 
	tIN
 
	tBOOLEAN
 
	tDíyFœg
,

198 
	tIN
 
	tVOID
 *
	tT¨gëSwAddªss
 
	tOPTIONAL
,

199 
	tIN
 
	tVOID
 *
	tT¨gëHwAddªss
 
	tOPTIONAL
,

200 
	tIN
 
	tUINT32
 
	tTimeoutVÆue
,

201 
	tIN
 
	tBOOLEAN
 
	tOvîwrôe


239 
	gEFI_STATUS


240 (
	tEFIAPI
 *
	tEFI_ARP_FIND
)(

241 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

242 
	tIN
 
	tBOOLEAN
 
	tBySwAddªss
,

243 
	tIN
 
	tVOID
 *
	tAddªssBuf„r
 
	tOPTIONAL
,

244 
	tOUT
 
	tUINT32
 *
	tE¡ryLígth
 
	tOPTIONAL
,

245 
	tOUT
 
	tUINT32
 *
	tE¡ryCou¡
 
	tOPTIONAL
,

246 
	tOUT
 
	tEFI_ARP_FIND_DATA
 **
	tE¡rõs
 
	tOPTIONAL
,

247 
	tIN
 
	tBOOLEAN
 
	tRe‰esh


269 
	gEFI_STATUS


270 (
	tEFIAPI
 *
	tEFI_ARP_DELETE
)(

271 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

272 
	tIN
 
	tBOOLEAN
 
	tBySwAddªss
,

273 
	tIN
 
	tVOID
 *
	tAddªssBuf„r
 
	tOPTIONAL


289 
	gEFI_STATUS


290 (
	tEFIAPI
 *
	tEFI_ARP_FLUSH
)(

291 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis


317 
	gEFI_STATUS


318 (
	tEFIAPI
 *
	tEFI_ARP_REQUEST
)(

319 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

320 
	tIN
 
	tVOID
 *
	tT¨gëSwAddªss
 
	tOPTIONAL
,

321 
	tIN
 
	tEFI_EVENT
 
	tResﬁvedEvít
 
	tOPTIONAL
,

322 
	tOUT
 
	tVOID
 *
	tT¨gëHwAddªss


354 
	gEFI_STATUS


355 (
	tEFIAPI
 *
	tEFI_ARP_CANCEL
)(

356 
	tIN
 
	tEFI_ARP_PROTOCOL
 *
	tThis
,

357 
	tIN
 
	tVOID
 *
	tT¨gëSwAddªss
 
	tOPTIONAL
,

358 
	tIN
 
	tEFI_EVENT
 
	tResﬁvedEvít
 
	tOPTIONAL


365 
	s_EFI_ARP_PROTOCOL
 {

366 
EFI_ARP_CONFIGURE
 
	mC⁄figuª
;

367 
EFI_ARP_ADD
 
	mAdd
;

368 
EFI_ARP_FIND
 
	mFöd
;

369 
EFI_ARP_DELETE
 
	mDñëe
;

370 
EFI_ARP_FLUSH
 
	mFlush
;

371 
EFI_ARP_REQUEST
 
	mReque°
;

372 
EFI_ARP_CANCEL
 
	mC™˚l
;

376 
EFI_GUID
 
gEfiAΩSîvi˚BödögPrŸocﬁGuid
;

377 
EFI_GUID
 
gEfiAΩPrŸocﬁGuid
;

	@AtaPassThru.h

14 #i‚de‡
__ATA_PASS_THROUGH_H__


15 
	#__ATA_PASS_THROUGH_H__


	)

17 
	#EFI_ATA_PASS_THRU_PROTOCOL_GUID
 \

	)

22 
_EFI_ATA_PASS_THRU_PROTOCOL
 
	tEFI_ATA_PASS_THRU_PROTOCOL
;

25 
UINT32
 
	mAâribuãs
;

26 
UINT32
 
	mIoAlign
;

27 } 
	tEFI_ATA_PASS_THRU_MODE
;

33 
	#EFI_ATA_PASS_THRU_ATTRIBUTES_PHYSICAL
 0x0001

	)

38 
	#EFI_ATA_PASS_THRU_ATTRIBUTES_LOGICAL
 0x0002

	)

44 
	#EFI_ATA_PASS_THRU_ATTRIBUTES_NONBLOCKIO
 0x0004

	)

46 
	s_EFI_ATA_COMMAND_BLOCK
 {

47 
UINT8
 
	mRe£rved1
[2];

48 
UINT8
 
	mAèComm™d
;

49 
UINT8
 
	mAèFótuªs
;

50 
UINT8
 
	mAèSe˘‹Numbî
;

51 
UINT8
 
	mAèCylödîLow
;

52 
UINT8
 
	mAèCylödîHigh
;

53 
UINT8
 
	mAèDevi˚Hód
;

54 
UINT8
 
	mAèSe˘‹NumbîExp
;

55 
UINT8
 
	mAèCylödîLowExp
;

56 
UINT8
 
	mAèCylödîHighExp
;

57 
UINT8
 
	mAèFótuªsExp
;

58 
UINT8
 
	mAèSe˘‹Cou¡
;

59 
UINT8
 
	mAèSe˘‹Cou¡Exp
;

60 
UINT8
 
	mRe£rved2
[6];

61 } 
	tEFI_ATA_COMMAND_BLOCK
;

63 
	s_EFI_ATA_STATUS_BLOCK
 {

64 
UINT8
 
	mRe£rved1
[2];

65 
UINT8
 
	mAèSètus
;

66 
UINT8
 
	mAèEº‹
;

67 
UINT8
 
	mAèSe˘‹Numbî
;

68 
UINT8
 
	mAèCylödîLow
;

69 
UINT8
 
	mAèCylödîHigh
;

70 
UINT8
 
	mAèDevi˚Hód
;

71 
UINT8
 
	mAèSe˘‹NumbîExp
;

72 
UINT8
 
	mAèCylödîLowExp
;

73 
UINT8
 
	mAèCylödîHighExp
;

74 
UINT8
 
	mRe£rved2
;

75 
UINT8
 
	mAèSe˘‹Cou¡
;

76 
UINT8
 
	mAèSe˘‹Cou¡Exp
;

77 
UINT8
 
	mRe£rved3
[6];

78 } 
	tEFI_ATA_STATUS_BLOCK
;

80 
UINT8
 
	tEFI_ATA_PASS_THRU_CMD_PROTOCOL
;

82 
	#EFI_ATA_PASS_THRU_PROTOCOL_ATA_HARDWARE_RESET
 0x00

	)

83 
	#EFI_ATA_PASS_THRU_PROTOCOL_ATA_SOFTWARE_RESET
 0x01

	)

84 
	#EFI_ATA_PASS_THRU_PROTOCOL_ATA_NON_DATA
 0x02

	)

85 
	#EFI_ATA_PASS_THRU_PROTOCOL_PIO_DATA_IN
 0x04

	)

86 
	#EFI_ATA_PASS_THRU_PROTOCOL_PIO_DATA_OUT
 0x05

	)

87 
	#EFI_ATA_PASS_THRU_PROTOCOL_DMA
 0x06

	)

88 
	#EFI_ATA_PASS_THRU_PROTOCOL_DMA_QUEUED
 0x07

	)

89 
	#EFI_ATA_PASS_THRU_PROTOCOL_DEVICE_DIAGNOSTIC
 0x08

	)

90 
	#EFI_ATA_PASS_THRU_PROTOCOL_DEVICE_RESET
 0x09

	)

91 
	#EFI_ATA_PASS_THRU_PROTOCOL_UDMA_DATA_IN
 0x0A

	)

92 
	#EFI_ATA_PASS_THRU_PROTOCOL_UDMA_DATA_OUT
 0x0B

	)

93 
	#EFI_ATA_PASS_THRU_PROTOCOL_FPDMA
 0x0C

	)

94 
	#EFI_ATA_PASS_THRU_PROTOCOL_RETURN_RESPONSE
 0xFF

	)

96 
UINT8
 
	tEFI_ATA_PASS_THRU_LENGTH
;

98 
	#EFI_ATA_PASS_THRU_LENGTH_BYTES
 0x80

	)

101 
	#EFI_ATA_PASS_THRU_LENGTH_MASK
 0x70

	)

102 
	#EFI_ATA_PASS_THRU_LENGTH_NO_DATA_TRANSFER
 0x00

	)

103 
	#EFI_ATA_PASS_THRU_LENGTH_FEATURES
 0x10

	)

104 
	#EFI_ATA_PASS_THRU_LENGTH_SECTOR_COUNT
 0x20

	)

105 
	#EFI_ATA_PASS_THRU_LENGTH_TPSIU
 0x30

	)

107 
	#EFI_ATA_PASS_THRU_LENGTH_COUNT
 0x0F

	)

115 
EFI_ATA_STATUS_BLOCK
 *
	mAsb
;

120 
EFI_ATA_COMMAND_BLOCK
 *
	mAcb
;

128 
UINT64
 
	mTimeout
;

136 
VOID
 *
	mInD©aBuf„r
;

144 
VOID
 *
	mOutD©aBuf„r
;

152 
UINT32
 
	mInTøns„rLígth
;

160 
UINT32
 
	mOutTøns„rLígth
;

164 
EFI_ATA_PASS_THRU_CMD_PROTOCOL
 
	mPrŸocﬁ
;

168 
EFI_ATA_PASS_THRU_LENGTH
 
	mLígth
;

169 } 
	tEFI_ATA_PASS_THRU_COMMAND_PACKET
;

202 
	gEFI_STATUS


203 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_PASSTHRU
)(

204 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

205 
	tIN
 
	tUINT16
 
	tP‹t
,

206 
	tIN
 
	tUINT16
 
	tP‹tMu…ùlõrP‹t
,

207 
	tIN
 
	tOUT
 
	tEFI_ATA_PASS_THRU_COMMAND_PACKET
 *
	tPackë
,

208 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


243 
	gEFI_STATUS


244 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_GET_NEXT_PORT
)(

245 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

246 
	tIN
 
	tOUT
 
	tUINT16
 *
	tP‹t


292 
	gEFI_STATUS


293 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_GET_NEXT_DEVICE
)(

294 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

295 
	tIN
 
	tUINT16
 
	tP‹t
,

296 
	tIN
 
	tOUT
 
	tUINT16
 *
	tP‹tMu…ùlõrP‹t


332 
	gEFI_STATUS


333 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_BUILD_DEVICE_PATH
)(

334 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

335 
	tIN
 
	tUINT16
 
	tP‹t
,

336 
	tIN
 
	tUINT16
 
	tP‹tMu…ùlõrP‹t
,

337 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


377 
	gEFI_STATUS


378 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_GET_DEVICE
)(

379 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

380 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

381 
	tOUT
 
	tUINT16
 *
	tP‹t
,

382 
	tOUT
 
	tUINT16
 *
	tP‹tMu…ùlõrP‹t


410 
	gEFI_STATUS


411 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_RESET_PORT
)(

412 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

413 
	tIN
 
	tUINT16
 
	tP‹t


448 
	gEFI_STATUS


449 (
	tEFIAPI
 *
	tEFI_ATA_PASS_THRU_RESET_DEVICE
)(

450 
	tIN
 
	tEFI_ATA_PASS_THRU_PROTOCOL
 *
	tThis
,

451 
	tIN
 
	tUINT16
 
	tP‹t
,

452 
	tIN
 
	tUINT16
 
	tP‹tMu…ùlõrP‹t


455 
	s_EFI_ATA_PASS_THRU_PROTOCOL
 {

456 
EFI_ATA_PASS_THRU_MODE
 *
	mMode
;

457 
EFI_ATA_PASS_THRU_PASSTHRU
 
	mPassThru
;

458 
EFI_ATA_PASS_THRU_GET_NEXT_PORT
 
	mGëNextP‹t
;

459 
EFI_ATA_PASS_THRU_GET_NEXT_DEVICE
 
	mGëNextDevi˚
;

460 
EFI_ATA_PASS_THRU_BUILD_DEVICE_PATH
 
	mBuûdDevi˚P©h
;

461 
EFI_ATA_PASS_THRU_GET_DEVICE
 
	mGëDevi˚
;

462 
EFI_ATA_PASS_THRU_RESET_PORT
 
	mRe£tP‹t
;

463 
EFI_ATA_PASS_THRU_RESET_DEVICE
 
	mRe£tDevi˚
;

466 
EFI_GUID
 
gEfiAèPassThruPrŸocﬁGuid
;

	@AuthenticationInfo.h

11 #i‚de‡
__AUTHENTICATION_INFO_H__


12 
	#__AUTHENTICATION_INFO_H__


	)

14 
	#EFI_AUTHENTICATION_INFO_PROTOCOL_GUID
 \

	)

19 
	#EFI_AUTHENTICATION_CHAP_RADIUS_GUID
 \

	)

24 
	#EFI_AUTHENTICATION_CHAP_LOCAL_GUID
 \

	)

29 
_EFI_AUTHENTICATION_INFO_PROTOCOL
 
	tEFI_AUTHENTICATION_INFO_PROTOCOL
;

31 #¥agm®
∑ck
(1)

36 
EFI_GUID
 
	mGuid
;

41 
UINT16
 
	mLígth
;

42 } 
	tAUTH_NODE_HEADER
;

45 
AUTH_NODE_HEADER
 
	mHódî
;

50 
UINT8
 
	mRadiusIpAddr
[16];

55 
UINT16
 
	mRe£rved
;

60 
UINT8
 
	mNasIpAddr
[16];

65 
UINT16
 
	mNasSe¸ëLígth
;

70 
UINT8
 
	mNasSe¸ë
[1];

105 } 
	tCHAP_RADIUS_AUTH_NODE
;

108 
AUTH_NODE_HEADER
 
	mHódî
;

113 
UINT16
 
	mRe£rved
;

118 
UINT16
 
	mU£rSe¸ëLígth
;

123 
UINT8
 
	mU£rSe¸ë
[1];

166 } 
	tCHAP_LOCAL_AUTH_NODE
;

167 #¥agm®
∑ck
()

187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_AUTHENTICATION_INFO_PROTOCOL_GET
)(

189 
	tIN
 
	tEFI_AUTHENTICATION_INFO_PROTOCOL
 *
	tThis
,

190 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

191 
	tOUT
 
	tVOID
 **
	tBuf„r


211 
	gEFI_STATUS


212 (
	tEFIAPI
 *
	tEFI_AUTHENTICATION_INFO_PROTOCOL_SET
)(

213 
	tIN
 
	tEFI_AUTHENTICATION_INFO_PROTOCOL
 *
	tThis
,

214 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

215 
	tIN
 
	tVOID
 *
	tBuf„r


222 
	s_EFI_AUTHENTICATION_INFO_PROTOCOL
 {

223 
EFI_AUTHENTICATION_INFO_PROTOCOL_GET
 
	mGë
;

224 
EFI_AUTHENTICATION_INFO_PROTOCOL_SET
 
	mSë
;

227 
EFI_GUID
 
gEfiAuthítiˇti⁄InfoPrŸocﬁGuid
;

228 
EFI_GUID
 
gEfiAuthítiˇti⁄Ch≠RadiusGuid
;

229 
EFI_GUID
 
gEfiAuthítiˇti⁄Ch≠LoˇlGuid
;

	@Bds.h

11 #i‚de‡
__ARCH_PROTOCOL_BDS_H__


12 
	#__ARCH_PROTOCOL_BDS_H__


	)

17 
	#EFI_BDS_ARCH_PROTOCOL_GUID
 \

	)

23 
_EFI_BDS_ARCH_PROTOCOL
 
	tEFI_BDS_ARCH_PROTOCOL
;

47 
	gVOID


48 (
	tEFIAPI
 *
	tEFI_BDS_ENTRY
)(

49 
	tIN
 
	tEFI_BDS_ARCH_PROTOCOL
 *
	tThis


60 
	s_EFI_BDS_ARCH_PROTOCOL
 {

61 
EFI_BDS_ENTRY
 
	mE¡ry
;

64 
EFI_GUID
 
gEfiBdsArchPrŸocﬁGuid
;

	@Bis.h

13 #i‚de‡
__BIS_H__


14 
	#__BIS_H__


	)

16 
	#EFI_BIS_PROTOCOL_GUID
 \

	)

27 
	#BOOT_OBJECT_AUTHORIZATION_PARMSET_GUID
 \

	)

34 
_EFI_BIS_PROTOCOL
 
	tEFI_BIS_PROTOCOL
;

40 
VOID
 *
	tBIS_APPLICATION_HANDLE
;

41 
UINT16
 
	tBIS_ALG_ID
;

42 
UINT32
 
	tBIS_CERT_ID
;

48 
UINT32
 
	mLígth
;

49 
UINT8
 *
	mD©a
;

50 } 
	tEFI_BIS_DATA
;

56 
UINT32
 
	mMaj‹
;

57 
UINT32
 
	mMö‹
;

58 } 
	tEFI_BIS_VERSION
;

66 
	#BIS_CURRENT_VERSION_MAJOR
 
BIS_VERSION_1


	)

67 
	#BIS_VERSION_1
 1

	)

73 
BIS_CERT_ID
 
	mCîtifiˇãID
;

74 
BIS_ALG_ID
 
	mAlg‹ôhmID
;

75 
UINT16
 
	mKeyLígth
;

76 } 
	tEFI_BIS_SIGNATURE_INFO
;

83 
	#BIS_ALG_DSA
 (41)

84 
	#BIS_ALG_RSA_MD5
 (42)

88 
	#BIS_CERT_ID_DSA
 
BIS_ALG_DSA


89 
	#BIS_CERT_ID_RSA_MD5
 
BIS_ALG_RSA_MD5


96 
	#BIS_CERT_ID_MASK
 (0xFF7F7FFF)

	)

105 
	#BIS_GET_SIGINFO_COUNT
(
BisD©aPå
Ë((BisD©aPå)->
Lígth
 /  (
EFI_BIS_SIGNATURE_INFO
))

	)

111 
	#BIS_GET_SIGINFO_ARRAY
(
BisD©aPå
Ë((
EFI_BIS_SIGNATURE_INFO
 *Ë(BisD©aPå)->
D©a
)

	)

116 
	#BOOT_OBJECT_AUTHORIZATION_PARMSET_GUIDVALUE
 \

	)

117 
	gBOOT_OBJECT_AUTHORIZATION_PARMSET_GUID


161 
	gEFI_STATUS


162 (
	tEFIAPI
 *
	tEFI_BIS_INITIALIZE
)(

163 
	tIN
 
	tEFI_BIS_PROTOCOL
 *
	tThis
,

164 
	tOUT
 
	tBIS_APPLICATION_HANDLE
 *
	tAµH™dÀ
,

165 
	tIN
 
	tOUT
 
	tEFI_BIS_VERSION
 *
	tI¡îÁ˚Vîsi⁄
,

166 
	tIN
 
	tEFI_BIS_DATA
 *
	tT¨gëAddªss


186 
	gEFI_STATUS


187 (
	tEFIAPI
 *
	tEFI_BIS_FREE
)(

188 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

189 
	tIN
 
	tEFI_BIS_DATA
 *
	tToFªe


208 
	gEFI_STATUS


209 (
	tEFIAPI
 *
	tEFI_BIS_SHUTDOWN
)(

210 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ


233 
	gEFI_STATUS


234 (
	tEFIAPI
 *
	tEFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_CERTIFICATE
)(

235 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

236 
	tOUT
 
	tEFI_BIS_DATA
 **
	tCîtifiˇã


262 
	gEFI_STATUS


263 (
	tEFIAPI
 *
	tEFI_BIS_VERIFY_BOOT_OBJECT
)(

264 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

265 
	tIN
 
	tEFI_BIS_DATA
 *
	tCªdítüls
,

266 
	tIN
 
	tEFI_BIS_DATA
 *
	tD©aObje˘
,

267 
	tOUT
 
	tBOOLEAN
 *
	tIsVîifõd


288 
	gEFI_STATUS


289 (
	tEFIAPI
 *
	tEFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_CHECKFLAG
)(

290 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

291 
	tOUT
 
	tBOOLEAN
 *
	tCheckIsRequúed


315 
	gEFI_STATUS


316 (
	tEFIAPI
 *
	tEFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_UPDATE_TOKEN
)(

317 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

318 
	tOUT
 
	tEFI_BIS_DATA
 **
	tUpd©eTokí


347 
	gEFI_STATUS


348 (
	tEFIAPI
 *
	tEFI_BIS_UPDATE_BOOT_OBJECT_AUTHORIZATION
)(

349 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

350 
	tIN
 
	tEFI_BIS_DATA
 *
	tReque°Cªdítül
,

351 
	tOUT
 
	tEFI_BIS_DATA
 **
	tNewUpd©eTokí


385 
	gEFI_STATUS


386 (
	tEFIAPI
 *
	tEFI_BIS_VERIFY_OBJECT_WITH_CREDENTIAL
)(

387 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

388 
	tIN
 
	tEFI_BIS_DATA
 *
	tCªdítüls
,

389 
	tIN
 
	tEFI_BIS_DATA
 *
	tD©aObje˘
,

390 
	tIN
 
	tEFI_BIS_DATA
 *
	tSe˘i⁄Name
,

391 
	tIN
 
	tEFI_BIS_DATA
 *
	tAuth‹ôyCîtifiˇã
,

392 
	tOUT
 
	tBOOLEAN
 *
	tIsVîifõd


419 
	gEFI_STATUS


420 (
	tEFIAPI
 *
	tEFI_BIS_GET_SIGNATURE_INFO
)(

421 
	tIN
 
	tBIS_APPLICATION_HANDLE
 
	tAµH™dÀ
,

422 
	tOUT
 
	tEFI_BIS_DATA
 **
	tSig«tuªInfo


429 
	s_EFI_BIS_PROTOCOL
 {

430 
EFI_BIS_INITIALIZE
 
	mInôülize
;

431 
EFI_BIS_SHUTDOWN
 
	mShutdown
;

432 
EFI_BIS_FREE
 
	mFªe
;

433 
EFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_CERTIFICATE
 
	mGëBoŸObje˘Auth‹iz©i⁄Cîtifiˇã
;

434 
EFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_CHECKFLAG
 
	mGëBoŸObje˘Auth‹iz©i⁄CheckFœg
;

435 
EFI_BIS_GET_BOOT_OBJECT_AUTHORIZATION_UPDATE_TOKEN
 
	mGëBoŸObje˘Auth‹iz©i⁄Upd©eTokí
;

436 
EFI_BIS_GET_SIGNATURE_INFO
 
	mGëSig«tuªInfo
;

437 
EFI_BIS_UPDATE_BOOT_OBJECT_AUTHORIZATION
 
	mUpd©eBoŸObje˘Auth‹iz©i⁄
;

438 
EFI_BIS_VERIFY_BOOT_OBJECT
 
	mVîifyBoŸObje˘
;

439 
EFI_BIS_VERIFY_OBJECT_WITH_CREDENTIAL
 
	mVîifyObje˘WôhCªdítül
;

442 
EFI_GUID
 
gEfiBisPrŸocﬁGuid
;

443 
EFI_GUID
 
gBoŸObje˘Auth‹iz©i⁄P¨m£tGuid
;

	@BlockIo.h

12 #i‚de‡
__BLOCK_IO_H__


13 
	#__BLOCK_IO_H__


	)

15 
	#EFI_BLOCK_IO_PROTOCOL_GUID
 \

	)

20 
_EFI_BLOCK_IO_PROTOCOL
 
	tEFI_BLOCK_IO_PROTOCOL
;

25 
	#BLOCK_IO_PROTOCOL
 
EFI_BLOCK_IO_PROTOCOL_GUID


	)

30 
EFI_BLOCK_IO_PROTOCOL
 
	tEFI_BLOCK_IO
;

44 
	gEFI_STATUS


45 (
	tEFIAPI
 *
	tEFI_BLOCK_RESET
)(

46 
	tIN
 
	tEFI_BLOCK_IO_PROTOCOL
 *
	tThis
,

47 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


70 
	gEFI_STATUS


71 (
	tEFIAPI
 *
	tEFI_BLOCK_READ
)(

72 
	tIN
 
	tEFI_BLOCK_IO_PROTOCOL
 *
	tThis
,

73 
	tIN
 
	tUINT32
 
	tMedüId
,

74 
	tIN
 
	tEFI_LBA
 
	tLba
,

75 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

76 
	tOUT
 
	tVOID
 *
	tBuf„r


100 
	gEFI_STATUS


101 (
	tEFIAPI
 *
	tEFI_BLOCK_WRITE
)(

102 
	tIN
 
	tEFI_BLOCK_IO_PROTOCOL
 *
	tThis
,

103 
	tIN
 
	tUINT32
 
	tMedüId
,

104 
	tIN
 
	tEFI_LBA
 
	tLba
,

105 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

106 
	tIN
 
	tVOID
 *
	tBuf„r


120 
	gEFI_STATUS


121 (
	tEFIAPI
 *
	tEFI_BLOCK_FLUSH
)(

122 
	tIN
 
	tEFI_BLOCK_IO_PROTOCOL
 *
	tThis


132 
UINT32
 
	mMedüId
;

137 
BOOLEAN
 
	mRemovabÀMedü
;

144 
BOOLEAN
 
	mMedüPª£¡
;

150 
BOOLEAN
 
	mLogiˇlP¨tôi⁄
;

156 
BOOLEAN
 
	mRódO∆y
;

161 
BOOLEAN
 
	mWrôeCachög
;

167 
UINT32
 
	mBlockSize
;

172 
UINT32
 
	mIoAlign
;

178 
EFI_LBA
 
	mLa°Block
;

185 
EFI_LBA
 
	mLowe°Alig√dLba
;

192 
UINT32
 
	mLogiˇlBlocksPîPhysiˇlBlock
;

199 
UINT32
 
	mO±imÆTøns„rLígthGønuœrôy
;

200 } 
	tEFI_BLOCK_IO_MEDIA
;

202 
	#EFI_BLOCK_IO_PROTOCOL_REVISION
 0x00010000

	)

203 
	#EFI_BLOCK_IO_PROTOCOL_REVISION2
 0x00020001

	)

204 
	#EFI_BLOCK_IO_PROTOCOL_REVISION3
 0x0002001F

	)

209 
	#EFI_BLOCK_IO_INTERFACE_REVISION
 
EFI_BLOCK_IO_PROTOCOL_REVISION


	)

214 
	s_EFI_BLOCK_IO_PROTOCOL
 {

220 
UINT64
 
	mRevisi⁄
;

224 
EFI_BLOCK_IO_MEDIA
 *
	mMedü
;

226 
EFI_BLOCK_RESET
 
	mRe£t
;

227 
EFI_BLOCK_READ
 
	mRódBlocks
;

228 
EFI_BLOCK_WRITE
 
	mWrôeBlocks
;

229 
EFI_BLOCK_FLUSH
 
	mFlushBlocks
;

233 
EFI_GUID
 
gEfiBlockIoPrŸocﬁGuid
;

	@BlockIo2.h

13 #i‚de‡
__BLOCK_IO2_H__


14 
	#__BLOCK_IO2_H__


	)

16 
	~<PrŸocﬁ/BlockIo.h
>

18 
	#EFI_BLOCK_IO2_PROTOCOL_GUID
 \

	)

23 
_EFI_BLOCK_IO2_PROTOCOL
 
	tEFI_BLOCK_IO2_PROTOCOL
;

35 
EFI_EVENT
 
	mEvít
;

40 
EFI_STATUS
 
	mTønß˘i⁄Sètus
;

41 } 
	tEFI_BLOCK_IO2_TOKEN
;

58 
	gEFI_STATUS


59 (
	tEFIAPI
 *
	tEFI_BLOCK_RESET_EX
) (

60 
	tIN
 
	tEFI_BLOCK_IO2_PROTOCOL
 *
	tThis
,

61 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


98 
	gEFI_STATUS


99 (
	tEFIAPI
 *
	tEFI_BLOCK_READ_EX
) (

100 
	tIN
 
	tEFI_BLOCK_IO2_PROTOCOL
 *
	tThis
,

101 
	tIN
 
	tUINT32
 
	tMedüId
,

102 
	tIN
 
	tEFI_LBA
 
	tLBA
,

103 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO2_TOKEN
 *
	tTokí
,

104 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

105 
	tOUT
 
	tVOID
 *
	tBuf„r


140 
	gEFI_STATUS


141 (
	tEFIAPI
 *
	tEFI_BLOCK_WRITE_EX
) (

142 
	tIN
 
	tEFI_BLOCK_IO2_PROTOCOL
 *
	tThis
,

143 
	tIN
 
	tUINT32
 
	tMedüId
,

144 
	tIN
 
	tEFI_LBA
 
	tLBA
,

145 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO2_TOKEN
 *
	tTokí
,

146 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

147 
	tIN
 
	tVOID
 *
	tBuf„r


173 
	gEFI_STATUS


174 (
	tEFIAPI
 *
	tEFI_BLOCK_FLUSH_EX
) (

175 
	tIN
 
	tEFI_BLOCK_IO2_PROTOCOL
 *
	tThis
,

176 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO2_TOKEN
 *
	tTokí


184 
	s_EFI_BLOCK_IO2_PROTOCOL
 {

189 
EFI_BLOCK_IO_MEDIA
 *
	mMedü
;

191 
EFI_BLOCK_RESET_EX
 
	mRe£t
;

192 
EFI_BLOCK_READ_EX
 
	mRódBlocksEx
;

193 
EFI_BLOCK_WRITE_EX
 
	mWrôeBlocksEx
;

194 
EFI_BLOCK_FLUSH_EX
 
	mFlushBlocksEx
;

197 
EFI_GUID
 
gEfiBlockIo2PrŸocﬁGuid
;

	@BlockIoCrypto.h

13 #i‚de‡
__BLOCK_IO_CRYPTO_H__


14 
	#__BLOCK_IO_CRYPTO_H__


	)

16 
	~<PrŸocﬁ/BlockIo.h
>

18 
	#EFI_BLOCK_IO_CRYPTO_PROTOCOL_GUID
 \

	)

23 
_EFI_BLOCK_IO_CRYPTO_PROTOCOL
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
;

35 
EFI_EVENT
 
	mEvít
;

39 
EFI_STATUS
 
	mTønß˘i⁄Sètus
;

40 } 
	tEFI_BLOCK_IO_CRYPTO_TOKEN
;

46 
EFI_GUID
 
	mAlg‹ôhm
;

50 
UINT64
 
	mKeySize
;

55 
UINT64
 
	mCry±oBlockSizeBôMask
;

56 } 
	tEFI_BLOCK_IO_CRYPTO_CAPABILITY
;

66 
UINT64
 
	mI≈utSize
;

67 } 
	tEFI_BLOCK_IO_CRYPTO_IV_INPUT
;

69 
	#EFI_BLOCK_IO_CRYPTO_ALGO_GUID_AES_XTS
 \

	)

74 
EFI_GUID
 
gEfiBlockIoCry±oAlgoAesXtsGuid
;

77 
EFI_BLOCK_IO_CRYPTO_IV_INPUT
 
	mHódî
;

78 
UINT64
 
	mCry±oBlockNumbî
;

79 
UINT64
 
	mCry±oBlockByãSize
;

80 } 
	tEFI_BLOCK_IO_CRYPTO_IV_INPUT_AES_XTS
;

82 
	#EFI_BLOCK_IO_CRYPTO_ALGO_GUID_AES_CBC_MICROSOFT_BITLOCKER
 \

	)

87 
EFI_GUID
 
gEfiBlockIoCry±oAlgoAesCbcMsBôlockîGuid
;

90 
EFI_BLOCK_IO_CRYPTO_IV_INPUT
 
	mHódî
;

91 
UINT64
 
	mCry±oBlockByãOff£t
;

92 
UINT64
 
	mCry±oBlockByãSize
;

93 } 
	tEFI_BLOCK_IO_CRYPTO_IV_INPUT_AES_CBC_MICROSOFT_BITLOCKER
;

95 
	#EFI_BLOCK_IO_CRYPTO_INDEX_ANY
 0xFFFFFFFFFFFFFFFF

	)

101 
BOOLEAN
 
	mSuµ‹ãd
;

105 
UINT64
 
	mKeyCou¡
;

109 
UINT64
 
	mC≠abûôyCou¡
;

113 
EFI_BLOCK_IO_CRYPTO_CAPABILITY
 
	mC≠abûôõs
[1];

114 } 
	tEFI_BLOCK_IO_CRYPTO_CAPABILITIES
;

121 
UINT64
 
	mIndex
;

126 
EFI_GUID
 
	mKeyOw√rGuid
;

131 
EFI_BLOCK_IO_CRYPTO_CAPABILITY
 
	mC≠abûôy
;

136 
VOID
 *
	mCry±oKey
;

137 } 
	tEFI_BLOCK_IO_CRYPTO_CONFIGURATION_TABLE_ENTRY
;

143 
UINT64
 
	mIndex
;

147 
EFI_GUID
 
	mKeyOw√rGuid
;

152 
EFI_BLOCK_IO_CRYPTO_CAPABILITY
 
	mC≠abûôy
;

153 } 
	tEFI_BLOCK_IO_CRYPTO_RESPONSE_CONFIGURATION_ENTRY
;

181 
	gEFI_STATUS


182 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_RESET
) (

183 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

184 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


214 
	gEFI_STATUS


215 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_GET_CAPABILITIES
) (

216 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

217 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_CAPABILITIES
 *
	tC≠abûôõs


283 
	gEFI_STATUS


284 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_SET_CONFIGURATION
) (

285 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

286 
	tIN
 
	tUINT64
 
	tC⁄figuøti⁄Cou¡
,

287 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_CONFIGURATION_TABLE_ENTRY
 *
	tC⁄figuøti⁄TabÀ
,

288 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_RESPONSE_CONFIGURATION_ENTRY
 *
	tResu…ögTabÀ
 
	tOPTIONAL


324 
	gEFI_STATUS


325 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_GET_CONFIGURATION
) (

326 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

327 
	tIN
 
	tUINT64
 
	tSèπIndex
,

328 
	tIN
 
	tUINT64
 
	tC⁄figuøti⁄Cou¡
,

329 
	tIN
 
	tEFI_GUID
 *
	tKeyOw√rGuid
 
	tOPTIONAL
,

330 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_RESPONSE_CONFIGURATION_ENTRY
 *
	tC⁄figuøti⁄TabÀ


389 
	gEFI_STATUS


390 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_READ_EXTENDED
) (

391 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

392 
	tIN
 
	tUINT32
 
	tMedüId
,

393 
	tIN
 
	tEFI_LBA
 
	tLBA
,

394 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_TOKEN
 *
	tTokí
,

395 
	tIN
 
	tUINT64
 
	tBuf„rSize
,

396 
	tOUT
 
	tVOID
 *
	tBuf„r
,

397 
	tIN
 
	tUINT64
 *
	tIndex
 
	tOPTIONAL
,

398 
	tIN
 
	tVOID
 *
	tCry±oIvI≈ut
 
	tOPTIONAL


455 
	gEFI_STATUS


456 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_WRITE_EXTENDED
) (

457 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

458 
	tIN
 
	tUINT32
 
	tMedüId
,

459 
	tIN
 
	tEFI_LBA
 
	tLBA
,

460 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_TOKEN
 *
	tTokí
,

461 
	tIN
 
	tUINT64
 
	tBuf„rSize
,

462 
	tIN
 
	tVOID
 *
	tBuf„r
,

463 
	tIN
 
	tUINT64
 *
	tIndex
 
	tOPTIONAL
,

464 
	tIN
 
	tVOID
 *
	tCry±oIvI≈ut
 
	tOPTIONAL


500 
	gEFI_STATUS


501 (
	tEFIAPI
 *
	tEFI_BLOCK_IO_CRYPTO_FLUSH
) (

502 
	tIN
 
	tEFI_BLOCK_IO_CRYPTO_PROTOCOL
 *
	tThis
,

503 
	tIN
 
	tOUT
 
	tEFI_BLOCK_IO_CRYPTO_TOKEN
 *
	tTokí


510 
	s_EFI_BLOCK_IO_CRYPTO_PROTOCOL
 {

511 
EFI_BLOCK_IO_MEDIA
 *
	mMedü
;

512 
EFI_BLOCK_IO_CRYPTO_RESET
 
	mRe£t
;

513 
EFI_BLOCK_IO_CRYPTO_GET_CAPABILITIES
 
	mGëC≠abûôõs
;

514 
EFI_BLOCK_IO_CRYPTO_SET_CONFIGURATION
 
	mSëC⁄figuøti⁄
;

515 
EFI_BLOCK_IO_CRYPTO_GET_CONFIGURATION
 
	mGëC⁄figuøti⁄
;

516 
EFI_BLOCK_IO_CRYPTO_READ_EXTENDED
 
	mRódExãnded
;

517 
EFI_BLOCK_IO_CRYPTO_WRITE_EXTENDED
 
	mWrôeExãnded
;

518 
EFI_BLOCK_IO_CRYPTO_FLUSH
 
	mFlushBlocks
;

521 
EFI_GUID
 
gEfiBlockIoCry±oPrŸocﬁGuid
;

	@BluetoothAttribute.h

14 #i‚de‡
__EFI_BLUETOOTH_ATTRIBUTE_H__


15 
	#__EFI_BLUETOOTH_ATTRIBUTE_H__


	)

17 
	#EFI_BLUETOOTH_ATTRIBUTE_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

22 
	#EFI_BLUETOOTH_ATTRIBUTE_PROTOCOL_GUID
 \

	)

27 
_EFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
;

29 #¥agm®
∑ck
(1)

35 
UINT8
 
	mLígth
;

37 
UINT16
 
	mUuid16
;

38 
UINT32
 
	mUuid32
;

39 
UINT8
 
	mUuid128
[16];

40 } 
	mD©a
;

41 } 
	tEFI_BLUETOOTH_UUID
;

44 
	#UUID_16BIT_TYPE_LEN
 2

	)

45 
	#UUID_32BIT_TYPE_LEN
 4

	)

46 
	#UUID_128BIT_TYPE_LEN
 16

	)

48 
	#BLUETOOTH_IS_ATTRIBUTE_OF_TYPE
(
a
,
t
Ë(◊)->
Ty≥
.
Lígth
 =
UUID_16BIT_TYPE_LEN
 && (a)->Ty≥.
D©a
.
Uuid16
 =—))

	)

55 
UINT16
 
	mRódabÀ
 : 1;

56 
UINT16
 
	mRódEn¸y±i⁄
 : 1;

57 
UINT16
 
	mRódAuthítiˇti⁄
 : 1;

58 
UINT16
 
	mRódAuth‹iz©i⁄
 : 1;

59 
UINT16
 
	mRódKeySize
 : 5;

60 
UINT16
 
	mRe£rved1
 : 7;

61 
UINT16
 
	mWrôóbÀ
 : 1;

62 
UINT16
 
	mWrôeEn¸y±i⁄
 : 1;

63 
UINT16
 
	mWrôeAuthítiˇti⁄
 : 1;

64 
UINT16
 
	mWrôeAuth‹iz©i⁄
 : 1;

65 
UINT16
 
	mWrôeKeySize
 : 5;

66 
UINT16
 
	mRe£rved2
 : 7;

67 } 
	mPîmissi⁄
;

68 
UINT32
 
	mD©a32
;

69 } 
	tEFI_BLUETOOTH_ATTRIBUTE_PERMISSION
;

72 
EFI_BLUETOOTH_UUID
 
	mTy≥
;

73 
UINT16
 
	mLígth
;

74 
UINT16
 
	mAâribuãH™dÀ
;

75 
EFI_BLUETOOTH_ATTRIBUTE_PERMISSION
 
	mAâribuãPîmissi⁄
;

76 } 
	tEFI_BLUETOOTH_ATTRIBUTE_HEADER
;

79 
EFI_BLUETOOTH_ATTRIBUTE_HEADER
 
	mHódî
;

80 
UINT16
 
	mEndGroupH™dÀ
;

81 
EFI_BLUETOOTH_UUID
 
	mSîvi˚Uuid
;

82 } 
	tEFI_BLUETOOTH_GATT_PRIMARY_SERVICE_INFO
;

85 
EFI_BLUETOOTH_ATTRIBUTE_HEADER
 
	mHódî
;

86 
UINT16
 
	mSèπGroupH™dÀ
;

87 
UINT16
 
	mEndGroupH™dÀ
;

88 
EFI_BLUETOOTH_UUID
 
	mSîvi˚Uuid
;

89 } 
	tEFI_BLUETOOTH_GATT_INCLUDE_SERVICE_INFO
;

92 
EFI_BLUETOOTH_ATTRIBUTE_HEADER
 
	mHódî
;

93 
UINT8
 
	mCh¨a˘îi°icPr›îtõs
;

94 
UINT16
 
	mCh¨a˘îi°icVÆueH™dÀ
;

95 
EFI_BLUETOOTH_UUID
 
	mCh¨a˘îi°icUuid
;

96 } 
	tEFI_BLUETOOTH_GATT_CHARACTERISTIC_INFO
;

99 
EFI_BLUETOOTH_ATTRIBUTE_HEADER
 
	mHódî
;

100 
EFI_BLUETOOTH_UUID
 
	mCh¨a˘îi°icDes¸ùt‹Uuid
;

101 } 
	tEFI_BLUETOOTH_GATT_CHARACTERISTIC_DESCRIPTOR_INFO
;

103 #¥agm®
∑ck
()

106 
UINT16
 
	mAâribuãH™dÀ
;

107 } 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER_NOTIFICATION
;

110 
UINT16
 
	mAâribuãH™dÀ
;

111 } 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER_INDICATION
;

114 
UINT32
 
	mVîsi⁄
;

115 
UINT8
 
	mAâribuãOpCode
;

117 
EFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER_NOTIFICATION
 
	mNŸifiˇti⁄
;

118 
EFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER_INDICATION
 
	mIndiˇti⁄
;

119 } 
	mP¨amëî
;

120 } 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER
;

123 
UINT32
 
	mVîsi⁄
;

124 
BLUETOOTH_LE_ADDRESS
 
	mBD_ADDR
;

125 
BLUETOOTH_LE_ADDRESS
 
	mDúe˘Addªss
;

126 
UINT8
 
	mRSSI
;

127 
UINTN
 
	mAdvîti£mítD©aSize
;

128 
VOID
 *
	mAdvîti£mítD©a
;

129 } 
	tEFI_BLUETOOTH_LE_DEVICE_INFO
;

145 
	gEFI_STATUS


146 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_FUNCTION
) (

147 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 *
	tThis
,

148 
	tIN
 
	tVOID
 *
	tD©a
,

149 
	tIN
 
	tUINTN
 
	tD©aLígth
,

150 
	tIN
 
	tVOID
 *
	tC⁄ãxt


179 
	gEFI_STATUS


180 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_ATTRIBUTE_SEND_REQUEST
) (

181 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 *
	tThis
,

182 
	tIN
 
	tVOID
 *
	tD©a
,

183 
	tIN
 
	tUINTN
 
	tD©aLígth
,

184 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_FUNCTION
 
	tCÆlback
,

185 
	tIN
 
	tVOID
 *
	tC⁄ãxt


210 
	gEFI_STATUS


211 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_ATTRIBUTE_REGISTER_FOR_SERVER_NOTIFICATION
)(

212 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 *
	tThis
,

213 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_PARAMETER
 *
	tCÆlbackP¨amëî
,

214 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_CALLBACK_FUNCTION
 
	tCÆlback
,

215 
	tIN
 
	tVOID
 *
	tC⁄ãxt


233 
	gEFI_STATUS


234 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_ATTRIBUTE_GET_SERVICE_INFO
)(

235 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 *
	tThis
,

236 
	tOUT
 
	tUINTN
 *
	tSîvi˚InfoSize
,

237 
	tOUT
 
	tVOID
 **
	tSîvi˚Info


258 
	gEFI_STATUS


259 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_ATTRIBUTE_GET_DEVICE_INFO
)(

260 
	tIN
 
	tEFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 *
	tThis
,

261 
	tOUT
 
	tUINTN
 *
	tDevi˚InfoSize
,

262 
	tOUT
 
	tVOID
 **
	tDevi˚Info


265 
	s_EFI_BLUETOOTH_ATTRIBUTE_PROTOCOL
 {

266 
EFI_BLUETOOTH_ATTRIBUTE_SEND_REQUEST
 
	mSídReque°
;

267 
EFI_BLUETOOTH_ATTRIBUTE_REGISTER_FOR_SERVER_NOTIFICATION
 
	mRegi°îF‹SîvîNŸifiˇti⁄
;

268 
EFI_BLUETOOTH_ATTRIBUTE_GET_SERVICE_INFO
 
	mGëSîvi˚Info
;

269 
EFI_BLUETOOTH_ATTRIBUTE_GET_DEVICE_INFO
 
	mGëDevi˚Info
;

273 
EFI_GUID
 
gEfiBluëoŸhAâribuãPrŸocﬁGuid
;

274 
EFI_GUID
 
gEfiBluëoŸhAâribuãSîvi˚BödögPrŸocﬁGuid
;

	@BluetoothConfig.h

13 #i‚de‡
__EFI_BLUETOOTH_CONFIG_PROTOCOL_H__


14 
	#__EFI_BLUETOOTH_CONFIG_PROTOCOL_H__


	)

16 
	~<Indu°rySènd¨d/BluëoŸh.h
>

18 
	#EFI_BLUETOOTH_CONFIG_PROTOCOL_GUID
 \

	)

23 
_EFI_BLUETOOTH_CONFIG_PROTOCOL
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
;

25 
UINT32
 
	tEFI_BLUETOOTH_CONFIG_REMOTE_DEVICE_STATE_TYPE
;

26 
	#EFI_BLUETOOTH_CONFIG_REMOTE_DEVICE_STATE_CONNECTED
 0x1

	)

27 
	#EFI_BLUETOOTH_CONFIG_REMOTE_DEVICE_STATE_PAIRED
 0x2

	)

36 
BLUETOOTH_ADDRESS
 
	mBDAddr
;

40 
UINT8
 
	mRemŸeDevi˚Sèã
;

44 
BLUETOOTH_CLASS_OF_DEVICE
 
	mCœssOfDevi˚
;

48 
UINT8
 
	mRemŸeDevi˚Name
[
BLUETOOTH_HCI_COMMAND_LOCAL_READABLE_NAME_MAX_SIZE
];

49 } 
	tEFI_BLUETOOTH_SCAN_CALLBACK_INFORMATION
;

58 
	mEfiBluëoŸhC⁄figD©aTy≥Devi˚Name
,

62 
	mEfiBluëoŸhC⁄figD©aTy≥CœssOfDevi˚
,

66 
	mEfiBluëoŸhC⁄figD©aTy≥RemŸeDevi˚Sèã
,

70 
	mEfiBluëoŸhC⁄figD©aTy≥SdpInfo
,

74 
	mEfiBluëoŸhC⁄figD©aTy≥BDADDR
,

78 
	mEfiBluëoŸhC⁄figD©aTy≥DiscovîabÀ
,

82 
	mEfiBluëoŸhC⁄figD©aTy≥C⁄åﬁÀrSt‹edPaúedDevi˚Li°
,

86 
	mEfiBluëoŸhC⁄figD©aTy≥AvaûabÀDevi˚Li°
,

87 
	mEfiBluëoŸhC⁄figD©aTy≥R™domAddªss
,

88 
	mEfiBluëoŸhC⁄figD©aTy≥RSSI
,

92 
	mEfiBluëoŸhC⁄figD©aTy≥Advîti£mítD©a
,

93 
	mEfiBluëoŸhC⁄figD©aTy≥IoC≠abûôy
,

94 
	mEfiBluëoŸhC⁄figD©aTy≥OOBD©aFœg
,

100 
	mEfiBluëoŸhC⁄figD©aTy≥KeyTy≥
,

101 
	mEfiBluëoŸhC⁄figD©aTy≥EncKeySize
,

102 
	mEfiBluëoŸhC⁄figD©aTy≥Max
,

103 } 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
;

113 
	mEfiBluëoŸhCÆlbackTy≥U£rPasskeyNŸifiˇti⁄
,

118 
	mEfiBluëoŸhCÆlbackTy≥U£rC⁄fúm©i⁄Reque°
,

122 
	mEfiBluëoŸhCÆlbackTy≥OOBD©aReque°
,

127 
	mEfiBluëoŸhCÆlbackTy≥PöCodeReque°
,

128 
	mEfiBluëoŸhCÆlbackTy≥Max


129 } 
	tEFI_BLUETOOTH_PIN_CALLBACK_TYPE
;

139 
	mEfiBluëoŸhC⁄nCÆlbackTy≥Disc⁄√˘ed
,

144 
	mEfiBluëoŸhC⁄nCÆlbackTy≥C⁄√˘ed
,

149 
	mEfiBluëoŸhC⁄nCÆlbackTy≥Authítiˇãd
,

154 
	mEfiBluëoŸhC⁄nCÆlbackTy≥En¸y±ed


155 } 
	tEFI_BLUETOOTH_CONNECT_COMPLETE_CALLBACK_TYPE
;

169 
	gEFI_STATUS


170 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_INIT
)(

171 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis


185 
	gEFI_STATUS


186 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_SCAN_CALLBACK_FUNCTION
) (

187 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

188 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

189 
	tIN
 
	tEFI_BLUETOOTH_SCAN_CALLBACK_INFORMATION
 *
	tCÆlbackInfo


209 
	gEFI_STATUS


210 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_SCAN
)(

211 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

212 
	tIN
 
	tBOOLEAN
 
	tReSˇn
,

213 
	tIN
 
	tUINT8
 
	tSˇnTy≥
,

214 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_SCAN_CALLBACK_FUNCTION
 
	tCÆlback
,

215 
	tIN
 
	tVOID
 *
	tC⁄ãxt


231 
	gEFI_STATUS


232 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_CONNECT
)(

233 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

234 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBD_ADDR


251 
	gEFI_STATUS


252 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_DISCONNECT
)(

253 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

254 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBD_ADDR
,

255 
	tIN
 
	tUINT8
 
	tRós⁄


278 
	gEFI_STATUS


279 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_GET_DATA
)(

280 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

281 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

282 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

283 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a


303 
	gEFI_STATUS


304 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_SET_DATA
)(

305 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

306 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

307 
	tIN
 
	tUINTN
 
	tD©aSize
,

308 
	tIN
 
	tVOID
 *
	tD©a


332 
	gEFI_STATUS


333 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_GET_REMOTE_DATA
)(

334 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

335 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

336 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBDAddr
,

337 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

338 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a


357 
	gEFI_STATUS


358 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_PIN_CALLBACK_FUNCTION
)(

359 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

360 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

361 
	tIN
 
	tEFI_BLUETOOTH_PIN_CALLBACK_TYPE
 
	tCÆlbackTy≥
,

362 
	tIN
 
	tVOID
 *
	tI≈utBuf„r
,

363 
	tIN
 
	tUINTN
 
	tI≈utBuf„rSize
,

364 
	tOUT
 
	tVOID
 **
	tOuçutBuf„r
,

365 
	tOUT
 
	tUINTN
 *
	tOuçutBuf„rSize


379 
	gEFI_STATUS


380 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_PIN_CALLBACK
)(

381 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

382 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_REGISTER_PIN_CALLBACK_FUNCTION
 
	tCÆlback
,

383 
	tIN
 
	tVOID
 *
	tC⁄ãxt


398 
	gEFI_STATUS


399 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_GET_LINK_KEY_CALLBACK_FUNCTION
)(

400 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

401 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

402 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBDAddr
,

403 
	tOUT
 
	tUINT8
 
	tLökKey
[
BLUETOOTH_HCI_LINK_KEY_SIZE
]

417 
	gEFI_STATUS


418 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_GET_LINK_KEY_CALLBACK
)(

419 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

420 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_REGISTER_GET_LINK_KEY_CALLBACK_FUNCTION
 
	tCÆlback
,

421 
	tIN
 
	tVOID
 *
	tC⁄ãxt


436 
	gEFI_STATUS


437 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_SET_LINK_KEY_CALLBACK_FUNCTION
)(

438 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

439 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

440 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBDAddr
,

441 
	tIN
 
	tUINT8
 
	tLökKey
[
BLUETOOTH_HCI_LINK_KEY_SIZE
]

455 
	gEFI_STATUS


456 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_SET_LINK_KEY_CALLBACK
)(

457 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

458 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_REGISTER_SET_LINK_KEY_CALLBACK_FUNCTION
 
	tCÆlback
,

459 
	tIN
 
	tVOID
 *
	tC⁄ãxt


476 
	gEFI_STATUS


477 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK_FUNCTION
)(

478 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

479 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

480 
	tIN
 
	tEFI_BLUETOOTH_CONNECT_COMPLETE_CALLBACK_TYPE
 
	tCÆlbackTy≥
,

481 
	tIN
 
	tBLUETOOTH_ADDRESS
 *
	tBDAddr
,

482 
	tIN
 
	tVOID
 *
	tI≈utBuf„r
,

483 
	tIN
 
	tUINTN
 
	tI≈utBuf„rSize


497 
	gEFI_STATUS


498 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK
)(

499 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_PROTOCOL
 *
	tThis
,

500 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK_FUNCTION
 
	tCÆlback
,

501 
	tIN
 
	tVOID
 *
	tC⁄ãxt


507 
	s_EFI_BLUETOOTH_CONFIG_PROTOCOL
 {

508 
EFI_BLUETOOTH_CONFIG_INIT
 
	mInô
;

509 
EFI_BLUETOOTH_CONFIG_SCAN
 
	mSˇn
;

510 
EFI_BLUETOOTH_CONFIG_CONNECT
 
	mC⁄√˘
;

511 
EFI_BLUETOOTH_CONFIG_DISCONNECT
 
	mDisc⁄√˘
;

512 
EFI_BLUETOOTH_CONFIG_GET_DATA
 
	mGëD©a
;

513 
EFI_BLUETOOTH_CONFIG_SET_DATA
 
	mSëD©a
;

514 
EFI_BLUETOOTH_CONFIG_GET_REMOTE_DATA
 
	mGëRemŸeD©a
;

515 
EFI_BLUETOOTH_CONFIG_REGISTER_PIN_CALLBACK
 
	mRegi°îPöCÆlback
;

516 
EFI_BLUETOOTH_CONFIG_REGISTER_GET_LINK_KEY_CALLBACK
 
	mRegi°îGëLökKeyCÆlback
;

517 
EFI_BLUETOOTH_CONFIG_REGISTER_SET_LINK_KEY_CALLBACK
 
	mRegi°îSëLökKeyCÆlback
;

518 
EFI_BLUETOOTH_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK
 
	mRegi°îLökC⁄√˘Com∂ëeCÆlback
;

521 
EFI_GUID
 
gEfiBluëoŸhC⁄figPrŸocﬁGuid
;

	@BluetoothHc.h

13 #i‚de‡
__EFI_BLUETOOTH_HC_PROTOCOL_H__


14 
	#__EFI_BLUETOOTH_HC_PROTOCOL_H__


	)

16 
	#EFI_BLUETOOTH_HC_PROTOCOL_GUID
 \

	)

21 
_EFI_BLUETOOTH_HC_PROTOCOL
 
	tEFI_BLUETOOTH_HC_PROTOCOL
;

55 
	gEFI_STATUS


56 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_SEND_COMMAND
)(

57 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

58 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

59 
	tIN
 
	tVOID
 *
	tBuf„r
,

60 
	tIN
 
	tUINTN
 
	tTimeout


91 
	gEFI_STATUS


92 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_RECEIVE_EVENT
)(

93 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

94 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

95 
	tOUT
 
	tVOID
 *
	tBuf„r
,

96 
	tIN
 
	tUINTN
 
	tTimeout


112 
	gEFI_STATUS


113 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
) (

114 
	tIN
 
	tVOID
 *
	tD©a
,

115 
	tIN
 
	tUINTN
 
	tD©aLígth
,

116 
	tIN
 
	tVOID
 *
	tC⁄ãxt


144 
	gEFI_STATUS


145 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_ASYNC_RECEIVE_EVENT
) (

146 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

147 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

148 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
,

149 
	tIN
 
	tUINTN
 
	tD©aLígth
,

150 
	tIN
 
	tEFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
 
	tCÆlback
,

151 
	tIN
 
	tVOID
 *
	tC⁄ãxt


188 
	gEFI_STATUS


189 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_SEND_ACL_DATA
)(

190 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

191 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

192 
	tIN
 
	tVOID
 *
	tBuf„r
,

193 
	tIN
 
	tUINTN
 
	tTimeout


224 
	gEFI_STATUS


225 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_RECEIVE_ACL_DATA
)(

226 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

227 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

228 
	tOUT
 
	tVOID
 *
	tBuf„r
,

229 
	tIN
 
	tUINTN
 
	tTimeout


257 
	gEFI_STATUS


258 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_ASYNC_RECEIVE_ACL_DATA
) (

259 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

260 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

261 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
,

262 
	tIN
 
	tUINTN
 
	tD©aLígth
,

263 
	tIN
 
	tEFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
 
	tCÆlback
,

264 
	tIN
 
	tVOID
 *
	tC⁄ãxt


295 
	gEFI_STATUS


296 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_SEND_SCO_DATA
)(

297 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

298 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

299 
	tIN
 
	tVOID
 *
	tBuf„r
,

300 
	tIN
 
	tUINTN
 
	tTimeout


330 
	gEFI_STATUS


331 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_RECEIVE_SCO_DATA
)(

332 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

333 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

334 
	tOUT
 
	tVOID
 *
	tBuf„r
,

335 
	tIN
 
	tUINTN
 
	tTimeout


363 
	gEFI_STATUS


364 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_HC_ASYNC_RECEIVE_SCO_DATA
) (

365 
	tIN
 
	tEFI_BLUETOOTH_HC_PROTOCOL
 *
	tThis
,

366 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

367 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
,

368 
	tIN
 
	tUINTN
 
	tD©aLígth
,

369 
	tIN
 
	tEFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
 
	tCÆlback
,

370 
	tIN
 
	tVOID
 *
	tC⁄ãxt


376 
	s_EFI_BLUETOOTH_HC_PROTOCOL
 {

380 
EFI_BLUETOOTH_HC_SEND_COMMAND
 
	mSídComm™d
;

384 
EFI_BLUETOOTH_HC_RECEIVE_EVENT
 
	mRe˚iveEvít
;

388 
EFI_BLUETOOTH_HC_ASYNC_RECEIVE_EVENT
 
	mAsyncRe˚iveEvít
;

392 
EFI_BLUETOOTH_HC_SEND_ACL_DATA
 
	mSídACLD©a
;

396 
EFI_BLUETOOTH_HC_RECEIVE_ACL_DATA
 
	mRe˚iveACLD©a
;

400 
EFI_BLUETOOTH_HC_ASYNC_RECEIVE_ACL_DATA
 
	mAsyncRe˚iveACLD©a
;

404 
EFI_BLUETOOTH_HC_SEND_SCO_DATA
 
	mSídSCOD©a
;

408 
EFI_BLUETOOTH_HC_RECEIVE_SCO_DATA
 
	mRe˚iveSCOD©a
;

412 
EFI_BLUETOOTH_HC_ASYNC_RECEIVE_SCO_DATA
 
	mAsyncRe˚iveSCOD©a
;

415 
EFI_GUID
 
gEfiBluëoŸhHcPrŸocﬁGuid
;

	@BluetoothIo.h

15 #i‚de‡
__EFI_BLUETOOTH_IO_PROTOCOL_H__


16 
	#__EFI_BLUETOOTH_IO_PROTOCOL_H__


	)

18 
	~<Indu°rySènd¨d/BluëoŸh.h
>

20 
	#EFI_BLUETOOTH_IO_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

25 
	#EFI_BLUETOOTH_IO_PROTOCOL_GUID
 \

	)

30 
_EFI_BLUETOOTH_IO_PROTOCOL
 
	tEFI_BLUETOOTH_IO_PROTOCOL
;

39 
UINT32
 
	mVîsi⁄
;

43 
BLUETOOTH_ADDRESS
 
	mBD_ADDR
;

47 
UINT8
 
	mPageSˇnRïëôi⁄Mode
;

51 
BLUETOOTH_CLASS_OF_DEVICE
 
	mCœssOfDevi˚
;

55 
UINT16
 
	mClockOff£t
;

59 
UINT8
 
	mRSSI
;

63 
UINT8
 
	mExãndedInquúyRe•⁄£
[240];

64 } 
	tEFI_BLUETOOTH_DEVICE_INFO
;

78 
	gEFI_STATUS


79 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_GET_DEVICE_INFO
)(

80 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

81 
	tOUT
 
	tUINTN
 *
	tDevi˚InfoSize
,

82 
	tOUT
 
	tVOID
 **
	tDevi˚Info


97 
	gEFI_STATUS


98 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_GET_SDP_INFO
)(

99 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

100 
	tOUT
 
	tUINTN
 *
	tSdpInfoSize
,

101 
	tOUT
 
	tVOID
 **
	tSdpInfo


125 
	gEFI_STATUS


126 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_RAW_SEND
)(

127 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

128 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

129 
	tIN
 
	tVOID
 *
	tBuf„r
,

130 
	tIN
 
	tUINTN
 
	tTimeout


154 
	gEFI_STATUS


155 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_RAW_RECEIVE
)(

156 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

157 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

158 
	tOUT
 
	tVOID
 *
	tBuf„r
,

159 
	tIN
 
	tUINTN
 
	tTimeout


174 
	gEFI_STATUS


175 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_ASYNC_FUNC_CALLBACK
) (

176 
	tIN
 
	tUINT16
 
	tCh™√lID
,

177 
	tIN
 
	tVOID
 *
	tD©a
,

178 
	tIN
 
	tUINTN
 
	tD©aLígth
,

179 
	tIN
 
	tVOID
 *
	tC⁄ãxt


200 
	gEFI_STATUS


201 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_RAW_ASYNC_RECEIVE
)(

202 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

203 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

204 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
,

205 
	tIN
 
	tUINTN
 
	tD©aLígth
,

206 
	tIN
 
	tEFI_BLUETOOTH_IO_ASYNC_FUNC_CALLBACK
 
	tCÆlback
,

207 
	tIN
 
	tVOID
 *
	tC⁄ãxt


233 
	gEFI_STATUS


234 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_SEND
)(

235 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

236 
	tIN
 
	tEFI_HANDLE
 
	tH™dÀ
,

237 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

238 
	tIN
 
	tVOID
 *
	tBuf„r
,

239 
	tIN
 
	tUINTN
 
	tTimeout


264 
	gEFI_STATUS


265 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_RECEIVE
)(

266 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

267 
	tIN
 
	tEFI_HANDLE
 
	tH™dÀ
,

268 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

269 
	tOUT
 
	tVOID
 **
	tBuf„r
,

270 
	tIN
 
	tUINTN
 
	tTimeout


284 
	gEFI_STATUS


285 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_CHANNEL_SERVICE_CALLBACK
) (

286 
	tIN
 
	tVOID
 *
	tD©a
,

287 
	tIN
 
	tUINTN
 
	tD©aLígth
,

288 
	tIN
 
	tVOID
 *
	tC⁄ãxt


309 
	gEFI_STATUS


310 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_ASYNC_RECEIVE
)(

311 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

312 
	tIN
 
	tEFI_HANDLE
 
	tH™dÀ
,

313 
	tIN
 
	tEFI_BLUETOOTH_IO_CHANNEL_SERVICE_CALLBACK
 
	tCÆlback
,

314 
	tIN
 
	tVOID
* 
	tC⁄ãxt


335 
	gEFI_STATUS


336 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_CONNECT
)(

337 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

338 
	tOUT
 
	tEFI_HANDLE
 *
	tH™dÀ
,

339 
	tIN
 
	tUINT16
 
	tPsm
,

340 
	tIN
 
	tUINT16
 
	tMtu
,

341 
	tIN
 
	tEFI_BLUETOOTH_IO_CHANNEL_SERVICE_CALLBACK
 
	tCÆlback
,

342 
	tIN
 
	tVOID
 *
	tC⁄ãxt


357 
	gEFI_STATUS


358 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_DISCONNECT
)(

359 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

360 
	tIN
 
	tEFI_HANDLE
 
	tH™dÀ


380 
	gEFI_STATUS


381 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_IO_L2CAP_REGISTER_SERVICE
)(

382 
	tIN
 
	tEFI_BLUETOOTH_IO_PROTOCOL
 *
	tThis
,

383 
	tOUT
 
	tEFI_HANDLE
 *
	tH™dÀ
,

384 
	tIN
 
	tUINT16
 
	tPsm
,

385 
	tIN
 
	tUINT16
 
	tMtu
,

386 
	tIN
 
	tEFI_BLUETOOTH_IO_CHANNEL_SERVICE_CALLBACK
 
	tCÆlback
,

387 
	tIN
 
	tVOID
 *
	tC⁄ãxt


394 
	s_EFI_BLUETOOTH_IO_PROTOCOL
 {

395 
EFI_BLUETOOTH_IO_GET_DEVICE_INFO
 
	mGëDevi˚Info
;

396 
EFI_BLUETOOTH_IO_GET_SDP_INFO
 
	mGëSdpInfo
;

397 
EFI_BLUETOOTH_IO_L2CAP_RAW_SEND
 
	mL2C≠RawSíd
;

398 
EFI_BLUETOOTH_IO_L2CAP_RAW_RECEIVE
 
	mL2C≠RawRe˚ive
;

399 
EFI_BLUETOOTH_IO_L2CAP_RAW_ASYNC_RECEIVE
 
	mL2C≠RawAsyncRe˚ive
;

400 
EFI_BLUETOOTH_IO_L2CAP_SEND
 
	mL2C≠Síd
;

401 
EFI_BLUETOOTH_IO_L2CAP_RECEIVE
 
	mL2C≠Re˚ive
;

402 
EFI_BLUETOOTH_IO_L2CAP_ASYNC_RECEIVE
 
	mL2C≠AsyncRe˚ive
;

403 
EFI_BLUETOOTH_IO_L2CAP_CONNECT
 
	mL2C≠C⁄√˘
;

404 
EFI_BLUETOOTH_IO_L2CAP_DISCONNECT
 
	mL2C≠Disc⁄√˘
;

405 
EFI_BLUETOOTH_IO_L2CAP_REGISTER_SERVICE
 
	mL2C≠Regi°îSîvi˚
;

408 
EFI_GUID
 
gEfiBluëoŸhIoSîvi˚BödögPrŸocﬁGuid
;

409 
EFI_GUID
 
gEfiBluëoŸhIoPrŸocﬁGuid
;

	@BluetoothLeConfig.h

13 #i‚de‡
__EFI_BLUETOOTH_LE_CONFIG_H__


14 
	#__EFI_BLUETOOTH_LE_CONFIG_H__


	)

16 
	~<PrŸocﬁ/BluëoŸhC⁄fig.h
>

17 
	~<PrŸocﬁ/BluëoŸhAâribuã.h
>

19 
	#EFI_BLUETOOTH_LE_CONFIG_PROTOCOL_GUID
 \

	)

24 
_EFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
;

39 
	gEFI_STATUS


40 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_INIT
)(

41 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis


50 
UINT32
 
	mVîsi⁄
;

54 
UINT8
 
	mSˇnTy≥
;

58 
UINT16
 
	mSˇnI¡îvÆ
;

62 
UINT16
 
	mSˇnWödow
;

66 
UINT8
 
	mSˇ¬ögFûãrPﬁicy
;

72 
UINT8
 
	mAdvîti£mítFœgFûãr
;

73 } 
	tEFI_BLUETOOTH_LE_CONFIG_SCAN_PARAMETER
;

76 
BLUETOOTH_LE_ADDRESS
 
	mBDAddr
;

77 
BLUETOOTH_LE_ADDRESS
 
	mDúe˘Addªss
;

78 
UINT8
 
	mRemŸeDevi˚Sèã
;

79 
INT8
 
	mRSSI
;

80 
UINTN
 
	mAdvîti£mítD©aSize
;

81 
VOID
 *
	mAdvîti£mítD©a
;

82 } 
	tEFI_BLUETOOTH_LE_SCAN_CALLBACK_INFORMATION
;

95 
	gEFI_STATUS


96 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_SCAN_CALLBACK_FUNCTION
) (

97 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

98 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

99 
	tIN
 
	tEFI_BLUETOOTH_LE_SCAN_CALLBACK_INFORMATION
 *
	tCÆlbackInfo


126 
	gEFI_STATUS


127 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_SCAN
)(

128 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

129 
	tIN
 
	tBOOLEAN
 
	tReSˇn
,

130 
	tIN
 
	tUINT32
 
	tTimeout
,

131 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_SCAN_PARAMETER
 *
	tSˇnP¨amëî
, 
	tOPTIONAL


132 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_SCAN_CALLBACK_FUNCTION
 
	tCÆlback
,

133 
	tIN
 
	tVOID
 *
	tC⁄ãxt


144 
UINT32
 
	mVîsi⁄
;

148 
UINT16
 
	mSˇnI¡îvÆ
;

152 
UINT16
 
	mSˇnWödow
;

156 
UINT16
 
	mC⁄nI¡îvÆMö
;

160 
UINT16
 
	mC⁄nI¡îvÆMax
;

164 
UINT16
 
	mC⁄nL©ícy
;

168 
UINT16
 
	mSu≥rvisi⁄Timeout
;

169 } 
	tEFI_BLUETOOTH_LE_CONFIG_CONNECT_PARAMETER
;

195 
	gEFI_STATUS


196 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_CONNECT
)(

197 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

198 
	tIN
 
	tBOOLEAN
 
	tAutoRec⁄√˘
,

199 
	tIN
 
	tBOOLEAN
 
	tDoB⁄dög
,

200 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_CONNECT_PARAMETER
 *
	tC⁄√˘P¨amëî
, 
	tOPTIONAL


201 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBD_ADDR


222 
	gEFI_STATUS


223 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_DISCONNECT
)(

224 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

225 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBD_ADDR
,

226 
	tIN
 
	tUINT8
 
	tRós⁄


252 
	gEFI_STATUS


253 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_GET_DATA
) (

254 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

255 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

256 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

257 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
 
	tOPTIONAL


280 
	gEFI_STATUS


281 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_SET_DATA
) (

282 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

283 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

284 
	tIN
 
	tUINTN
 
	tD©aSize
,

285 
	tIN
 
	tVOID
 *
	tD©a


311 
	gEFI_STATUS


312 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_GET_REMOTE_DATA
) (

313 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

314 
	tIN
 
	tEFI_BLUETOOTH_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

315 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

316 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

317 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a


326 
	mEfiBluëoŸhSmpAuth‹iz©i⁄Reque°Evít
,

333 
	mEfiBluëoŸhSmpPasskeyRódyEvít
,

339 
	mEfiBluëoŸhSmpPasskeyReque°Evít
,

345 
	mEfiBluëoŸhSmpOOBD©aReque°Evít
,

353 
	mEfiBluëoŸhSmpNumîicCom∑ris⁄Evít
,

354 } 
	tEFI_BLUETOOTH_LE_SMP_EVENT_DATA_TYPE
;

371 
	gEFI_STATUS


372 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_SMP_CALLBACK
) (

373 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

374 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

375 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

376 
	tIN
 
	tEFI_BLUETOOTH_LE_SMP_EVENT_DATA_TYPE
 
	tEvítD©aTy≥
,

377 
	tIN
 
	tUINTN
 
	tD©aSize
,

378 
	tIN
 
	tVOID
 *
	tD©a


399 
	gEFI_STATUS


400 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_REGISTER_SMP_AUTH_CALLBACK
) (

401 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

402 
	tIN
 
	tEFI_BLUETOOTH_LE_SMP_CALLBACK
 
	tCÆlback
,

403 
	tIN
 
	tVOID
 *
	tC⁄ãxt


425 
	gEFI_STATUS


426 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_SEND_SMP_AUTH_DATA
) (

427 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

428 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

429 
	tIN
 
	tEFI_BLUETOOTH_LE_SMP_EVENT_DATA_TYPE
 
	tEvítD©aTy≥
,

430 
	tIN
 
	tUINTN
 
	tD©aSize
,

431 
	tIN
 
	tVOID
 *
	tD©a


436 
	mEfiBluëoŸhSmpLoˇlIR
,

437 
	mEfiBluëoŸhSmpLoˇlER
,

438 
	mEfiBluëoŸhSmpLoˇlDHK
,

440 
	mEfiBluëoŸhSmpKeysDi°ribuãd
 = 0x1000,

441 
	mEfiBluëoŸhSmpKeySize
,

442 
	mEfiBluëoŸhSmpKeyTy≥
,

443 
	mEfiBluëoŸhSmpPìrLTK
,

444 
	mEfiBluëoŸhSmpPìrIRK
,

445 
	mEfiBluëoŸhSmpPìrCSRK
,

446 
	mEfiBluëoŸhSmpPìrR™d
,

447 
	mEfiBluëoŸhSmpPìrEDIV
,

448 
	mEfiBluëoŸhSmpPìrSignCou¡î
,

449 
	mEfiBluëoŸhSmpLoˇlLTK
,

450 
	mEfiBluëoŸhSmpLoˇlIRK
,

451 
	mEfiBluëoŸhSmpLoˇlCSRK
,

452 
	mEfiBluëoŸhSmpLoˇlSignCou¡î
,

453 
	mEfiBluëoŸhSmpLoˇlDIV
,

454 
	mEfiBluëoŸhSmpPìrAddªssLi°
,

455 
	mEfiBluëoŸhSmpMax
,

456 } 
	tEFI_BLUETOOTH_LE_SMP_DATA_TYPE
;

475 
	gEFI_STATUS


476 (
	tEFIAPI
 * 
	tEFI_BLUETOOTH_LE_CONFIG_SMP_GET_DATA_CALLBACK
) (

477 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

478 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

479 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

480 
	tIN
 
	tEFI_BLUETOOTH_LE_SMP_DATA_TYPE
 
	tD©aTy≥
,

481 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

482 
	tOUT
 
	tVOID
 *
	tD©a


501 
	gEFI_STATUS


502 (
	tEFIAPI
 * 
	tEFI_BLUETOOTH_LE_CONFIG_REGISTER_SMP_GET_DATA_CALLBACK
) (

503 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

504 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_SMP_GET_DATA_CALLBACK
 
	tCÆlback
,

505 
	tIN
 
	tVOID
 *
	tC⁄ãxt


523 
	gEFI_STATUS


524 (
	tEFIAPI
 * 
	tEFI_BLUETOOTH_LE_CONFIG_SMP_SET_DATA_CALLBACK
) (

525 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

526 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

527 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

528 
	tIN
 
	tEFI_BLUETOOTH_LE_SMP_DATA_TYPE
 
	tTy≥
,

529 
	tIN
 
	tUINTN
 
	tD©aSize
,

530 
	tIN
 
	tVOID
 *
	tD©a


549 
	gEFI_STATUS


550 (
	tEFIAPI
 * 
	tEFI_BLUETOOTH_LE_CONFIG_REGISTER_SMP_SET_DATA_CALLBACK
) (

551 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

552 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_SMP_SET_DATA_CALLBACK
 
	tCÆlback
,

553 
	tIN
 
	tVOID
 *
	tC⁄ãxt


571 
	gEFI_STATUS


572 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_CONNECT_COMPLETE_CALLBACK
) (

573 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

574 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

575 
	tIN
 
	tEFI_BLUETOOTH_CONNECT_COMPLETE_CALLBACK_TYPE
 
	tCÆlbackTy≥
,

576 
	tIN
 
	tBLUETOOTH_LE_ADDRESS
 *
	tBDAddr
,

577 
	tIN
 
	tVOID
 *
	tI≈utBuf„r
,

578 
	tIN
 
	tUINTN
 
	tI≈utBuf„rSize


602 
	gEFI_STATUS


603 (
	tEFIAPI
 *
	tEFI_BLUETOOTH_LE_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK
) (

604 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 *
	tThis
,

605 
	tIN
 
	tEFI_BLUETOOTH_LE_CONFIG_CONNECT_COMPLETE_CALLBACK
 
	tCÆlback
,

606 
	tIN
 
	tVOID
 *
	tC⁄ãxt


612 
	s_EFI_BLUETOOTH_LE_CONFIG_PROTOCOL
 {

613 
EFI_BLUETOOTH_LE_CONFIG_INIT
 
	mInô
;

614 
EFI_BLUETOOTH_LE_CONFIG_SCAN
 
	mSˇn
;

615 
EFI_BLUETOOTH_LE_CONFIG_CONNECT
 
	mC⁄√˘
;

616 
EFI_BLUETOOTH_LE_CONFIG_DISCONNECT
 
	mDisc⁄√˘
;

617 
EFI_BLUETOOTH_LE_CONFIG_GET_DATA
 
	mGëD©a
;

618 
EFI_BLUETOOTH_LE_CONFIG_SET_DATA
 
	mSëD©a
;

619 
EFI_BLUETOOTH_LE_CONFIG_GET_REMOTE_DATA
 
	mGëRemŸeD©a
;

620 
EFI_BLUETOOTH_LE_REGISTER_SMP_AUTH_CALLBACK
 
	mRegi°îSmpAuthCÆlback
;

621 
EFI_BLUETOOTH_LE_SEND_SMP_AUTH_DATA
 
	mSídSmpAuthD©a
;

622 
EFI_BLUETOOTH_LE_CONFIG_REGISTER_SMP_GET_DATA_CALLBACK
 
	mRegi°îSmpGëD©aCÆlback
;

623 
EFI_BLUETOOTH_LE_CONFIG_REGISTER_SMP_SET_DATA_CALLBACK
 
	mRegi°îSmpSëD©aCÆlback
;

624 
EFI_BLUETOOTH_LE_CONFIG_REGISTER_CONNECT_COMPLETE_CALLBACK
 
	mRegi°îLökC⁄√˘Com∂ëeCÆlback
;

627 
EFI_GUID
 
gEfiBluëoŸhLeC⁄figPrŸocﬁGuid
;

	@BootManagerPolicy.h

11 #i‚de‡
__BOOT_MANAGER_POLICY_H__


12 
	#__BOOT_MANAGER_POLICY_H__


	)

14 
	#EFI_BOOT_MANAGER_POLICY_PROTOCOL_GUID
 \

	)

19 
	#EFI_BOOT_MANAGER_POLICY_CONSOLE_GUID
 \

	)

24 
	#EFI_BOOT_MANAGER_POLICY_NETWORK_GUID
 \

	)

29 
	#EFI_BOOT_MANAGER_POLICY_CONNECT_ALL_GUID
 \

	)

34 
_EFI_BOOT_MANAGER_POLICY_PROTOCOL
 
	tEFI_BOOT_MANAGER_POLICY_PROTOCOL
;

36 
	#EFI_BOOT_MANAGER_POLICY_PROTOCOL_REVISION
 0x00010000

	)

63 
	gEFI_STATUS


64 (
	tEFIAPI
 *
	tEFI_BOOT_MANAGER_POLICY_CONNECT_DEVICE_PATH
)(

65 
	tIN
 
	tEFI_BOOT_MANAGER_POLICY_PROTOCOL
 *
	tThis
,

66 
	tIN
 
	tEFI_DEVICE_PATH
 *
	tDevi˚P©h
,

67 
	tIN
 
	tBOOLEAN
 
	tRecursive


114 
	gEFI_STATUS


115 (
	tEFIAPI
 *
	tEFI_BOOT_MANAGER_POLICY_CONNECT_DEVICE_CLASS
)(

116 
	tIN
 
	tEFI_BOOT_MANAGER_POLICY_PROTOCOL
 *
	tThis
,

117 
	tIN
 
	tEFI_GUID
 *
	tCœss


120 
	s_EFI_BOOT_MANAGER_POLICY_PROTOCOL
 {

121 
UINT64
 
	mRevisi⁄
;

122 
EFI_BOOT_MANAGER_POLICY_CONNECT_DEVICE_PATH
 
	mC⁄√˘Devi˚P©h
;

123 
EFI_BOOT_MANAGER_POLICY_CONNECT_DEVICE_CLASS
 
	mC⁄√˘Devi˚Cœss
;

126 
EFI_GUID
 
gEfiBoŸM™agîPﬁicyPrŸocﬁGuid
;

128 
EFI_GUID
 
gEfiBoŸM™agîPﬁicyC⁄sﬁeGuid
;

129 
EFI_GUID
 
gEfiBoŸM™agîPﬁicyNëw‹kGuid
;

130 
EFI_GUID
 
gEfiBoŸM™agîPﬁicyC⁄√˘AŒGuid
;

	@BusSpecificDriverOverride.h

14 #i‚de‡
_EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL_H_


15 
	#_EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL_H_


	)

20 
	#EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL_GUID
 \

	)

25 
_EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL
 
	tEFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL
;

49 
	gEFI_STATUS


50 (
	tEFIAPI
 *
	tEFI_BUS_SPECIFIC_DRIVER_OVERRIDE_GET_DRIVER
)(

51 
	tIN
 
	tEFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL
 *
	tThis
,

52 
	tIN
 
	tOUT
 
	tEFI_HANDLE
 *
	tDrivîImageH™dÀ


60 
	s_EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL
 {

61 
EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_GET_DRIVER
 
	mGëDrivî
;

64 
EFI_GUID
 
gEfiBusS≥cificDrivîOvîridePrŸocﬁGuid
;

	@Capsule.h

18 #i‚de‡
__ARCH_PROTOCOL_CAPSULE_ARCH_H__


19 
	#__ARCH_PROTOCOL_CAPSULE_ARCH_H__


	)

24 
	#EFI_CAPSULE_ARCH_PROTOCOL_GUID
 \

	)

27 
EFI_GUID
 
gEfiC≠suÀArchPrŸocﬁGuid
;

	@ComponentName.h

11 #i‚de‡
__EFI_COMPONENT_NAME_H__


12 
	#__EFI_COMPONENT_NAME_H__


	)

17 
	#EFI_COMPONENT_NAME_PROTOCOL_GUID
 \

	)

22 
_EFI_COMPONENT_NAME_PROTOCOL
 
	tEFI_COMPONENT_NAME_PROTOCOL
;

48 
	gEFI_STATUS


49 (
	tEFIAPI
 *
	tEFI_COMPONENT_NAME_GET_DRIVER_NAME
)(

50 
	tIN
 
	tEFI_COMPONENT_NAME_PROTOCOL
 *
	tThis
,

51 
	tIN
 
	tCHAR8
 *
	tL™guage
,

52 
	tOUT
 
	tCHAR16
 **
	tDrivîName


97 
	gEFI_STATUS


98 (
	tEFIAPI
 *
	tEFI_COMPONENT_NAME_GET_CONTROLLER_NAME
)(

99 
	tIN
 
	tEFI_COMPONENT_NAME_PROTOCOL
 *
	tThis
,

100 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

101 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

102 
	tIN
 
	tCHAR8
 *
	tL™guage
,

103 
	tOUT
 
	tCHAR16
 **
	tC⁄åﬁÀrName


110 
	s_EFI_COMPONENT_NAME_PROTOCOL
 {

111 
EFI_COMPONENT_NAME_GET_DRIVER_NAME
 
	mGëDrivîName
;

112 
EFI_COMPONENT_NAME_GET_CONTROLLER_NAME
 
	mGëC⁄åﬁÀrName
;

118 
CHAR8
 *
	mSuµ‹ãdL™guages
;

121 
EFI_GUID
 
gEfiComp⁄ítNamePrŸocﬁGuid
;

	@ComponentName2.h

11 #i‚de‡
__EFI_COMPONENT_NAME2_H__


12 
	#__EFI_COMPONENT_NAME2_H__


	)

17 
	#EFI_COMPONENT_NAME2_PROTOCOL_GUID
 \

	)

20 
_EFI_COMPONENT_NAME2_PROTOCOL
 
	tEFI_COMPONENT_NAME2_PROTOCOL
;

60 
	gEFI_STATUS


61 (
	tEFIAPI
 *
	tEFI_COMPONENT_NAME2_GET_DRIVER_NAME
)(

62 
	tIN
 
	tEFI_COMPONENT_NAME2_PROTOCOL
 *
	tThis
,

63 
	tIN
 
	tCHAR8
 *
	tL™guage
,

64 
	tOUT
 
	tCHAR16
 **
	tDrivîName


137 
	gEFI_STATUS


138 (
	tEFIAPI
 *
	tEFI_COMPONENT_NAME2_GET_CONTROLLER_NAME
)(

139 
	tIN
 
	tEFI_COMPONENT_NAME2_PROTOCOL
 *
	tThis
,

140 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

141 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

142 
	tIN
 
	tCHAR8
 *
	tL™guage
,

143 
	tOUT
 
	tCHAR16
 **
	tC⁄åﬁÀrName


150 
	s_EFI_COMPONENT_NAME2_PROTOCOL
 {

151 
EFI_COMPONENT_NAME2_GET_DRIVER_NAME
 
	mGëDrivîName
;

152 
EFI_COMPONENT_NAME2_GET_CONTROLLER_NAME
 
	mGëC⁄åﬁÀrName
;

161 
CHAR8
 *
	mSuµ‹ãdL™guages
;

164 
EFI_GUID
 
gEfiComp⁄ítName2PrŸocﬁGuid
;

	@Cpu.h

11 #i‚de‡
__ARCH_PROTOCOL_CPU_H__


12 
	#__ARCH_PROTOCOL_CPU_H__


	)

14 
	~<PrŸocﬁ/DebugSuµ‹t.h
>

16 
	#EFI_CPU_ARCH_PROTOCOL_GUID
 \

	)

19 
_EFI_CPU_ARCH_PROTOCOL
 
	tEFI_CPU_ARCH_PROTOCOL
;

25 
	mEfiCpuFlushTy≥WrôeBackInvÆid©e
,

26 
	mEfiCpuFlushTy≥WrôeBack
,

27 
	mEfiCpuFlushTy≥InvÆid©e
,

28 
	mEfiCpuMaxFlushTy≥


29 } 
	tEFI_CPU_FLUSH_TYPE
;

35 
	mEfiCpuInô
,

36 
	mEfiCpuMaxInôTy≥


37 } 
	tEFI_CPU_INIT_TYPE
;

51 
	gVOID


52 (
	tEFIAPI
 *
	tEFI_CPU_INTERRUPT_HANDLER
)(

53 
	tIN
 
	tCONST
 
	tEFI_EXCEPTION_TYPE
 
	tI¡îru±Ty≥
,

54 
	tIN
 
	tCONST
 
	tEFI_SYSTEM_CONTEXT
 
	tSy°emC⁄ãxt


85 
	gEFI_STATUS


86 (
	tEFIAPI
 *
	tEFI_CPU_FLUSH_DATA_CACHE
)(

87 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

88 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tSèπ
,

89 
	tIN
 
	tUINT64
 
	tLígth
,

90 
	tIN
 
	tEFI_CPU_FLUSH_TYPE
 
	tFlushTy≥


104 
	gEFI_STATUS


105 (
	tEFIAPI
 *
	tEFI_CPU_ENABLE_INTERRUPT
)(

106 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis


120 
	gEFI_STATUS


121 (
	tEFIAPI
 *
	tEFI_CPU_DISABLE_INTERRUPT
)(

122 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis


140 
	gEFI_STATUS


141 (
	tEFIAPI
 *
	tEFI_CPU_GET_INTERRUPT_STATE
)(

142 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

143 
	tOUT
 
	tBOOLEAN
 *
	tSèã


164 
	gEFI_STATUS


165 (
	tEFIAPI
 *
	tEFI_CPU_INIT
)(

166 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

167 
	tIN
 
	tEFI_CPU_INIT_TYPE
 
	tInôTy≥


193 
	gEFI_STATUS


194 (
	tEFIAPI
 *
	tEFI_CPU_REGISTER_INTERRUPT_HANDLER
)(

195 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

196 
	tIN
 
	tEFI_EXCEPTION_TYPE
 
	tI¡îru±Ty≥
,

197 
	tIN
 
	tEFI_CPU_INTERRUPT_HANDLER
 
	tI¡îru±H™dÀr


219 
	gEFI_STATUS


220 (
	tEFIAPI
 *
	tEFI_CPU_GET_TIMER_VALUE
)(

221 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

222 
	tIN
 
	tUINT32
 
	tTimîIndex
,

223 
	tOUT
 
	tUINT64
 *
	tTimîVÆue
,

224 
	tOUT
 
	tUINT64
 *
	tTimîPîiod
 
	tOPTIONAL


252 
	gEFI_STATUS


253 (
	tEFIAPI
 *
	tEFI_CPU_SET_MEMORY_ATTRIBUTES
)(

254 
	tIN
 
	tEFI_CPU_ARCH_PROTOCOL
 *
	tThis
,

255 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tBa£Addªss
,

256 
	tIN
 
	tUINT64
 
	tLígth
,

257 
	tIN
 
	tUINT64
 
	tAâribuãs


267 
	s_EFI_CPU_ARCH_PROTOCOL
 {

268 
EFI_CPU_FLUSH_DATA_CACHE
 
	mFlushD©aCache
;

269 
EFI_CPU_ENABLE_INTERRUPT
 
	mE«bÀI¡îru±
;

270 
EFI_CPU_DISABLE_INTERRUPT
 
	mDißbÀI¡îru±
;

271 
EFI_CPU_GET_INTERRUPT_STATE
 
	mGëI¡îru±Sèã
;

272 
EFI_CPU_INIT
 
	mInô
;

273 
EFI_CPU_REGISTER_INTERRUPT_HANDLER
 
	mRegi°îI¡îru±H™dÀr
;

274 
EFI_CPU_GET_TIMER_VALUE
 
	mGëTimîVÆue
;

275 
EFI_CPU_SET_MEMORY_ATTRIBUTES
 
	mSëMem‹yAâribuãs
;

281 
UINT32
 
	mNumbîOfTimîs
;

289 
UINT32
 
	mDmaBuf„rAlignmít
;

292 
EFI_GUID
 
gEfiCpuArchPrŸocﬁGuid
;

	@CpuIo2.h

24 #i‚de‡
__CPU_IO2_H__


25 
	#__CPU_IO2_H__


	)

27 
	#EFI_CPU_IO2_PROTOCOL_GUID
 \

	)

32 
_EFI_CPU_IO2_PROTOCOL
 
	tEFI_CPU_IO2_PROTOCOL
;

38 
	mEfiCpuIoWidthUöt8
,

39 
	mEfiCpuIoWidthUöt16
,

40 
	mEfiCpuIoWidthUöt32
,

41 
	mEfiCpuIoWidthUöt64
,

42 
	mEfiCpuIoWidthFifoUöt8
,

43 
	mEfiCpuIoWidthFifoUöt16
,

44 
	mEfiCpuIoWidthFifoUöt32
,

45 
	mEfiCpuIoWidthFifoUöt64
,

46 
	mEfiCpuIoWidthFûlUöt8
,

47 
	mEfiCpuIoWidthFûlUöt16
,

48 
	mEfiCpuIoWidthFûlUöt32
,

49 
	mEfiCpuIoWidthFûlUöt64
,

50 
	mEfiCpuIoWidthMaximum


51 } 
	tEFI_CPU_IO_PROTOCOL_WIDTH
;

96 
	gEFI_STATUS


97 (
	tEFIAPI
 *
	tEFI_CPU_IO_PROTOCOL_IO_MEM
)(

98 
	tIN
 
	tEFI_CPU_IO2_PROTOCOL
 *
	tThis
,

99 
	tIN
 
	tEFI_CPU_IO_PROTOCOL_WIDTH
 
	tWidth
,

100 
	tIN
 
	tUINT64
 
	tAddªss
,

101 
	tIN
 
	tUINTN
 
	tCou¡
,

102 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


112 
EFI_CPU_IO_PROTOCOL_IO_MEM
 
	mRód
;

116 
EFI_CPU_IO_PROTOCOL_IO_MEM
 
	mWrôe
;

117 } 
	tEFI_CPU_IO_PROTOCOL_ACCESS
;

123 
	s_EFI_CPU_IO2_PROTOCOL
 {

127 
EFI_CPU_IO_PROTOCOL_ACCESS
 
	mMem
;

131 
EFI_CPU_IO_PROTOCOL_ACCESS
 
	mIo
;

134 
EFI_GUID
 
gEfiCpuIo2PrŸocﬁGuid
;

	@DebugPort.h

12 #i‚de‡
__DEBUG_PORT_H__


13 
	#__DEBUG_PORT_H__


	)

19 
	#EFI_DEBUGPORT_PROTOCOL_GUID
 \

	)

24 
EFI_GUID
 
gEfiDebugP‹tPrŸocﬁGuid
;

26 
_EFI_DEBUGPORT_PROTOCOL
 
	tEFI_DEBUGPORT_PROTOCOL
;

42 
	gEFI_STATUS


43 (
	tEFIAPI
 *
	tEFI_DEBUGPORT_RESET
)(

44 
	tIN
 
	tEFI_DEBUGPORT_PROTOCOL
 *
	tThis


62 
	gEFI_STATUS


63 (
	tEFIAPI
 *
	tEFI_DEBUGPORT_WRITE
)(

64 
	tIN
 
	tEFI_DEBUGPORT_PROTOCOL
 *
	tThis
,

65 
	tIN
 
	tUINT32
 
	tTimeout
,

66 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

67 
	tIN
 
	tVOID
 *
	tBuf„r


86 
	gEFI_STATUS


87 (
	tEFIAPI
 *
	tEFI_DEBUGPORT_READ
)(

88 
	tIN
 
	tEFI_DEBUGPORT_PROTOCOL
 *
	tThis
,

89 
	tIN
 
	tUINT32
 
	tTimeout
,

90 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

91 
	tOUT
 
	tVOID
 *
	tBuf„r


105 
	gEFI_STATUS


106 (
	tEFIAPI
 *
	tEFI_DEBUGPORT_POLL
)(

107 
	tIN
 
	tEFI_DEBUGPORT_PROTOCOL
 *
	tThis


113 
	s_EFI_DEBUGPORT_PROTOCOL
 {

114 
EFI_DEBUGPORT_RESET
 
	mRe£t
;

115 
EFI_DEBUGPORT_WRITE
 
	mWrôe
;

116 
EFI_DEBUGPORT_READ
 
	mRód
;

117 
EFI_DEBUGPORT_POLL
 
	mPﬁl
;

123 
	#EFI_DEBUGPORT_VARIABLE_NAME
 
L
"DEBUGPORT"

	)

124 
	#EFI_DEBUGPORT_VARIABLE_GUID
 
EFI_DEBUGPORT_PROTOCOL_GUID


	)

126 
EFI_GUID
 
gEfiDebugP‹tV¨übÀGuid
;

131 
	#DEVICE_PATH_MESSAGING_DEBUGPORT
 
EFI_DEBUGPORT_PROTOCOL_GUID


	)

133 
EFI_GUID
 
gEfiDebugP‹tDevi˚P©hGuid
;

136 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

137 
EFI_GUID
 
	mGuid
;

138 } 
	tDEBUGPORT_DEVICE_PATH
;

	@DebugSupport.h

16 #i‚de‡
__DEBUG_SUPPORT_H__


17 
	#__DEBUG_SUPPORT_H__


	)

19 
	~<Indu°rySènd¨d/PeImage.h
>

21 
_EFI_DEBUG_SUPPORT_PROTOCOL
 
	tEFI_DEBUG_SUPPORT_PROTOCOL
;

26 
	#EFI_DEBUG_SUPPORT_PROTOCOL_GUID
 \

	)

35 
INTN
 
	tEFI_EXCEPTION_TYPE
;

40 
	#EXCEPT_IA32_DIVIDE_ERROR
 0

	)

41 
	#EXCEPT_IA32_DEBUG
 1

	)

42 
	#EXCEPT_IA32_NMI
 2

	)

43 
	#EXCEPT_IA32_BREAKPOINT
 3

	)

44 
	#EXCEPT_IA32_OVERFLOW
 4

	)

45 
	#EXCEPT_IA32_BOUND
 5

	)

46 
	#EXCEPT_IA32_INVALID_OPCODE
 6

	)

47 
	#EXCEPT_IA32_DOUBLE_FAULT
 8

	)

48 
	#EXCEPT_IA32_INVALID_TSS
 10

	)

49 
	#EXCEPT_IA32_SEG_NOT_PRESENT
 11

	)

50 
	#EXCEPT_IA32_STACK_FAULT
 12

	)

51 
	#EXCEPT_IA32_GP_FAULT
 13

	)

52 
	#EXCEPT_IA32_PAGE_FAULT
 14

	)

53 
	#EXCEPT_IA32_FP_ERROR
 16

	)

54 
	#EXCEPT_IA32_ALIGNMENT_CHECK
 17

	)

55 
	#EXCEPT_IA32_MACHINE_CHECK
 18

	)

56 
	#EXCEPT_IA32_SIMD
 19

	)

63 
UINT16
 
	mFcw
;

64 
UINT16
 
	mFsw
;

65 
UINT16
 
	mFtw
;

66 
UINT16
 
	mOpcode
;

67 
UINT32
 
	mEù
;

68 
UINT16
 
	mCs
;

69 
UINT16
 
	mRe£rved1
;

70 
UINT32
 
	mD©aOff£t
;

71 
UINT16
 
	mDs
;

72 
UINT8
 
	mRe£rved2
[10];

73 
UINT8
 
	mSt0Mm0
[10], 
	mRe£rved3
[6];

74 
UINT8
 
	mSt1Mm1
[10], 
	mRe£rved4
[6];

75 
UINT8
 
	mSt2Mm2
[10], 
	mRe£rved5
[6];

76 
UINT8
 
	mSt3Mm3
[10], 
	mRe£rved6
[6];

77 
UINT8
 
	mSt4Mm4
[10], 
	mRe£rved7
[6];

78 
UINT8
 
	mSt5Mm5
[10], 
	mRe£rved8
[6];

79 
UINT8
 
	mSt6Mm6
[10], 
	mRe£rved9
[6];

80 
UINT8
 
	mSt7Mm7
[10], 
	mRe£rved10
[6];

81 
UINT8
 
	mXmm0
[16];

82 
UINT8
 
	mXmm1
[16];

83 
UINT8
 
	mXmm2
[16];

84 
UINT8
 
	mXmm3
[16];

85 
UINT8
 
	mXmm4
[16];

86 
UINT8
 
	mXmm5
[16];

87 
UINT8
 
	mXmm6
[16];

88 
UINT8
 
	mXmm7
[16];

89 
UINT8
 
	mRe£rved11
[14 * 16];

90 } 
	tEFI_FX_SAVE_STATE_IA32
;

96 
UINT32
 
	mEx˚±i⁄D©a
;

97 
EFI_FX_SAVE_STATE_IA32
 
	mFxSaveSèã
;

98 
UINT32
 
	mDr0
;

99 
UINT32
 
	mDr1
;

100 
UINT32
 
	mDr2
;

101 
UINT32
 
	mDr3
;

102 
UINT32
 
	mDr6
;

103 
UINT32
 
	mDr7
;

104 
UINT32
 
	mCr0
;

105 
UINT32
 
	mCr1
;

106 
UINT32
 
	mCr2
;

107 
UINT32
 
	mCr3
;

108 
UINT32
 
	mCr4
;

109 
UINT32
 
	mEÊags
;

110 
UINT32
 
	mLdå
;

111 
UINT32
 
	mTr
;

112 
UINT32
 
	mGdå
[2];

113 
UINT32
 
	mIdå
[2];

114 
UINT32
 
	mEù
;

115 
UINT32
 
	mGs
;

116 
UINT32
 
	mFs
;

117 
UINT32
 
	mEs
;

118 
UINT32
 
	mDs
;

119 
UINT32
 
	mCs
;

120 
UINT32
 
	mSs
;

121 
UINT32
 
	mEdi
;

122 
UINT32
 
	mEsi
;

123 
UINT32
 
	mEbp
;

124 
UINT32
 
	mE•
;

125 
UINT32
 
	mEbx
;

126 
UINT32
 
	mEdx
;

127 
UINT32
 
	mEcx
;

128 
UINT32
 
	mEax
;

129 } 
	tEFI_SYSTEM_CONTEXT_IA32
;

134 
	#EXCEPT_X64_DIVIDE_ERROR
 0

	)

135 
	#EXCEPT_X64_DEBUG
 1

	)

136 
	#EXCEPT_X64_NMI
 2

	)

137 
	#EXCEPT_X64_BREAKPOINT
 3

	)

138 
	#EXCEPT_X64_OVERFLOW
 4

	)

139 
	#EXCEPT_X64_BOUND
 5

	)

140 
	#EXCEPT_X64_INVALID_OPCODE
 6

	)

141 
	#EXCEPT_X64_DOUBLE_FAULT
 8

	)

142 
	#EXCEPT_X64_INVALID_TSS
 10

	)

143 
	#EXCEPT_X64_SEG_NOT_PRESENT
 11

	)

144 
	#EXCEPT_X64_STACK_FAULT
 12

	)

145 
	#EXCEPT_X64_GP_FAULT
 13

	)

146 
	#EXCEPT_X64_PAGE_FAULT
 14

	)

147 
	#EXCEPT_X64_FP_ERROR
 16

	)

148 
	#EXCEPT_X64_ALIGNMENT_CHECK
 17

	)

149 
	#EXCEPT_X64_MACHINE_CHECK
 18

	)

150 
	#EXCEPT_X64_SIMD
 19

	)

157 
UINT16
 
	mFcw
;

158 
UINT16
 
	mFsw
;

159 
UINT16
 
	mFtw
;

160 
UINT16
 
	mOpcode
;

161 
UINT64
 
	mRù
;

162 
UINT64
 
	mD©aOff£t
;

163 
UINT8
 
	mRe£rved1
[8];

164 
UINT8
 
	mSt0Mm0
[10], 
	mRe£rved2
[6];

165 
UINT8
 
	mSt1Mm1
[10], 
	mRe£rved3
[6];

166 
UINT8
 
	mSt2Mm2
[10], 
	mRe£rved4
[6];

167 
UINT8
 
	mSt3Mm3
[10], 
	mRe£rved5
[6];

168 
UINT8
 
	mSt4Mm4
[10], 
	mRe£rved6
[6];

169 
UINT8
 
	mSt5Mm5
[10], 
	mRe£rved7
[6];

170 
UINT8
 
	mSt6Mm6
[10], 
	mRe£rved8
[6];

171 
UINT8
 
	mSt7Mm7
[10], 
	mRe£rved9
[6];

172 
UINT8
 
	mXmm0
[16];

173 
UINT8
 
	mXmm1
[16];

174 
UINT8
 
	mXmm2
[16];

175 
UINT8
 
	mXmm3
[16];

176 
UINT8
 
	mXmm4
[16];

177 
UINT8
 
	mXmm5
[16];

178 
UINT8
 
	mXmm6
[16];

179 
UINT8
 
	mXmm7
[16];

183 
UINT8
 
	mRe£rved11
[14 * 16];

184 } 
	tEFI_FX_SAVE_STATE_X64
;

190 
UINT64
 
	mEx˚±i⁄D©a
;

191 
EFI_FX_SAVE_STATE_X64
 
	mFxSaveSèã
;

192 
UINT64
 
	mDr0
;

193 
UINT64
 
	mDr1
;

194 
UINT64
 
	mDr2
;

195 
UINT64
 
	mDr3
;

196 
UINT64
 
	mDr6
;

197 
UINT64
 
	mDr7
;

198 
UINT64
 
	mCr0
;

199 
UINT64
 
	mCr1
;

200 
UINT64
 
	mCr2
;

201 
UINT64
 
	mCr3
;

202 
UINT64
 
	mCr4
;

203 
UINT64
 
	mCr8
;

204 
UINT64
 
	mRÊags
;

205 
UINT64
 
	mLdå
;

206 
UINT64
 
	mTr
;

207 
UINT64
 
	mGdå
[2];

208 
UINT64
 
	mIdå
[2];

209 
UINT64
 
	mRù
;

210 
UINT64
 
	mGs
;

211 
UINT64
 
	mFs
;

212 
UINT64
 
	mEs
;

213 
UINT64
 
	mDs
;

214 
UINT64
 
	mCs
;

215 
UINT64
 
	mSs
;

216 
UINT64
 
	mRdi
;

217 
UINT64
 
	mRsi
;

218 
UINT64
 
	mRbp
;

219 
UINT64
 
	mR•
;

220 
UINT64
 
	mRbx
;

221 
UINT64
 
	mRdx
;

222 
UINT64
 
	mRcx
;

223 
UINT64
 
	mRax
;

224 
UINT64
 
	mR8
;

225 
UINT64
 
	mR9
;

226 
UINT64
 
	mR10
;

227 
UINT64
 
	mR11
;

228 
UINT64
 
	mR12
;

229 
UINT64
 
	mR13
;

230 
UINT64
 
	mR14
;

231 
UINT64
 
	mR15
;

232 } 
	tEFI_SYSTEM_CONTEXT_X64
;

237 
	#EXCEPT_IPF_VHTP_TRANSLATION
 0

	)

238 
	#EXCEPT_IPF_INSTRUCTION_TLB
 1

	)

239 
	#EXCEPT_IPF_DATA_TLB
 2

	)

240 
	#EXCEPT_IPF_ALT_INSTRUCTION_TLB
 3

	)

241 
	#EXCEPT_IPF_ALT_DATA_TLB
 4

	)

242 
	#EXCEPT_IPF_DATA_NESTED_TLB
 5

	)

243 
	#EXCEPT_IPF_INSTRUCTION_KEY_MISSED
 6

	)

244 
	#EXCEPT_IPF_DATA_KEY_MISSED
 7

	)

245 
	#EXCEPT_IPF_DIRTY_BIT
 8

	)

246 
	#EXCEPT_IPF_INSTRUCTION_ACCESS_BIT
 9

	)

247 
	#EXCEPT_IPF_DATA_ACCESS_BIT
 10

	)

248 
	#EXCEPT_IPF_BREAKPOINT
 11

	)

249 
	#EXCEPT_IPF_EXTERNAL_INTERRUPT
 12

	)

253 
	#EXCEPT_IPF_PAGE_NOT_PRESENT
 20

	)

254 
	#EXCEPT_IPF_KEY_PERMISSION
 21

	)

255 
	#EXCEPT_IPF_INSTRUCTION_ACCESS_RIGHTS
 22

	)

256 
	#EXCEPT_IPF_DATA_ACCESS_RIGHTS
 23

	)

257 
	#EXCEPT_IPF_GENERAL_EXCEPTION
 24

	)

258 
	#EXCEPT_IPF_DISABLED_FP_REGISTER
 25

	)

259 
	#EXCEPT_IPF_NAT_CONSUMPTION
 26

	)

260 
	#EXCEPT_IPF_SPECULATION
 27

	)

264 
	#EXCEPT_IPF_DEBUG
 29

	)

265 
	#EXCEPT_IPF_UNALIGNED_REFERENCE
 30

	)

266 
	#EXCEPT_IPF_UNSUPPORTED_DATA_REFERENCE
 31

	)

267 
	#EXCEPT_IPF_FP_FAULT
 32

	)

268 
	#EXCEPT_IPF_FP_TRAP
 33

	)

269 
	#EXCEPT_IPF_LOWER_PRIVILEGE_TRANSFER_TRAP
 34

	)

270 
	#EXCEPT_IPF_TAKEN_BRANCH
 35

	)

271 
	#EXCEPT_IPF_SINGLE_STEP
 36

	)

275 
	#EXCEPT_IPF_IA32_EXCEPTION
 45

	)

276 
	#EXCEPT_IPF_IA32_INTERCEPT
 46

	)

277 
	#EXCEPT_IPF_IA32_INTERRUPT
 47

	)

287 
UINT64
 
	mRe£rved
;

288 
UINT64
 
	mR1
;

289 
UINT64
 
	mR2
;

290 
UINT64
 
	mR3
;

291 
UINT64
 
	mR4
;

292 
UINT64
 
	mR5
;

293 
UINT64
 
	mR6
;

294 
UINT64
 
	mR7
;

295 
UINT64
 
	mR8
;

296 
UINT64
 
	mR9
;

297 
UINT64
 
	mR10
;

298 
UINT64
 
	mR11
;

299 
UINT64
 
	mR12
;

300 
UINT64
 
	mR13
;

301 
UINT64
 
	mR14
;

302 
UINT64
 
	mR15
;

303 
UINT64
 
	mR16
;

304 
UINT64
 
	mR17
;

305 
UINT64
 
	mR18
;

306 
UINT64
 
	mR19
;

307 
UINT64
 
	mR20
;

308 
UINT64
 
	mR21
;

309 
UINT64
 
	mR22
;

310 
UINT64
 
	mR23
;

311 
UINT64
 
	mR24
;

312 
UINT64
 
	mR25
;

313 
UINT64
 
	mR26
;

314 
UINT64
 
	mR27
;

315 
UINT64
 
	mR28
;

316 
UINT64
 
	mR29
;

317 
UINT64
 
	mR30
;

318 
UINT64
 
	mR31
;

320 
UINT64
 
	mF2
[2];

321 
UINT64
 
	mF3
[2];

322 
UINT64
 
	mF4
[2];

323 
UINT64
 
	mF5
[2];

324 
UINT64
 
	mF6
[2];

325 
UINT64
 
	mF7
[2];

326 
UINT64
 
	mF8
[2];

327 
UINT64
 
	mF9
[2];

328 
UINT64
 
	mF10
[2];

329 
UINT64
 
	mF11
[2];

330 
UINT64
 
	mF12
[2];

331 
UINT64
 
	mF13
[2];

332 
UINT64
 
	mF14
[2];

333 
UINT64
 
	mF15
[2];

334 
UINT64
 
	mF16
[2];

335 
UINT64
 
	mF17
[2];

336 
UINT64
 
	mF18
[2];

337 
UINT64
 
	mF19
[2];

338 
UINT64
 
	mF20
[2];

339 
UINT64
 
	mF21
[2];

340 
UINT64
 
	mF22
[2];

341 
UINT64
 
	mF23
[2];

342 
UINT64
 
	mF24
[2];

343 
UINT64
 
	mF25
[2];

344 
UINT64
 
	mF26
[2];

345 
UINT64
 
	mF27
[2];

346 
UINT64
 
	mF28
[2];

347 
UINT64
 
	mF29
[2];

348 
UINT64
 
	mF30
[2];

349 
UINT64
 
	mF31
[2];

351 
UINT64
 
	mPr
;

353 
UINT64
 
	mB0
;

354 
UINT64
 
	mB1
;

355 
UINT64
 
	mB2
;

356 
UINT64
 
	mB3
;

357 
UINT64
 
	mB4
;

358 
UINT64
 
	mB5
;

359 
UINT64
 
	mB6
;

360 
UINT64
 
	mB7
;

365 
UINT64
 
	mArRsc
;

366 
UINT64
 
	mArB•
;

367 
UINT64
 
	mArB•°‹e
;

368 
UINT64
 
	mArR«t
;

370 
UINT64
 
	mArF¸
;

372 
UINT64
 
	mArEÊag
;

373 
UINT64
 
	mArCsd
;

374 
UINT64
 
	mArSsd
;

375 
UINT64
 
	mArCÊg
;

376 
UINT64
 
	mArF§
;

377 
UINT64
 
	mArFú
;

378 
UINT64
 
	mArFdr
;

380 
UINT64
 
	mArCcv
;

382 
UINT64
 
	mArU«t
;

384 
UINT64
 
	mArFp§
;

386 
UINT64
 
	mArPfs
;

387 
UINT64
 
	mArLc
;

388 
UINT64
 
	mArEc
;

393 
UINT64
 
	mCrD¸
;

394 
UINT64
 
	mCrItm
;

395 
UINT64
 
	mCrIva
;

396 
UINT64
 
	mCrPè
;

397 
UINT64
 
	mCrIp§
;

398 
UINT64
 
	mCrI§
;

399 
UINT64
 
	mCrIù
;

400 
UINT64
 
	mCrIÁ
;

401 
UINT64
 
	mCrItú
;

402 
UINT64
 
	mCrIùa
;

403 
UINT64
 
	mCrIfs
;

404 
UINT64
 
	mCrIim
;

405 
UINT64
 
	mCrIha
;

410 
UINT64
 
	mDbr0
;

411 
UINT64
 
	mDbr1
;

412 
UINT64
 
	mDbr2
;

413 
UINT64
 
	mDbr3
;

414 
UINT64
 
	mDbr4
;

415 
UINT64
 
	mDbr5
;

416 
UINT64
 
	mDbr6
;

417 
UINT64
 
	mDbr7
;

419 
UINT64
 
	mIbr0
;

420 
UINT64
 
	mIbr1
;

421 
UINT64
 
	mIbr2
;

422 
UINT64
 
	mIbr3
;

423 
UINT64
 
	mIbr4
;

424 
UINT64
 
	mIbr5
;

425 
UINT64
 
	mIbr6
;

426 
UINT64
 
	mIbr7
;

431 
UINT64
 
	mI¡N©
;

433 } 
	tEFI_SYSTEM_CONTEXT_IPF
;

438 
	#EXCEPT_EBC_UNDEFINED
 0

	)

439 
	#EXCEPT_EBC_DIVIDE_ERROR
 1

	)

440 
	#EXCEPT_EBC_DEBUG
 2

	)

441 
	#EXCEPT_EBC_BREAKPOINT
 3

	)

442 
	#EXCEPT_EBC_OVERFLOW
 4

	)

443 
	#EXCEPT_EBC_INVALID_OPCODE
 5

444 
	#EXCEPT_EBC_STACK_FAULT
 6

	)

445 
	#EXCEPT_EBC_ALIGNMENT_CHECK
 7

	)

446 
	#EXCEPT_EBC_INSTRUCTION_ENCODING
 8

447 
	#EXCEPT_EBC_BAD_BREAK
 9

448 
	#EXCEPT_EBC_STEP
 10

452 
	#MAX_EBC_EXCEPTION
 
EXCEPT_EBC_STEP


	)

458 
UINT64
 
	mR0
;

459 
UINT64
 
	mR1
;

460 
UINT64
 
	mR2
;

461 
UINT64
 
	mR3
;

462 
UINT64
 
	mR4
;

463 
UINT64
 
	mR5
;

464 
UINT64
 
	mR6
;

465 
UINT64
 
	mR7
;

466 
UINT64
 
	mFœgs
;

467 
UINT64
 
	mC⁄åﬁFœgs
;

468 
UINT64
 
	mIp
;

469 } 
	tEFI_SYSTEM_CONTEXT_EBC
;

476 
	#EXCEPT_ARM_RESET
 0

	)

477 
	#EXCEPT_ARM_UNDEFINED_INSTRUCTION
 1

	)

478 
	#EXCEPT_ARM_SOFTWARE_INTERRUPT
 2

	)

479 
	#EXCEPT_ARM_PREFETCH_ABORT
 3

	)

480 
	#EXCEPT_ARM_DATA_ABORT
 4

	)

481 
	#EXCEPT_ARM_RESERVED
 5

	)

482 
	#EXCEPT_ARM_IRQ
 6

	)

483 
	#EXCEPT_ARM_FIQ
 7

	)

488 
	#MAX_ARM_EXCEPTION
 
EXCEPT_ARM_FIQ


	)

494 
UINT32
 
	mR0
;

495 
UINT32
 
	mR1
;

496 
UINT32
 
	mR2
;

497 
UINT32
 
	mR3
;

498 
UINT32
 
	mR4
;

499 
UINT32
 
	mR5
;

500 
UINT32
 
	mR6
;

501 
UINT32
 
	mR7
;

502 
UINT32
 
	mR8
;

503 
UINT32
 
	mR9
;

504 
UINT32
 
	mR10
;

505 
UINT32
 
	mR11
;

506 
UINT32
 
	mR12
;

507 
UINT32
 
	mSP
;

508 
UINT32
 
	mLR
;

509 
UINT32
 
	mPC
;

510 
UINT32
 
	mCPSR
;

511 
UINT32
 
	mDFSR
;

512 
UINT32
 
	mDFAR
;

513 
UINT32
 
	mIFSR
;

514 
UINT32
 
	mIFAR
;

515 } 
	tEFI_SYSTEM_CONTEXT_ARM
;

521 
	#EXCEPT_AARCH64_SYNCHRONOUS_EXCEPTIONS
 0

	)

522 
	#EXCEPT_AARCH64_IRQ
 1

	)

523 
	#EXCEPT_AARCH64_FIQ
 2

	)

524 
	#EXCEPT_AARCH64_SERROR
 3

	)

529 
	#MAX_AARCH64_EXCEPTION
 
EXCEPT_AARCH64_SERROR


	)

533 
UINT64
 
	mX0
;

534 
UINT64
 
	mX1
;

535 
UINT64
 
	mX2
;

536 
UINT64
 
	mX3
;

537 
UINT64
 
	mX4
;

538 
UINT64
 
	mX5
;

539 
UINT64
 
	mX6
;

540 
UINT64
 
	mX7
;

541 
UINT64
 
	mX8
;

542 
UINT64
 
	mX9
;

543 
UINT64
 
	mX10
;

544 
UINT64
 
	mX11
;

545 
UINT64
 
	mX12
;

546 
UINT64
 
	mX13
;

547 
UINT64
 
	mX14
;

548 
UINT64
 
	mX15
;

549 
UINT64
 
	mX16
;

550 
UINT64
 
	mX17
;

551 
UINT64
 
	mX18
;

552 
UINT64
 
	mX19
;

553 
UINT64
 
	mX20
;

554 
UINT64
 
	mX21
;

555 
UINT64
 
	mX22
;

556 
UINT64
 
	mX23
;

557 
UINT64
 
	mX24
;

558 
UINT64
 
	mX25
;

559 
UINT64
 
	mX26
;

560 
UINT64
 
	mX27
;

561 
UINT64
 
	mX28
;

562 
UINT64
 
	mFP
;

563 
UINT64
 
	mLR
;

564 
UINT64
 
	mSP
;

567 
UINT64
 
	mV0
[2];

568 
UINT64
 
	mV1
[2];

569 
UINT64
 
	mV2
[2];

570 
UINT64
 
	mV3
[2];

571 
UINT64
 
	mV4
[2];

572 
UINT64
 
	mV5
[2];

573 
UINT64
 
	mV6
[2];

574 
UINT64
 
	mV7
[2];

575 
UINT64
 
	mV8
[2];

576 
UINT64
 
	mV9
[2];

577 
UINT64
 
	mV10
[2];

578 
UINT64
 
	mV11
[2];

579 
UINT64
 
	mV12
[2];

580 
UINT64
 
	mV13
[2];

581 
UINT64
 
	mV14
[2];

582 
UINT64
 
	mV15
[2];

583 
UINT64
 
	mV16
[2];

584 
UINT64
 
	mV17
[2];

585 
UINT64
 
	mV18
[2];

586 
UINT64
 
	mV19
[2];

587 
UINT64
 
	mV20
[2];

588 
UINT64
 
	mV21
[2];

589 
UINT64
 
	mV22
[2];

590 
UINT64
 
	mV23
[2];

591 
UINT64
 
	mV24
[2];

592 
UINT64
 
	mV25
[2];

593 
UINT64
 
	mV26
[2];

594 
UINT64
 
	mV27
[2];

595 
UINT64
 
	mV28
[2];

596 
UINT64
 
	mV29
[2];

597 
UINT64
 
	mV30
[2];

598 
UINT64
 
	mV31
[2];

600 
UINT64
 
	mELR
;

601 
UINT64
 
	mSPSR
;

602 
UINT64
 
	mFPSR
;

603 
UINT64
 
	mESR
;

604 
UINT64
 
	mFAR
;

605 } 
	tEFI_SYSTEM_CONTEXT_AARCH64
;

610 
	#EXCEPT_RISCV_INST_MISALIGNED
 0

	)

611 
	#EXCEPT_RISCV_INST_ACCESS_FAULT
 1

	)

612 
	#EXCEPT_RISCV_ILLEGAL_INST
 2

	)

613 
	#EXCEPT_RISCV_BREAKPOINT
 3

	)

614 
	#EXCEPT_RISCV_LOAD_ADDRESS_MISALIGNED
 4

	)

615 
	#EXCEPT_RISCV_LOAD_ACCESS_FAULT
 5

	)

616 
	#EXCEPT_RISCV_STORE_AMO_ADDRESS_MISALIGNED
 6

	)

617 
	#EXCEPT_RISCV_STORE_AMO_ACCESS_FAULT
 7

	)

618 
	#EXCEPT_RISCV_ENV_CALL_FROM_UMODE
 8

	)

619 
	#EXCEPT_RISCV_ENV_CALL_FROM_SMODE
 9

	)

620 
	#EXCEPT_RISCV_ENV_CALL_FROM_HMODE
 10

	)

621 
	#EXCEPT_RISCV_ENV_CALL_FROM_MMODE
 11

	)

623 
	#EXCEPT_RISCV_SOFTWARE_INT
 0x0

	)

624 
	#EXCEPT_RISCV_TIMER_INT
 0x1

	)

627 
UINT64
 
	mX0
;

628 
UINT64
 
	mX1
;

629 
UINT64
 
	mX2
;

630 
UINT64
 
	mX3
;

631 
UINT64
 
	mX4
;

632 
UINT64
 
	mX5
;

633 
UINT64
 
	mX6
;

634 
UINT64
 
	mX7
;

635 
UINT64
 
	mX8
;

636 
UINT64
 
	mX9
;

637 
UINT64
 
	mX10
;

638 
UINT64
 
	mX11
;

639 
UINT64
 
	mX12
;

640 
UINT64
 
	mX13
;

641 
UINT64
 
	mX14
;

642 
UINT64
 
	mX15
;

643 
UINT64
 
	mX16
;

644 
UINT64
 
	mX17
;

645 
UINT64
 
	mX18
;

646 
UINT64
 
	mX19
;

647 
UINT64
 
	mX20
;

648 
UINT64
 
	mX21
;

649 
UINT64
 
	mX22
;

650 
UINT64
 
	mX23
;

651 
UINT64
 
	mX24
;

652 
UINT64
 
	mX25
;

653 
UINT64
 
	mX26
;

654 
UINT64
 
	mX27
;

655 
UINT64
 
	mX28
;

656 
UINT64
 
	mX29
;

657 
UINT64
 
	mX30
;

658 
UINT64
 
	mX31
;

659 } 
	tEFI_SYSTEM_CONTEXT_RISCV64
;

665 
EFI_SYSTEM_CONTEXT_EBC
 *
	mSy°emC⁄ãxtEbc
;

666 
EFI_SYSTEM_CONTEXT_IA32
 *
	mSy°emC⁄ãxtIa32
;

667 
EFI_SYSTEM_CONTEXT_X64
 *
	mSy°emC⁄ãxtX64
;

668 
EFI_SYSTEM_CONTEXT_IPF
 *
	mSy°emC⁄ãxtIpf
;

669 
EFI_SYSTEM_CONTEXT_ARM
 *
	mSy°emC⁄ãxtArm
;

670 
EFI_SYSTEM_CONTEXT_AARCH64
 *
	mSy°emC⁄ãxtAArch64
;

671 
EFI_SYSTEM_CONTEXT_RISCV64
 *
	mSy°emC⁄ãxtRiscV64
;

672 } 
	tEFI_SYSTEM_CONTEXT
;

686 
	gVOID


687 (
	tEFIAPI
 *
	tEFI_EXCEPTION_CALLBACK
)(

688 
	tIN
 
	tEFI_EXCEPTION_TYPE
 
	tEx˚±i⁄Ty≥
,

689 
	tIN
 
	tOUT
 
	tEFI_SYSTEM_CONTEXT
 
	tSy°emC⁄ãxt


699 
	gVOID


700 (
	tEFIAPI
 *
	tEFI_PERIODIC_CALLBACK
)(

701 
	tIN
 
	tOUT
 
	tEFI_SYSTEM_CONTEXT
 
	tSy°emC⁄ãxt


708 
	mIßIa32
 = 
IMAGE_FILE_MACHINE_I386
,

709 
	mIßX64
 = 
IMAGE_FILE_MACHINE_X64
,

710 
	mIßIpf
 = 
IMAGE_FILE_MACHINE_IA64
,

711 
	mIßEbc
 = 
IMAGE_FILE_MACHINE_EBC
,

712 
	mIßArm
 = 
IMAGE_FILE_MACHINE_ARMTHUMB_MIXED
,

713 
	mIßAArch64
 = 
IMAGE_FILE_MACHINE_ARM64


714 } 
	tEFI_INSTRUCTION_SET_ARCHITECTURE
;

733 
	gEFI_STATUS


734 (
	tEFIAPI
 *
	tEFI_GET_MAXIMUM_PROCESSOR_INDEX
)(

735 
	tIN
 
	tEFI_DEBUG_SUPPORT_PROTOCOL
 *
	tThis
,

736 
	tOUT
 
	tUINTN
 *
	tMaxPro˚ss‹Index


755 
	gEFI_STATUS


756 (
	tEFIAPI
 *
	tEFI_REGISTER_PERIODIC_CALLBACK
)(

757 
	tIN
 
	tEFI_DEBUG_SUPPORT_PROTOCOL
 *
	tThis
,

758 
	tIN
 
	tUINTN
 
	tPro˚ss‹Index
,

759 
	tIN
 
	tEFI_PERIODIC_CALLBACK
 
	tPîiodicCÆlback


779 
	gEFI_STATUS


780 (
	tEFIAPI
 *
	tEFI_REGISTER_EXCEPTION_CALLBACK
)(

781 
	tIN
 
	tEFI_DEBUG_SUPPORT_PROTOCOL
 *
	tThis
,

782 
	tIN
 
	tUINTN
 
	tPro˚ss‹Index
,

783 
	tIN
 
	tEFI_EXCEPTION_CALLBACK
 
	tEx˚±i⁄CÆlback
,

784 
	tIN
 
	tEFI_EXCEPTION_TYPE
 
	tEx˚±i⁄Ty≥


801 
	gEFI_STATUS


802 (
	tEFIAPI
 *
	tEFI_INVALIDATE_INSTRUCTION_CACHE
)(

803 
	tIN
 
	tEFI_DEBUG_SUPPORT_PROTOCOL
 *
	tThis
,

804 
	tIN
 
	tUINTN
 
	tPro˚ss‹Index
,

805 
	tIN
 
	tVOID
 *
	tSèπ
,

806 
	tIN
 
	tUINT64
 
	tLígth


814 
	s_EFI_DEBUG_SUPPORT_PROTOCOL
 {

818 
EFI_INSTRUCTION_SET_ARCHITECTURE
 
	mIß
;

819 
EFI_GET_MAXIMUM_PROCESSOR_INDEX
 
	mGëMaximumPro˚ss‹Index
;

820 
EFI_REGISTER_PERIODIC_CALLBACK
 
	mRegi°îPîiodicCÆlback
;

821 
EFI_REGISTER_EXCEPTION_CALLBACK
 
	mRegi°îEx˚±i⁄CÆlback
;

822 
EFI_INVALIDATE_INSTRUCTION_CACHE
 
	mInvÆid©eIn°ru˘i⁄Cache
;

825 
EFI_GUID
 
gEfiDebugSuµ‹tPrŸocﬁGuid
;

	@Decompress.h

9 #i‚de‡
__DECOMPRESS_H__


10 
	#__DECOMPRESS_H__


	)

12 
	#EFI_DECOMPRESS_PROTOCOL_GUID
 \

	)

17 
_EFI_DECOMPRESS_PROTOCOL
 
	tEFI_DECOMPRESS_PROTOCOL
;

53 
	gEFI_STATUS


54 (
	tEFIAPI
 *
	tEFI_DECOMPRESS_GET_INFO
)(

55 
	tIN
 
	tEFI_DECOMPRESS_PROTOCOL
 *
	tThis
,

56 
	tIN
 
	tVOID
 *
	tSour˚
,

57 
	tIN
 
	tUINT32
 
	tSour˚Size
,

58 
	tOUT
 
	tUINT32
 *
	tDe°ö©i⁄Size
,

59 
	tOUT
 
	tUINT32
 *
	tS¸©chSize


95 
	gEFI_STATUS


96 (
	tEFIAPI
 *
	tEFI_DECOMPRESS_DECOMPRESS
)(

97 
	tIN
 
	tEFI_DECOMPRESS_PROTOCOL
 *
	tThis
,

98 
	tIN
 
	tVOID
 *
	tSour˚
,

99 
	tIN
 
	tUINT32
 
	tSour˚Size
,

100 
	tIN
 
	tOUT
 
	tVOID
 *
	tDe°ö©i⁄
,

101 
	tIN
 
	tUINT32
 
	tDe°ö©i⁄Size
,

102 
	tIN
 
	tOUT
 
	tVOID
 *
	tS¸©ch
,

103 
	tIN
 
	tUINT32
 
	tS¸©chSize


109 
	s_EFI_DECOMPRESS_PROTOCOL
 {

110 
EFI_DECOMPRESS_GET_INFO
 
	mGëInfo
;

111 
EFI_DECOMPRESS_DECOMPRESS
 
	mDecom¥ess
;

114 
EFI_GUID
 
gEfiDecom¥essPrŸocﬁGuid
;

	@DeferredImageLoad.h

14 #i‚de‡
__DEFERRED_IMAGE_LOAD_H__


15 
	#__DEFERRED_IMAGE_LOAD_H__


	)

20 
	#EFI_DEFERRED_IMAGE_LOAD_PROTOCOL_GUID
 \

	)

25 
_EFI_DEFERRED_IMAGE_LOAD_PROTOCOL
 
	tEFI_DEFERRED_IMAGE_LOAD_PROTOCOL
;

55 
	gEFI_STATUS


56 (
	tEFIAPI
 *
	tEFI_DEFERRED_IMAGE_INFO
)(

57 
	tIN
 
	tEFI_DEFERRED_IMAGE_LOAD_PROTOCOL
 *
	tThis
,

58 
	tIN
 
	tUINTN
 
	tImageIndex
,

59 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tImageDevi˚P©h
,

60 
	tOUT
 
	tVOID
 **
	tImage
,

61 
	tOUT
 
	tUINTN
 *
	tImageSize
,

62 
	tOUT
 
	tBOOLEAN
 *
	tBoŸO±i⁄


68 
	s_EFI_DEFERRED_IMAGE_LOAD_PROTOCOL
 {

69 
EFI_DEFERRED_IMAGE_INFO
 
	mGëImageInfo
;

72 
EFI_GUID
 
gEfiDe„ºedImageLﬂdPrŸocﬁGuid
;

	@DeviceIo.h

12 #i‚de‡
__DEVICE_IO_H__


13 
	#__DEVICE_IO_H__


	)

15 
	#EFI_DEVICE_IO_PROTOCOL_GUID
 \

	)

20 
_EFI_DEVICE_IO_PROTOCOL
 
	tEFI_DEVICE_IO_PROTOCOL
;

25 
	#DEVICE_IO_PROTOCOL
 
EFI_DEVICE_IO_PROTOCOL_GUID


	)

30 
EFI_DEVICE_IO_PROTOCOL
 
	tEFI_DEVICE_IO_INTERFACE
;

36 
	mIO_UINT8
 = 0,

37 
	mIO_UINT16
 = 1,

38 
	mIO_UINT32
 = 2,

39 
	mIO_UINT64
 = 3,

44 
	mMMIO_COPY_UINT8
 = 4,

45 
	mMMIO_COPY_UINT16
 = 5,

46 
	mMMIO_COPY_UINT32
 = 6,

47 
	mMMIO_COPY_UINT64
 = 7

48 } 
	tEFI_IO_WIDTH
;

69 
	gEFI_STATUS


70 (
	tEFIAPI
 *
	tEFI_DEVICE_IO
)(

71 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

72 
	tIN
 
	tEFI_IO_WIDTH
 
	tWidth
,

73 
	tIN
 
	tUINT64
 
	tAddªss
,

74 
	tIN
 
	tUINTN
 
	tCou¡
,

75 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


79 
EFI_DEVICE_IO
 
	mRód
;

80 
EFI_DEVICE_IO
 
	mWrôe
;

81 } 
	tEFI_IO_ACCESS
;

98 
	gEFI_STATUS


99 (
	tEFIAPI
 *
	tEFI_PCI_DEVICE_PATH
)(

100 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

101 
	tIN
 
	tUINT64
 
	tPciAddªss
,

102 
	tIN
 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tPciDevi˚P©h


109 
	mEfiBusMa°îRód
,

114 
	mEfiBusMa°îWrôe
,

122 
	mEfiBusMa°îComm⁄Buf„r


123 } 
	tEFI_IO_OPERATION_TYPE
;

145 
	gEFI_STATUS


146 (
	tEFIAPI
 *
	tEFI_IO_MAP
)(

147 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

148 
	tIN
 
	tEFI_IO_OPERATION_TYPE
 
	tO≥øti⁄
,

149 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 *
	tHo°Addªss
,

150 
	tIN
 
	tOUT
 
	tUINTN
 *
	tNumbîOfByãs
,

151 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tDevi˚Addªss
,

152 
	tOUT
 
	tVOID
 **
	tM≠pög


166 
	gEFI_STATUS


167 (
	tEFIAPI
 *
	tEFI_IO_UNMAP
)(

168 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

169 
	tIN
 
	tVOID
 *
	tM≠pög


190 
	gEFI_STATUS


191 (
	tEFIAPI
 *
	tEFI_IO_ALLOCATE_BUFFER
)(

192 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

193 
	tIN
 
	tEFI_ALLOCATE_TYPE
 
	tTy≥
,

194 
	tIN
 
	tEFI_MEMORY_TYPE
 
	tMem‹yTy≥
,

195 
	tIN
 
	tUINTN
 
	tPages
,

196 
	tIN
 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tHo°Addªss


209 
	gEFI_STATUS


210 (
	tEFIAPI
 *
	tEFI_IO_FLUSH
)(

211 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis


228 
	gEFI_STATUS


229 (
	tEFIAPI
 *
	tEFI_IO_FREE_BUFFER
)(

230 
	tIN
 
	tEFI_DEVICE_IO_PROTOCOL
 *
	tThis
,

231 
	tIN
 
	tUINTN
 
	tPages
,

232 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tHo°Addªss


239 
	s_EFI_DEVICE_IO_PROTOCOL
 {

243 
EFI_IO_ACCESS
 
	mMem
;

247 
EFI_IO_ACCESS
 
	mIo
;

251 
EFI_IO_ACCESS
 
	mPci
;

252 
EFI_IO_MAP
 
	mM≠
;

253 
EFI_PCI_DEVICE_PATH
 
	mPciDevi˚P©h
;

254 
EFI_IO_UNMAP
 
	mUnm≠
;

255 
EFI_IO_ALLOCATE_BUFFER
 
	mAŒoˇãBuf„r
;

256 
EFI_IO_FLUSH
 
	mFlush
;

257 
EFI_IO_FREE_BUFFER
 
	mFªeBuf„r
;

260 
EFI_GUID
 
gEfiDevi˚IoPrŸocﬁGuid
;

	@DevicePath.h

13 #i‚de‡
__EFI_DEVICE_PATH_PROTOCOL_H__


14 
	#__EFI_DEVICE_PATH_PROTOCOL_H__


	)

16 
	~<Guid/PcAnsi.h
>

17 
	~<Indu°rySènd¨d/BluëoŸh.h
>

18 
	~<Indu°rySènd¨d/A˝i60.h
>

23 
	#EFI_DEVICE_PATH_PROTOCOL_GUID
 \

	)

31 
	#DEVICE_PATH_PROTOCOL
 
EFI_DEVICE_PATH_PROTOCOL_GUID


	)

33 #¥agm®
∑ck
(1)

44 
UINT8
 
	mTy≥
;

51 
UINT8
 
	mSubTy≥
;

56 
UINT8
 
	mLígth
[2];

59 } 
	tEFI_DEVICE_PATH_PROTOCOL
;

64 
EFI_DEVICE_PATH_PROTOCOL
 
	tEFI_DEVICE_PATH
;

69 
	#HARDWARE_DEVICE_PATH
 0x01

	)

74 
	#HW_PCI_DP
 0x01

	)

80 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

84 
UINT8
 
	mFun˘i⁄
;

88 
UINT8
 
	mDevi˚
;

89 } 
	tPCI_DEVICE_PATH
;

94 
	#HW_PCCARD_DP
 0x02

	)

100 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

104 
UINT8
 
	mFun˘i⁄Numbî
;

105 } 
	tPCCARD_DEVICE_PATH
;

110 
	#HW_MEMMAP_DP
 0x03

	)

116 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

120 
UINT32
 
	mMem‹yTy≥
;

124 
EFI_PHYSICAL_ADDRESS
 
	mSèπögAddªss
;

128 
EFI_PHYSICAL_ADDRESS
 
	mEndögAddªss
;

129 } 
	tMEMMAP_DEVICE_PATH
;

134 
	#HW_VENDOR_DP
 0x04

	)

142 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

146 
EFI_GUID
 
	mGuid
;

150 } 
	tVENDOR_DEVICE_PATH
;

155 
	#HW_CONTROLLER_DP
 0x05

	)

161 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

165 
UINT32
 
	mC⁄åﬁÀrNumbî
;

166 } 
	tCONTROLLER_DEVICE_PATH
;

171 
	#HW_BMC_DP
 0x06

	)

177 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

181 
UINT8
 
	mI¡îÁ˚Ty≥
;

185 
UINT8
 
	mBa£Addªss
[8];

186 } 
	tBMC_DEVICE_PATH
;

191 
	#ACPI_DEVICE_PATH
 0x02

	)

196 
	#ACPI_DP
 0x01

	)

198 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

204 
UINT32
 
	mHID
;

212 
UINT32
 
	mUID
;

213 } 
	tACPI_HID_DEVICE_PATH
;

218 
	#ACPI_EXTENDED_DP
 0x02

	)

220 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

226 
UINT32
 
	mHID
;

232 
UINT32
 
	mUID
;

239 
UINT32
 
	mCID
;

245 } 
	tACPI_EXTENDED_HID_DEVICE_PATH
;

254 
	#PNP_EISA_ID_CONST
 0x41d0

	)

255 
	#EISA_ID
(
_Name
, 
_Num
Ë((
UINT32
)((_NameË| (_NumË<< 16))

	)

256 
	#EISA_PNP_ID
(
_PNPId
Ë(
	`EISA_ID
(
PNP_EISA_ID_CONST
, (_PNPId)))

	)

257 
	#EFI_PNP_ID
(
_PNPId
Ë(
	`EISA_ID
(
PNP_EISA_ID_CONST
, (_PNPId)))

	)

259 
	#PNP_EISA_ID_MASK
 0xffff

	)

260 
	#EISA_ID_TO_NUM
(
_Id
Ë((_IdË>> 16)

	)

265 
	#ACPI_ADR_DP
 0x03

	)

273 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

279 
UINT32
 
	mADR
;

283 } 
	tACPI_ADR_DEVICE_PATH
;

288 
	#ACPI_NVDIMM_DP
 0x04

	)

292 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

297 
UINT32
 
	mNFITDevi˚H™dÀ
;

298 } 
	tACPI_NVDIMM_DEVICE_PATH
;

300 
	#ACPI_ADR_DISPLAY_TYPE_OTHER
 0

	)

301 
	#ACPI_ADR_DISPLAY_TYPE_VGA
 1

	)

302 
	#ACPI_ADR_DISPLAY_TYPE_TV
 2

	)

303 
	#ACPI_ADR_DISPLAY_TYPE_EXTERNAL_DIGITAL
 3

	)

304 
	#ACPI_ADR_DISPLAY_TYPE_INTERNAL_DIGITAL
 4

	)

306 
	#ACPI_DISPLAY_ADR
(
_Devi˚IdScheme
, 
_HódId
, 
_N⁄VgaOuçut
, 
_BiosC™Dëe˘
, 
_Víd‹Info
, 
_Ty≥
, 
_P‹t
, 
_Index
Ë\

	)

307 ((
	gUINT32
)–((UINT32)((
	g_Devi˚IdScheme
) & 0x1) << 31) | \

308 (((
	g_HódId
) & 0x7) << 18) | \

309 (((
	g_N⁄VgaOuçut
) & 0x1) << 17) | \

310 (((
	g_BiosC™Dëe˘
) & 0x1) << 16) | \

311 (((
	g_Víd‹Info
) & 0xf) << 12) | \

312 (((
	g_Ty≥
) & 0xf) << 8) | \

313 (((
	g_P‹t
) & 0xf) << 4) | \

314 ((
	g_Index
) & 0xf) ))

322 
	#MESSAGING_DEVICE_PATH
 0x03

	)

327 
	#MSG_ATAPI_DP
 0x01

	)

329 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

333 
UINT8
 
	mPrim¨ySec⁄d¨y
;

337 
UINT8
 
	mSœveMa°î
;

341 
UINT16
 
	mLun
;

342 } 
	tATAPI_DEVICE_PATH
;

347 
	#MSG_SCSI_DP
 0x02

	)

349 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

353 
UINT16
 
	mPun
;

357 
UINT16
 
	mLun
;

358 } 
	tSCSI_DEVICE_PATH
;

363 
	#MSG_FIBRECHANNEL_DP
 0x03

	)

365 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

369 
UINT32
 
	mRe£rved
;

373 
UINT64
 
	mWWN
;

377 
UINT64
 
	mLun
;

378 } 
	tFIBRECHANNEL_DEVICE_PATH
;

383 
	#MSG_FIBRECHANNELEX_DP
 0x15

	)

385 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

389 
UINT32
 
	mRe£rved
;

393 
UINT8
 
	mWWN
[8];

397 
UINT8
 
	mLun
[8];

398 } 
	tFIBRECHANNELEX_DEVICE_PATH
;

403 
	#MSG_1394_DP
 0x04

	)

405 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

409 
UINT32
 
	mRe£rved
;

413 
UINT64
 
	mGuid
;

414 } 
	tF1394_DEVICE_PATH
;

419 
	#MSG_USB_DP
 0x05

	)

421 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

425 
UINT8
 
	mP¨ítP‹tNumbî
;

429 
UINT8
 
	mI¡îÁ˚Numbî
;

430 } 
	tUSB_DEVICE_PATH
;

435 
	#MSG_USB_CLASS_DP
 0x0f

	)

437 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

442 
UINT16
 
	mVíd‹Id
;

447 
UINT16
 
	mProdu˘Id
;

452 
UINT8
 
	mDevi˚Cœss
;

457 
UINT8
 
	mDevi˚SubCœss
;

462 
UINT8
 
	mDevi˚PrŸocﬁ
;

463 } 
	tUSB_CLASS_DEVICE_PATH
;

468 
	#MSG_USB_WWID_DP
 0x10

	)

474 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

478 
UINT16
 
	mI¡îÁ˚Numbî
;

482 
UINT16
 
	mVíd‹Id
;

486 
UINT16
 
	mProdu˘Id
;

494 } 
	tUSB_WWID_DEVICE_PATH
;

499 
	#MSG_DEVICE_LOGICAL_UNIT_DP
 0x11

	)

501 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

505 
UINT8
 
	mLun
;

506 } 
	tDEVICE_LOGICAL_UNIT_DEVICE_PATH
;

511 
	#MSG_SATA_DP
 0x12

	)

513 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

518 
UINT16
 
	mHBAP‹tNumbî
;

524 
UINT16
 
	mP‹tMu…ùlõrP‹tNumbî
;

528 
UINT16
 
	mLun
;

529 } 
	tSATA_DEVICE_PATH
;

534 
	#SATA_HBA_DIRECT_CONNECT_FLAG
 0x8000

	)

539 
	#MSG_I2O_DP
 0x06

	)

541 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

545 
UINT32
 
	mTid
;

546 } 
	tI2O_DEVICE_PATH
;

551 
	#MSG_MAC_ADDR_DP
 0x0b

	)

553 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

557 
EFI_MAC_ADDRESS
 
	mMacAddªss
;

561 
UINT8
 
	mIfTy≥
;

562 } 
	tMAC_ADDR_DEVICE_PATH
;

567 
	#MSG_IPv4_DP
 0x0c

	)

569 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

573 
EFI_IPv4_ADDRESS
 
	mLoˇlIpAddªss
;

577 
EFI_IPv4_ADDRESS
 
	mRemŸeIpAddªss
;

581 
UINT16
 
	mLoˇlP‹t
;

585 
UINT16
 
	mRemŸeP‹t
;

589 
UINT16
 
	mPrŸocﬁ
;

594 
BOOLEAN
 
	mSèticIpAddªss
;

598 
EFI_IPv4_ADDRESS
 
	mG©ewayIpAddªss
;

602 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

603 } 
	tIPv4_DEVICE_PATH
;

608 
	#MSG_IPv6_DP
 0x0d

	)

610 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

614 
EFI_IPv6_ADDRESS
 
	mLoˇlIpAddªss
;

618 
EFI_IPv6_ADDRESS
 
	mRemŸeIpAddªss
;

622 
UINT16
 
	mLoˇlP‹t
;

626 
UINT16
 
	mRemŸeP‹t
;

630 
UINT16
 
	mPrŸocﬁ
;

638 
UINT8
 
	mIpAddªssOrigö
;

642 
UINT8
 
	mPªfixLígth
;

646 
EFI_IPv6_ADDRESS
 
	mG©ewayIpAddªss
;

647 } 
	tIPv6_DEVICE_PATH
;

652 
	#MSG_INFINIBAND_DP
 0x09

	)

654 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

664 
UINT32
 
	mResour˚Fœgs
;

668 
UINT8
 
	mP‹tGid
[16];

673 
UINT64
 
	mSîvi˚Id
;

677 
UINT64
 
	mT¨gëP‹tId
;

681 
UINT64
 
	mDevi˚Id
;

682 } 
	tINFINIBAND_DEVICE_PATH
;

684 
	#INFINIBAND_RESOURCE_FLAG_IOC_SERVICE
 0x01

	)

685 
	#INFINIBAND_RESOURCE_FLAG_EXTENDED_BOOT_ENVIRONMENT
 0x02

	)

686 
	#INFINIBAND_RESOURCE_FLAG_CONSOLE_PROTOCOL
 0x04

	)

687 
	#INFINIBAND_RESOURCE_FLAG_STORAGE_PROTOCOL
 0x08

	)

688 
	#INFINIBAND_RESOURCE_FLAG_NETWORK_PROTOCOL
 0x10

	)

693 
	#MSG_UART_DP
 0x0e

	)

695 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

699 
UINT32
 
	mRe£rved
;

704 
UINT64
 
	mBaudR©e
;

709 
UINT8
 
	mD©aBôs
;

719 
UINT8
 
	mP¨ôy
;

727 
UINT8
 
	mSt›Bôs
;

728 } 
	tUART_DEVICE_PATH
;

733 
	#NVDIMM_NAMESPACE_DP
 0x20

	)

735 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

739 
EFI_GUID
 
	mUuid
;

740 } 
	tNVDIMM_NAMESPACE_DEVICE_PATH
;

745 
	#MSG_VENDOR_DP
 0x0a

	)

746 
VENDOR_DEVICE_PATH
 
	tVENDOR_DEFINED_DEVICE_PATH
;

748 
	#DEVICE_PATH_MESSAGING_PC_ANSI
 
EFI_PC_ANSI_GUID


	)

749 
	#DEVICE_PATH_MESSAGING_VT_100
 
EFI_VT_100_GUID


	)

750 
	#DEVICE_PATH_MESSAGING_VT_100_PLUS
 
EFI_VT_100_PLUS_GUID


	)

751 
	#DEVICE_PATH_MESSAGING_VT_UTF8
 
EFI_VT_UTF8_GUID


	)

758 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

762 
EFI_GUID
 
	mGuid
;

769 
UINT32
 
	mFlowC⁄åﬁM≠
;

770 } 
	tUART_FLOW_CONTROL_DEVICE_PATH
;

772 
	#UART_FLOW_CONTROL_HARDWARE
 0x00000001

	)

773 
	#UART_FLOW_CONTROL_XON_XOFF
 0x00000010

	)

775 
	#DEVICE_PATH_MESSAGING_SAS
 
EFI_SAS_DEVICE_PATH_GUID


	)

780 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

784 
EFI_GUID
 
	mGuid
;

788 
UINT32
 
	mRe£rved
;

792 
UINT64
 
	mSasAddªss
;

796 
UINT64
 
	mLun
;

800 
UINT16
 
	mDevi˚T›ﬁogy
;

804 
UINT16
 
	mRñ©iveT¨gëP‹t
;

805 } 
	tSAS_DEVICE_PATH
;

810 
	#MSG_SASEX_DP
 0x16

	)

812 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

816 
UINT8
 
	mSasAddªss
[8];

820 
UINT8
 
	mLun
[8];

824 
UINT16
 
	mDevi˚T›ﬁogy
;

828 
UINT16
 
	mRñ©iveT¨gëP‹t
;

829 } 
	tSASEX_DEVICE_PATH
;

834 
	#MSG_NVME_NAMESPACE_DP
 0x17

	)

836 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

837 
UINT32
 
	mName•a˚Id
;

838 
UINT64
 
	mName•a˚Uuid
;

839 } 
	tNVME_NAMESPACE_DEVICE_PATH
;

844 
	#MSG_DNS_DP
 0x1F

	)

846 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

850 
UINT8
 
	mIsIPv6
;

854 
EFI_IP_ADDRESS
 
	mDnsSîvîIp
[];

855 } 
	tDNS_DEVICE_PATH
;

860 
	#MSG_URI_DP
 0x18

	)

862 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

866 
CHAR8
 
	mUri
[];

867 } 
	tURI_DEVICE_PATH
;

872 
	#MSG_UFS_DP
 0x19

	)

874 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

878 
UINT8
 
	mPun
;

882 
UINT8
 
	mLun
;

883 } 
	tUFS_DEVICE_PATH
;

888 
	#MSG_SD_DP
 0x1A

	)

890 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

891 
UINT8
 
	mSlŸNumbî
;

892 } 
	tSD_DEVICE_PATH
;

897 
	#MSG_EMMC_DP
 0x1D

	)

899 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

900 
UINT8
 
	mSlŸNumbî
;

901 } 
	tEMMC_DEVICE_PATH
;

906 
	#MSG_ISCSI_DP
 0x13

	)

908 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

912 
UINT16
 
	mNëw‹kPrŸocﬁ
;

916 
UINT16
 
	mLogöO±i⁄
;

920 
UINT64
 
	mLun
;

925 
UINT16
 
	mT¨gëP‹èlGroupTag
;

931 } 
	tISCSI_DEVICE_PATH
;

933 
	#ISCSI_LOGIN_OPTION_NO_HEADER_DIGEST
 0x0000

	)

934 
	#ISCSI_LOGIN_OPTION_HEADER_DIGEST_USING_CRC32C
 0x0002

	)

935 
	#ISCSI_LOGIN_OPTION_NO_DATA_DIGEST
 0x0000

	)

936 
	#ISCSI_LOGIN_OPTION_DATA_DIGEST_USING_CRC32C
 0x0008

	)

937 
	#ISCSI_LOGIN_OPTION_AUTHMETHOD_CHAP
 0x0000

	)

938 
	#ISCSI_LOGIN_OPTION_AUTHMETHOD_NON
 0x1000

	)

939 
	#ISCSI_LOGIN_OPTION_CHAP_BI
 0x0000

	)

940 
	#ISCSI_LOGIN_OPTION_CHAP_UNI
 0x2000

	)

945 
	#MSG_VLAN_DP
 0x14

	)

947 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

951 
UINT16
 
	mVœnId
;

952 } 
	tVLAN_DEVICE_PATH
;

957 
	#MSG_BLUETOOTH_DP
 0x1b

	)

959 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

963 
BLUETOOTH_ADDRESS
 
	mBD_ADDR
;

964 } 
	tBLUETOOTH_DEVICE_PATH
;

969 
	#MSG_WIFI_DP
 0x1C

	)

971 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

975 
UINT8
 
	mSSId
[32];

976 } 
	tWIFI_DEVICE_PATH
;

981 
	#MSG_BLUETOOTH_LE_DP
 0x1E

	)

983 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

984 
BLUETOOTH_LE_ADDRESS
 
	mAddªss
;

985 } 
	tBLUETOOTH_LE_DEVICE_PATH
;

990 
	#MEDIA_DEVICE_PATH
 0x04

	)

995 
	#MEDIA_HARDDRIVE_DP
 0x01

	)

1001 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1008 
UINT32
 
	mP¨tôi⁄Numbî
;

1012 
UINT64
 
	mP¨tôi⁄Sèπ
;

1016 
UINT64
 
	mP¨tôi⁄Size
;

1024 
UINT8
 
	mSig«tuª
[16];

1030 
UINT8
 
	mMBRTy≥
;

1037 
UINT8
 
	mSig«tuªTy≥
;

1038 } 
	tHARDDRIVE_DEVICE_PATH
;

1040 
	#MBR_TYPE_PCAT
 0x01

	)

1041 
	#MBR_TYPE_EFI_PARTITION_TABLE_HEADER
 0x02

	)

1043 
	#NO_DISK_SIGNATURE
 0x00

	)

1044 
	#SIGNATURE_TYPE_MBR
 0x01

	)

1045 
	#SIGNATURE_TYPE_GUID
 0x02

	)

1050 
	#MEDIA_CDROM_DP
 0x02

	)

1056 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1060 
UINT32
 
	mBoŸE¡ry
;

1064 
UINT64
 
	mP¨tôi⁄Sèπ
;

1068 
UINT64
 
	mP¨tôi⁄Size
;

1069 } 
	tCDROM_DEVICE_PATH
;

1074 
	#MEDIA_VENDOR_DP
 0x03

1075 

	)

1079 
	#MEDIA_FILEPATH_DP
 0x04

	)

1081 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1085 
CHAR16
 
	mP©hName
[1];

1086 } 
	tFILEPATH_DEVICE_PATH
;

1088 
	#SIZE_OF_FILEPATH_DEVICE_PATH
 
	`OFFSET_OF
(
FILEPATH_DEVICE_PATH
,
P©hName
)

	)

1093 
	#MEDIA_PROTOCOL_DP
 0x05

	)

1101 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1105 
EFI_GUID
 
	mPrŸocﬁ
;

1106 } 
	tMEDIA_PROTOCOL_DEVICE_PATH
;

1111 
	#MEDIA_PIWG_FW_FILE_DP
 0x06

	)

1117 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1121 
EFI_GUID
 
	mFvFûeName
;

1122 } 
	tMEDIA_FW_VOL_FILEPATH_DEVICE_PATH
;

1127 
	#MEDIA_PIWG_FW_VOL_DP
 0x07

	)

1133 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1137 
EFI_GUID
 
	mFvName
;

1138 } 
	tMEDIA_FW_VOL_DEVICE_PATH
;

1143 
	#MEDIA_RELATIVE_OFFSET_RANGE_DP
 0x08

	)

1149 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1150 
UINT32
 
	mRe£rved
;

1151 
UINT64
 
	mSèπögOff£t
;

1152 
UINT64
 
	mEndögOff£t
;

1153 } 
	tMEDIA_RELATIVE_OFFSET_RANGE_DEVICE_PATH
;

1158 
	#EFI_VIRTUAL_DISK_GUID
 
EFI_ACPI_6_0_NFIT_GUID_RAM_DISK_SUPPORTING_VIRTUAL_DISK_REGION_VOLATILE


	)

1160 
EFI_GUID
 
gEfiVútuÆDiskGuid
;

1165 
	#EFI_VIRTUAL_CD_GUID
 
EFI_ACPI_6_0_NFIT_GUID_RAM_DISK_SUPPORTING_VIRTUAL_CD_REGION_VOLATILE


	)

1167 
EFI_GUID
 
gEfiVútuÆCdGuid
;

1172 
	#EFI_PERSISTENT_VIRTUAL_DISK_GUID
 
EFI_ACPI_6_0_NFIT_GUID_RAM_DISK_SUPPORTING_VIRTUAL_DISK_REGION_PERSISTENT


	)

1174 
EFI_GUID
 
gEfiPîsi°ítVútuÆDiskGuid
;

1179 
	#EFI_PERSISTENT_VIRTUAL_CD_GUID
 
EFI_ACPI_6_0_NFIT_GUID_RAM_DISK_SUPPORTING_VIRTUAL_CD_REGION_PERSISTENT


	)

1181 
EFI_GUID
 
gEfiPîsi°ítVútuÆCdGuid
;

1186 
	#MEDIA_RAM_DISK_DP
 0x09

	)

1192 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1196 
UINT32
 
	mSèπögAddr
[2];

1200 
UINT32
 
	mEndögAddr
[2];

1204 
EFI_GUID
 
	mTy≥Guid
;

1208 
UINT16
 
	mIn°™˚
;

1209 } 
	tMEDIA_RAM_DISK_DEVICE_PATH
;

1214 
	#BBS_DEVICE_PATH
 0x05

	)

1219 
	#BBS_BBS_DP
 0x01

	)

1225 
EFI_DEVICE_PATH_PROTOCOL
 
	mHódî
;

1229 
UINT16
 
	mDevi˚Ty≥
;

1233 
UINT16
 
	mSètusFœg
;

1237 
CHAR8
 
	mSåög
[1];

1238 } 
	tBBS_BBS_DEVICE_PATH
;

1243 
	#BBS_TYPE_FLOPPY
 0x01

	)

1244 
	#BBS_TYPE_HARDDRIVE
 0x02

	)

1245 
	#BBS_TYPE_CDROM
 0x03

	)

1246 
	#BBS_TYPE_PCMCIA
 0x04

	)

1247 
	#BBS_TYPE_USB
 0x05

	)

1248 
	#BBS_TYPE_EMBEDDED_NETWORK
 0x06

	)

1249 
	#BBS_TYPE_BEV
 0x80

	)

1250 
	#BBS_TYPE_UNKNOWN
 0xFF

	)

1257 
EFI_DEVICE_PATH_PROTOCOL
 
	mDevP©h
;

1258 
PCI_DEVICE_PATH
 
	mPci
;

1259 
PCCARD_DEVICE_PATH
 
	mPcC¨d
;

1260 
MEMMAP_DEVICE_PATH
 
	mMemM≠
;

1261 
VENDOR_DEVICE_PATH
 
	mVíd‹
;

1263 
CONTROLLER_DEVICE_PATH
 
	mC⁄åﬁÀr
;

1264 
BMC_DEVICE_PATH
 
	mBmc
;

1265 
ACPI_HID_DEVICE_PATH
 
	mA˝i
;

1266 
ACPI_EXTENDED_HID_DEVICE_PATH
 
	mExãndedA˝i
;

1267 
ACPI_ADR_DEVICE_PATH
 
	mA˝iAdr
;

1269 
ATAPI_DEVICE_PATH
 
	mAèpi
;

1270 
SCSI_DEVICE_PATH
 
	mScsi
;

1271 
ISCSI_DEVICE_PATH
 
	mIscsi
;

1272 
FIBRECHANNEL_DEVICE_PATH
 
	mFibªCh™√l
;

1273 
FIBRECHANNELEX_DEVICE_PATH
 
	mFibªCh™√lEx
;

1275 
F1394_DEVICE_PATH
 
	mF1394
;

1276 
USB_DEVICE_PATH
 
	mUsb
;

1277 
SATA_DEVICE_PATH
 
	mS©a
;

1278 
USB_CLASS_DEVICE_PATH
 
	mUsbCœss
;

1279 
USB_WWID_DEVICE_PATH
 
	mUsbWwid
;

1280 
DEVICE_LOGICAL_UNIT_DEVICE_PATH
 
	mLogicUnô
;

1281 
I2O_DEVICE_PATH
 
	mI2O
;

1282 
MAC_ADDR_DEVICE_PATH
 
	mMacAddr
;

1283 
IPv4_DEVICE_PATH
 
	mIpv4
;

1284 
IPv6_DEVICE_PATH
 
	mIpv6
;

1285 
VLAN_DEVICE_PATH
 
	mVœn
;

1286 
INFINIBAND_DEVICE_PATH
 
	mInföiB™d
;

1287 
UART_DEVICE_PATH
 
	mU¨t
;

1288 
UART_FLOW_CONTROL_DEVICE_PATH
 
	mU¨tFlowC⁄åﬁ
;

1289 
SAS_DEVICE_PATH
 
	mSas
;

1290 
SASEX_DEVICE_PATH
 
	mSasEx
;

1291 
NVME_NAMESPACE_DEVICE_PATH
 
	mNvmeName•a˚
;

1292 
DNS_DEVICE_PATH
 
	mDns
;

1293 
URI_DEVICE_PATH
 
	mUri
;

1294 
BLUETOOTH_DEVICE_PATH
 
	mBluëoŸh
;

1295 
WIFI_DEVICE_PATH
 
	mWiFi
;

1296 
UFS_DEVICE_PATH
 
	mUfs
;

1297 
SD_DEVICE_PATH
 
	mSd
;

1298 
EMMC_DEVICE_PATH
 
	mEmmc
;

1299 
HARDDRIVE_DEVICE_PATH
 
	mH¨dDrive
;

1300 
CDROM_DEVICE_PATH
 
	mCD
;

1302 
FILEPATH_DEVICE_PATH
 
	mFûeP©h
;

1303 
MEDIA_PROTOCOL_DEVICE_PATH
 
	mMedüPrŸocﬁ
;

1305 
MEDIA_FW_VOL_DEVICE_PATH
 
	mFúmw¨eVﬁume
;

1306 
MEDIA_FW_VOL_FILEPATH_DEVICE_PATH
 
	mFúmw¨eFûe
;

1307 
MEDIA_RELATIVE_OFFSET_RANGE_DEVICE_PATH
 
	mOff£t
;

1308 
MEDIA_RAM_DISK_DEVICE_PATH
 
	mRamDisk
;

1309 
BBS_BBS_DEVICE_PATH
 
	mBbs
;

1310 } 
	tEFI_DEV_PATH
;

1315 
EFI_DEVICE_PATH_PROTOCOL
 *
	mDevP©h
;

1316 
PCI_DEVICE_PATH
 *
	mPci
;

1317 
PCCARD_DEVICE_PATH
 *
	mPcC¨d
;

1318 
MEMMAP_DEVICE_PATH
 *
	mMemM≠
;

1319 
VENDOR_DEVICE_PATH
 *
	mVíd‹
;

1321 
CONTROLLER_DEVICE_PATH
 *
	mC⁄åﬁÀr
;

1322 
BMC_DEVICE_PATH
 *
	mBmc
;

1323 
ACPI_HID_DEVICE_PATH
 *
	mA˝i
;

1324 
ACPI_EXTENDED_HID_DEVICE_PATH
 *
	mExãndedA˝i
;

1325 
ACPI_ADR_DEVICE_PATH
 *
	mA˝iAdr
;

1327 
ATAPI_DEVICE_PATH
 *
	mAèpi
;

1328 
SCSI_DEVICE_PATH
 *
	mScsi
;

1329 
ISCSI_DEVICE_PATH
 *
	mIscsi
;

1330 
FIBRECHANNEL_DEVICE_PATH
 *
	mFibªCh™√l
;

1331 
FIBRECHANNELEX_DEVICE_PATH
 *
	mFibªCh™√lEx
;

1333 
F1394_DEVICE_PATH
 *
	mF1394
;

1334 
USB_DEVICE_PATH
 *
	mUsb
;

1335 
SATA_DEVICE_PATH
 *
	mS©a
;

1336 
USB_CLASS_DEVICE_PATH
 *
	mUsbCœss
;

1337 
USB_WWID_DEVICE_PATH
 *
	mUsbWwid
;

1338 
DEVICE_LOGICAL_UNIT_DEVICE_PATH
 *
	mLogicUnô
;

1339 
I2O_DEVICE_PATH
 *
	mI2O
;

1340 
MAC_ADDR_DEVICE_PATH
 *
	mMacAddr
;

1341 
IPv4_DEVICE_PATH
 *
	mIpv4
;

1342 
IPv6_DEVICE_PATH
 *
	mIpv6
;

1343 
VLAN_DEVICE_PATH
 *
	mVœn
;

1344 
INFINIBAND_DEVICE_PATH
 *
	mInföiB™d
;

1345 
UART_DEVICE_PATH
 *
	mU¨t
;

1346 
UART_FLOW_CONTROL_DEVICE_PATH
 *
	mU¨tFlowC⁄åﬁ
;

1347 
SAS_DEVICE_PATH
 *
	mSas
;

1348 
SASEX_DEVICE_PATH
 *
	mSasEx
;

1349 
NVME_NAMESPACE_DEVICE_PATH
 *
	mNvmeName•a˚
;

1350 
DNS_DEVICE_PATH
 *
	mDns
;

1351 
URI_DEVICE_PATH
 *
	mUri
;

1352 
BLUETOOTH_DEVICE_PATH
 *
	mBluëoŸh
;

1353 
WIFI_DEVICE_PATH
 *
	mWiFi
;

1354 
UFS_DEVICE_PATH
 *
	mUfs
;

1355 
SD_DEVICE_PATH
 *
	mSd
;

1356 
EMMC_DEVICE_PATH
 *
	mEmmc
;

1357 
HARDDRIVE_DEVICE_PATH
 *
	mH¨dDrive
;

1358 
CDROM_DEVICE_PATH
 *
	mCD
;

1360 
FILEPATH_DEVICE_PATH
 *
	mFûeP©h
;

1361 
MEDIA_PROTOCOL_DEVICE_PATH
 *
	mMedüPrŸocﬁ
;

1363 
MEDIA_FW_VOL_DEVICE_PATH
 *
	mFúmw¨eVﬁume
;

1364 
MEDIA_FW_VOL_FILEPATH_DEVICE_PATH
 *
	mFúmw¨eFûe
;

1365 
MEDIA_RELATIVE_OFFSET_RANGE_DEVICE_PATH
 *
	mOff£t
;

1366 
MEDIA_RAM_DISK_DEVICE_PATH
 *
	mRamDisk
;

1367 
BBS_BBS_DEVICE_PATH
 *
	mBbs
;

1368 
UINT8
 *
	mRaw
;

1369 } 
	tEFI_DEV_PATH_PTR
;

1371 #¥agm®
∑ck
()

1373 
	#END_DEVICE_PATH_TYPE
 0x7f

	)

1374 
	#END_ENTIRE_DEVICE_PATH_SUBTYPE
 0xFF

	)

1375 
	#END_INSTANCE_DEVICE_PATH_SUBTYPE
 0x01

	)

1377 
EFI_GUID
 
gEfiDevi˚P©hPrŸocﬁGuid
;

	@DevicePathFromText.h

10 #i‚de‡
__DEVICE_PATH_FROM_TEXT_PROTOCOL_H__


11 
	#__DEVICE_PATH_FROM_TEXT_PROTOCOL_H__


	)

16 
	#EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL_GUID
 \

	)

33 
	gEFI_DEVICE_PATH_PROTOCOL
*

34 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_FROM_TEXT_NODE
)(

35 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tTextDevi˚Node


51 
	gEFI_DEVICE_PATH_PROTOCOL
*

52 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_FROM_TEXT_PATH
)(

53 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tTextDevi˚P©h


60 
EFI_DEVICE_PATH_FROM_TEXT_NODE
 
	mC⁄vîtTextToDevi˚Node
;

61 
EFI_DEVICE_PATH_FROM_TEXT_PATH
 
	mC⁄vîtTextToDevi˚P©h
;

62 } 
	tEFI_DEVICE_PATH_FROM_TEXT_PROTOCOL
;

64 
EFI_GUID
 
gEfiDevi˚P©hFromTextPrŸocﬁGuid
;

	@DevicePathToText.h

10 #i‚de‡
__DEVICE_PATH_TO_TEXT_PROTOCOL_H__


11 
	#__DEVICE_PATH_TO_TEXT_PROTOCOL_H__


	)

16 
	#EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID
 \

	)

37 
	gCHAR16
*

38 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_TO_TEXT_NODE
)(

39 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚Node
,

40 
	tIN
 
	tBOOLEAN
 
	tDi•œyO∆y
,

41 
	tIN
 
	tBOOLEAN
 
	tAŒowSh‹tcuts


60 
	gCHAR16
*

61 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_TO_TEXT_PATH
)(

62 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

63 
	tIN
 
	tBOOLEAN
 
	tDi•œyO∆y
,

64 
	tIN
 
	tBOOLEAN
 
	tAŒowSh‹tcuts


71 
EFI_DEVICE_PATH_TO_TEXT_NODE
 
	mC⁄vîtDevi˚NodeToText
;

72 
EFI_DEVICE_PATH_TO_TEXT_PATH
 
	mC⁄vîtDevi˚P©hToText
;

73 } 
	tEFI_DEVICE_PATH_TO_TEXT_PROTOCOL
;

75 
EFI_GUID
 
gEfiDevi˚P©hToTextPrŸocﬁGuid
;

	@DevicePathUtilities.h

10 #i‚de‡
__DEVICE_PATH_UTILITIES_PROTOCOL_H__


11 
	#__DEVICE_PATH_UTILITIES_PROTOCOL_H__


	)

16 
	#EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID
 \

	)

31 
	gUINTN


32 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_GET_DEVICE_PATH_SIZE
)(

33 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h


47 
	gEFI_DEVICE_PATH_PROTOCOL
*

48 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_DUP_DEVICE_PATH
)(

49 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h


66 
	gEFI_DEVICE_PATH_PROTOCOL
*

67 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_APPEND_PATH
)(

68 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tSrc1
,

69 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tSrc2


86 
	gEFI_DEVICE_PATH_PROTOCOL
*

87 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_APPEND_NODE
)(

88 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

89 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚Node


103 
	gEFI_DEVICE_PATH_PROTOCOL
*

104 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_APPEND_INSTANCE
)(

105 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

106 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©hIn°™˚


126 
	gEFI_DEVICE_PATH_PROTOCOL
*

127 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_GET_NEXT_INSTANCE
)(

128 
	tIN
 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©hIn°™˚
,

129 
	tOUT
 
	tUINTN
 *
	tDevi˚P©hIn°™˚Size


148 
	gEFI_DEVICE_PATH_PROTOCOL
*

149 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_CREATE_NODE
)(

150 
	tIN
 
	tUINT8
 
	tNodeTy≥
,

151 
	tIN
 
	tUINT8
 
	tNodeSubTy≥
,

152 
	tIN
 
	tUINT16
 
	tNodeLígth


165 
	gBOOLEAN


166 (
	tEFIAPI
 *
	tEFI_DEVICE_PATH_UTILS_IS_MULTI_INSTANCE
)(

167 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h


174 
EFI_DEVICE_PATH_UTILS_GET_DEVICE_PATH_SIZE
 
	mGëDevi˚P©hSize
;

175 
EFI_DEVICE_PATH_UTILS_DUP_DEVICE_PATH
 
	mDu∂iˇãDevi˚P©h
;

176 
EFI_DEVICE_PATH_UTILS_APPEND_PATH
 
	mAµídDevi˚P©h
;

177 
EFI_DEVICE_PATH_UTILS_APPEND_NODE
 
	mAµídDevi˚Node
;

178 
EFI_DEVICE_PATH_UTILS_APPEND_INSTANCE
 
	mAµídDevi˚P©hIn°™˚
;

179 
EFI_DEVICE_PATH_UTILS_GET_NEXT_INSTANCE
 
	mGëNextDevi˚P©hIn°™˚
;

180 
EFI_DEVICE_PATH_UTILS_IS_MULTI_INSTANCE
 
	mIsDevi˚P©hMu…iIn°™˚
;

181 
EFI_DEVICE_PATH_UTILS_CREATE_NODE
 
	mCª©eDevi˚Node
;

182 } 
	tEFI_DEVICE_PATH_UTILITIES_PROTOCOL
;

184 
EFI_GUID
 
gEfiDevi˚P©hUtûôõsPrŸocﬁGuid
;

	@Dhcp4.h

15 #i‚de‡
__EFI_DHCP4_PROTOCOL_H__


16 
	#__EFI_DHCP4_PROTOCOL_H__


	)

18 
	#EFI_DHCP4_PROTOCOL_GUID
 \

	)

23 
	#EFI_DHCP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

28 
_EFI_DHCP4_PROTOCOL
 
	tEFI_DHCP4_PROTOCOL
;

31 #¥agm®
∑ck
(1)

36 
UINT8
 
	mOpCode
;

40 
UINT8
 
	mLígth
;

44 
UINT8
 
	mD©a
[1];

45 } 
	tEFI_DHCP4_PACKET_OPTION
;

46 #¥agm®
∑ck
()

49 #¥agm®
∑ck
(1)

54 
UINT8
 
	mOpCode
;

55 
UINT8
 
	mHwTy≥
;

56 
UINT8
 
	mHwAddrLí
;

57 
UINT8
 
	mH›s
;

58 
UINT32
 
	mXid
;

59 
UINT16
 
	mSec⁄ds
;

60 
UINT16
 
	mRe£rved
;

61 
EFI_IPv4_ADDRESS
 
	mClõ¡Addr
;

62 
EFI_IPv4_ADDRESS
 
	mYourAddr
;

63 
EFI_IPv4_ADDRESS
 
	mSîvîAddr
;

64 
EFI_IPv4_ADDRESS
 
	mG©ewayAddr
;

65 
UINT8
 
	mClõ¡HwAddr
[16];

66 
CHAR8
 
	mSîvîName
[64];

67 
CHAR8
 
	mBoŸFûeName
[128];

68 }
	tEFI_DHCP4_HEADER
;

69 #¥agm®
∑ck
()

72 #¥agm®
∑ck
(1)

77 
UINT32
 
	mSize
;

82 
UINT32
 
	mLígth
;

88 
EFI_DHCP4_HEADER
 
	mHódî
;

92 
UINT32
 
	mMagik
;

96 
UINT8
 
	mO±i⁄
[1];

97 } 
	mDh˝4
;

98 } 
	tEFI_DHCP4_PACKET
;

99 #¥agm®
∑ck
()

106 
	mDh˝4St›≥d
 = 0x0,

110 
	mDh˝4Inô
 = 0x1,

114 
	mDh˝4Sñe˘ög
 = 0x2,

118 
	mDh˝4Reque°ög
 = 0x3,

122 
	mDh˝4Bound
 = 0x4,

127 
	mDh˝4Ríewög
 = 0x5,

132 
	mDh˝4Rebödög
 = 0x6,

137 
	mDh˝4InôReboŸ
 = 0x7,

142 
	mDh˝4ReboŸög
 = 0x8

143 } 
	tEFI_DHCP4_STATE
;

150 
	mDh˝4SídDiscovî
 = 0x01,

154 
	mDh˝4RcvdOf„r
 = 0x02,

158 
	mDh˝4Sñe˘Of„r
 = 0x03,

162 
	mDh˝4SídReque°
 = 0x04,

166 
	mDh˝4RcvdAck
 = 0x05,

170 
	mDh˝4RcvdNak
 = 0x06,

174 
	mDh˝4SídDe˛öe
 = 0x07,

178 
	mDh˝4BoundCom∂ëed
 = 0x08,

183 
	mDh˝4E¡îRíewög
 = 0x09,

188 
	mDh˝4E¡îRebödög
 = 0x0a,

194 
	mDh˝4AddªssLo°
 = 0x0b,

200 
	mDh˝4Faû
 = 0x0c

201 } 
	tEFI_DHCP4_EVENT
;

236 
	gEFI_STATUS


237 (
	tEFIAPI
 *
	tEFI_DHCP4_CALLBACK
)(

238 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

239 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

240 
	tIN
 
	tEFI_DHCP4_STATE
 
	tCuºítSèã
,

241 
	tIN
 
	tEFI_DHCP4_EVENT
 
	tDh˝4Evít
,

242 
	tIN
 
	tEFI_DHCP4_PACKET
 *
	tPackë
 
	tOPTIONAL
,

243 
	tOUT
 
	tEFI_DHCP4_PACKET
 **
	tNewPackë
 
	tOPTIONAL


252 
UINT32
 
	mDiscovîTryCou¡
;

258 
UINT32
 *
	mDiscovîTimeout
;

264 
UINT32
 
	mReque°TryCou¡
;

270 
UINT32
 *
	mReque°Timeout
;

278 
EFI_IPv4_ADDRESS
 
	mClõ¡Addªss
;

283 
EFI_DHCP4_CALLBACK
 
	mDh˝4CÆlback
;

287 
VOID
 *
	mCÆlbackC⁄ãxt
;

291 
UINT32
 
	mO±i⁄Cou¡
;

299 
EFI_DHCP4_PACKET_OPTION
 **
	mO±i⁄Li°
;

300 } 
	tEFI_DHCP4_CONFIG_DATA
;

307 
EFI_DHCP4_STATE
 
	mSèã
;

311 
EFI_DHCP4_CONFIG_DATA
 
	mC⁄figD©a
;

316 
EFI_IPv4_ADDRESS
 
	mClõ¡Addªss
;

320 
EFI_MAC_ADDRESS
 
	mClõ¡MacAddªss
;

324 
EFI_IPv4_ADDRESS
 
	mSîvîAddªss
;

329 
EFI_IPv4_ADDRESS
 
	mRouãrAddªss
;

333 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

339 
UINT32
 
	mLó£Time
;

343 
EFI_DHCP4_PACKET
 *
	mRïlyPackë
;

344 } 
	tEFI_DHCP4_MODE_DATA
;

351 
EFI_IPv4_ADDRESS
 
	mLi°íAddªss
;

356 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

361 
UINT16
 
	mLi°íP‹t
;

362 } 
	tEFI_DHCP4_LISTEN_POINT
;

369 
EFI_STATUS
 
	mSètus
;

374 
EFI_EVENT
 
	mCom∂ëi⁄Evít
;

378 
EFI_IPv4_ADDRESS
 
	mRemŸeAddªss
;

382 
UINT16
 
	mRemŸeP‹t
;

386 
EFI_IPv4_ADDRESS
 
	mG©ewayAddªss
;

390 
UINT32
 
	mLi°íPoötCou¡
;

395 
EFI_DHCP4_LISTEN_POINT
 *
	mLi°íPoöts
;

399 
UINT32
 
	mTimeoutVÆue
;

403 
EFI_DHCP4_PACKET
 *
	mPackë
;

407 
UINT32
 
	mRe•⁄£Cou¡
;

411 
EFI_DHCP4_PACKET
 *
	mRe•⁄£Li°
;

412 } 
	tEFI_DHCP4_TRANSMIT_RECEIVE_TOKEN
;

429 
	gEFI_STATUS


430 (
	tEFIAPI
 *
	tEFI_DHCP4_GET_MODE_DATA
)(

431 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

432 
	tOUT
 
	tEFI_DHCP4_MODE_DATA
 *
	tDh˝4ModeD©a


484 
	gEFI_STATUS


485 (
	tEFIAPI
 *
	tEFI_DHCP4_CONFIGURE
)(

486 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

487 
	tIN
 
	tEFI_DHCP4_CONFIG_DATA
 *
	tDh˝4CfgD©a
 
	tOPTIONAL


533 
	gEFI_STATUS


534 (
	tEFIAPI
 *
	tEFI_DHCP4_START
)(

535 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

536 
	tIN
 
	tEFI_EVENT
 
	tCom∂ëi⁄Evít
 
	tOPTIONAL


578 
	gEFI_STATUS


579 (
	tEFIAPI
 *
	tEFI_DHCP4_RENEW_REBIND
)(

580 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

581 
	tIN
 
	tBOOLEAN
 
	tRebödReque°
,

582 
	tIN
 
	tEFI_EVENT
 
	tCom∂ëi⁄Evít
 
	tOPTIONAL


607 
	gEFI_STATUS


608 (
	tEFIAPI
 *
	tEFI_DHCP4_RELEASE
)(

609 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis


628 
	gEFI_STATUS


629 (
	tEFIAPI
 *
	tEFI_DHCP4_STOP
)(

630 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis


669 
	gEFI_STATUS


670 (
	tEFIAPI
 *
	tEFI_DHCP4_BUILD
)(

671 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

672 
	tIN
 
	tEFI_DHCP4_PACKET
 *
	tSìdPackë
,

673 
	tIN
 
	tUINT32
 
	tDñëeCou¡
,

674 
	tIN
 
	tUINT8
 *
	tDñëeLi°
 
	tOPTIONAL
,

675 
	tIN
 
	tUINT32
 
	tAµídCou¡
,

676 
	tIN
 
	tEFI_DHCP4_PACKET_OPTION
 *
	tAµídLi°
[] 
	tOPTIONAL
,

677 
	tOUT
 
	tEFI_DHCP4_PACKET
 **
	tNewPackë


707 
	gEFI_STATUS


708 (
	tEFIAPI
 *
	tEFI_DHCP4_TRANSMIT_RECEIVE
)(

709 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

710 
	tIN
 
	tEFI_DHCP4_TRANSMIT_RECEIVE_TOKEN
 *
	tTokí


747 
	gEFI_STATUS


748 (
	tEFIAPI
 *
	tEFI_DHCP4_PARSE
)(

749 
	tIN
 
	tEFI_DHCP4_PROTOCOL
 *
	tThis
,

750 
	tIN
 
	tEFI_DHCP4_PACKET
 *
	tPackë
,

751 
	tIN
 
	tOUT
 
	tUINT32
 *
	tO±i⁄Cou¡
,

752 
	tOUT
 
	tEFI_DHCP4_PACKET_OPTION
 *
	tPackëO±i⁄Li°
[] 
	tOPTIONAL


759 
	s_EFI_DHCP4_PROTOCOL
 {

760 
EFI_DHCP4_GET_MODE_DATA
 
	mGëModeD©a
;

761 
EFI_DHCP4_CONFIGURE
 
	mC⁄figuª
;

762 
EFI_DHCP4_START
 
	mSèπ
;

763 
EFI_DHCP4_RENEW_REBIND
 
	mRíewReböd
;

764 
EFI_DHCP4_RELEASE
 
	mRñó£
;

765 
EFI_DHCP4_STOP
 
	mSt›
;

766 
EFI_DHCP4_BUILD
 
	mBuûd
;

767 
EFI_DHCP4_TRANSMIT_RECEIVE
 
	mTønsmôRe˚ive
;

768 
EFI_DHCP4_PARSE
 
	mP¨£
;

771 
EFI_GUID
 
gEfiDh˝4PrŸocﬁGuid
;

772 
EFI_GUID
 
gEfiDh˝4Sîvi˚BödögPrŸocﬁGuid
;

	@Dhcp6.h

13 #i‚de‡
__EFI_DHCP6_PROTOCOL_H__


14 
	#__EFI_DHCP6_PROTOCOL_H__


	)

16 
	#EFI_DHCP6_PROTOCOL_GUID
 \

	)

21 
	#EFI_DHCP6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

26 
_EFI_DHCP6_PROTOCOL
 
	tEFI_DHCP6_PROTOCOL
;

33 
	mDh˝6Inô
 = 0x0,

38 
	mDh˝6Sñe˘ög
 = 0x1,

43 
	mDh˝6Reque°ög
 = 0x2,

49 
	mDh˝6De˛öög
 = 0x3,

54 
	mDh˝6C⁄fúmög
 = 0x4,

59 
	mDh˝6Rñósög
 = 0x5,

63 
	mDh˝6Bound
 = 0x6,

68 
	mDh˝6Ríewög
 = 0x7,

73 
	mDh˝6Rebödög
 = 0x8

74 } 
	tEFI_DHCP6_STATE
;

81 
	mDh˝6SídSﬁicô
 = 0x0,

85 
	mDh˝6RcvdAdvîti£
 = 0x1,

90 
	mDh˝6Sñe˘Advîti£
 = 0x2,

95 
	mDh˝6SídReque°
 = 0x3,

99 
	mDh˝6RcvdRïly
 = 0x4,

103 
	mDh˝6RcvdRec⁄figuª
 = 0x5,

108 
	mDh˝6SídDe˛öe
 = 0x6,

113 
	mDh˝6SídC⁄fúm
 = 0x7,

118 
	mDh˝6SídRñó£
 = 0x8,

123 
	mDh˝6E¡îRíewög
 = 0x9,

128 
	mDh˝6E¡îRebödög
 = 0xa

129 } 
	tEFI_DHCP6_EVENT
;

134 
	#EFI_DHCP6_IA_TYPE_NA
 3

	)

138 
	#EFI_DHCP6_IA_TYPE_TA
 4

	)

140 #¥agm®
∑ck
(1)

150 
UINT16
 
	mOpCode
;

155 
UINT16
 
	mOpLí
;

159 
UINT8
 
	mD©a
[1];

160 } 
	tEFI_DHCP6_PACKET_OPTION
;

170 
UINT32
 
	mMesßgeTy≥
:8;

174 
UINT32
 
	mTønß˘i⁄Id
:24;

175 } 
	tEFI_DHCP6_HEADER
;

185 
UINT32
 
	mSize
;

190 
UINT32
 
	mLígth
;

195 
EFI_DHCP6_HEADER
 
	mHódî
;

199 
UINT8
 
	mO±i⁄
[1];

200 } 
	mDh˝6
;

201 } 
	tEFI_DHCP6_PACKET
;

203 #¥agm®
∑ck
()

209 
UINT16
 
	mLígth
;

213 
UINT8
 
	mDuid
[1];

214 } 
	tEFI_DHCP6_DUID
;

220 
UINT32
 
	mIπ
;

225 
UINT32
 
	mMrc
;

231 
UINT32
 
	mMπ
;

237 
UINT32
 
	mMrd
;

238 } 
	tEFI_DHCP6_RETRANSMISSION
;

244 
EFI_IPv6_ADDRESS
 
	mIpAddªss
;

248 
UINT32
 
	mPª„ºedLi„time
;

252 
UINT32
 
	mVÆidLi„time
;

253 } 
	tEFI_DHCP6_IA_ADDRESS
;

256 
UINT16
 
	mTy≥
;

257 
UINT32
 
	mIaId
;

258 } 
	tEFI_DHCP6_IA_DESCRIPTOR
;

264 
EFI_DHCP6_IA_DESCRIPTOR
 
	mDes¸ùt‹
;

268 
EFI_DHCP6_STATE
 
	mSèã
;

272 
EFI_DHCP6_PACKET
 *
	mRïlyPackë
;

276 
UINT32
 
	mIaAddªssCou¡
;

281 
EFI_DHCP6_IA_ADDRESS
 
	mIaAddªss
[1];

282 } 
	tEFI_DHCP6_IA
;

288 
EFI_DHCP6_DUID
 *
	mClõ¡Id
;

293 
EFI_DHCP6_IA
 *
	mIa
;

294 } 
	tEFI_DHCP6_MODE_DATA
;

317 
	gEFI_STATUS


318 (
	tEFIAPI
 *
	tEFI_DHCP6_CALLBACK
)(

319 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

320 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

321 
	tIN
 
	tEFI_DHCP6_STATE
 
	tCuºítSèã
,

322 
	tIN
 
	tEFI_DHCP6_EVENT
 
	tDh˝6Evít
,

323 
	tIN
 
	tEFI_DHCP6_PACKET
 *
	tPackë
,

324 
	tOUT
 
	tEFI_DHCP6_PACKET
 **
	tNewPackë
 
	tOPTIONAL


332 
EFI_DHCP6_CALLBACK
 
	mDh˝6CÆlback
;

336 
VOID
 *
	mCÆlbackC⁄ãxt
;

340 
UINT32
 
	mO±i⁄Cou¡
;

348 
EFI_DHCP6_PACKET_OPTION
 **
	mO±i⁄Li°
;

352 
EFI_DHCP6_IA_DESCRIPTOR
 
	mIaDes¸ùt‹
;

360 
EFI_EVENT
 
	mIaInfoEvít
;

366 
BOOLEAN
 
	mRec⁄figuªAc˚±
;

372 
BOOLEAN
 
	mR≠idCommô
;

377 
EFI_DHCP6_RETRANSMISSION
 *
	mSﬁicôRëønsmissi⁄
;

378 } 
	tEFI_DHCP6_CONFIG_DATA
;

396 
	gEFI_STATUS


397 (
	tEFIAPI
 *
	tEFI_DHCP6_INFO_CALLBACK
)(

398 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

399 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

400 
	tIN
 
	tEFI_DHCP6_PACKET
 *
	tPackë


420 
	gEFI_STATUS


421 (
	tEFIAPI
 *
	tEFI_DHCP6_GET_MODE_DATA
)(

422 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

423 
	tOUT
 
	tEFI_DHCP6_MODE_DATA
 *
	tDh˝6ModeD©a
 
	tOPTIONAL
,

424 
	tOUT
 
	tEFI_DHCP6_CONFIG_DATA
 *
	tDh˝6C⁄figD©a
 
	tOPTIONAL


464 
	gEFI_STATUS


465 (
	tEFIAPI
 *
	tEFI_DHCP6_CONFIGURE
)(

466 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

467 
	tIN
 
	tEFI_DHCP6_CONFIG_DATA
 *
	tDh˝6CfgD©a
 
	tOPTIONAL


505 
	gEFI_STATUS


506 (
	tEFIAPI
 *
	tEFI_DHCP6_START
)(

507 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis


568 
	gEFI_STATUS


569 (
	tEFIAPI
 *
	tEFI_DHCP6_INFO_REQUEST
)(

570 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

571 
	tIN
 
	tBOOLEAN
 
	tSídClõ¡Id
,

572 
	tIN
 
	tEFI_DHCP6_PACKET_OPTION
 *
	tO±i⁄Reque°
,

573 
	tIN
 
	tUINT32
 
	tO±i⁄Cou¡
,

574 
	tIN
 
	tEFI_DHCP6_PACKET_OPTION
 *
	tO±i⁄Li°
[] 
	tOPTIONAL
,

575 
	tIN
 
	tEFI_DHCP6_RETRANSMISSION
 *
	tRëønsmissi⁄
,

576 
	tIN
 
	tEFI_EVENT
 
	tTimeoutEvít
 
	tOPTIONAL
,

577 
	tIN
 
	tEFI_DHCP6_INFO_CALLBACK
 
	tRïlyCÆlback
,

578 
	tIN
 
	tVOID
 *
	tCÆlbackC⁄ãxt
 
	tOPTIONAL


622 
	gEFI_STATUS


623 (
	tEFIAPI
 *
	tEFI_DHCP6_RENEW_REBIND
)(

624 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

625 
	tIN
 
	tBOOLEAN
 
	tRebödReque°


660 
	gEFI_STATUS


661 (
	tEFIAPI
 *
	tEFI_DHCP6_DECLINE
)(

662 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

663 
	tIN
 
	tUINT32
 
	tAddªssCou¡
,

664 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tAddªs£s


698 
	gEFI_STATUS


699 (
	tEFIAPI
 *
	tEFI_DHCP6_RELEASE
)(

700 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

701 
	tIN
 
	tUINT32
 
	tAddªssCou¡
,

702 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tAddªs£s


723 
	gEFI_STATUS


724 (
	tEFIAPI
 *
	tEFI_DHCP6_STOP
)(

725 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis


753 
	gEFI_STATUS


754 (
	tEFIAPI
 *
	tEFI_DHCP6_PARSE
)(

755 
	tIN
 
	tEFI_DHCP6_PROTOCOL
 *
	tThis
,

756 
	tIN
 
	tEFI_DHCP6_PACKET
 *
	tPackë
,

757 
	tIN
 
	tOUT
 
	tUINT32
 *
	tO±i⁄Cou¡
,

758 
	tOUT
 
	tEFI_DHCP6_PACKET_OPTION
 *
	tPackëO±i⁄Li°
[] 
	tOPTIONAL


765 
	s_EFI_DHCP6_PROTOCOL
 {

766 
EFI_DHCP6_GET_MODE_DATA
 
	mGëModeD©a
;

767 
EFI_DHCP6_CONFIGURE
 
	mC⁄figuª
;

768 
EFI_DHCP6_START
 
	mSèπ
;

769 
EFI_DHCP6_INFO_REQUEST
 
	mInfoReque°
;

770 
EFI_DHCP6_RENEW_REBIND
 
	mRíewReböd
;

771 
EFI_DHCP6_DECLINE
 
	mDe˛öe
;

772 
EFI_DHCP6_RELEASE
 
	mRñó£
;

773 
EFI_DHCP6_STOP
 
	mSt›
;

774 
EFI_DHCP6_PARSE
 
	mP¨£
;

777 
EFI_GUID
 
gEfiDh˝6PrŸocﬁGuid
;

778 
EFI_GUID
 
gEfiDh˝6Sîvi˚BödögPrŸocﬁGuid
;

	@DiskInfo.h

14 #i‚de‡
__DISK_INFO_H__


15 
	#__DISK_INFO_H__


	)

20 
	#EFI_DISK_INFO_PROTOCOL_GUID
 \

	)

28 
_EFI_DISK_INFO_PROTOCOL
 
	tEFI_DISK_INFO_PROTOCOL
;

33 
	#EFI_DISK_INFO_IDE_INTERFACE_GUID
 \

	)

41 
	#EFI_DISK_INFO_SCSI_INTERFACE_GUID
 \

	)

49 
	#EFI_DISK_INFO_USB_INTERFACE_GUID
 \

	)

57 
	#EFI_DISK_INFO_AHCI_INTERFACE_GUID
 \

	)

65 
	#EFI_DISK_INFO_NVME_INTERFACE_GUID
 \

	)

73 
	#EFI_DISK_INFO_UFS_INTERFACE_GUID
 \

	)

81 
	#EFI_DISK_INFO_SD_MMC_INTERFACE_GUID
 \

	)

103 
	gEFI_STATUS


104 (
	tEFIAPI
 *
	tEFI_DISK_INFO_INQUIRY
)(

105 
	tIN
 
	tEFI_DISK_INFO_PROTOCOL
 *
	tThis
,

106 
	tIN
 
	tOUT
 
	tVOID
 *
	tInquúyD©a
,

107 
	tIN
 
	tOUT
 
	tUINT32
 *
	tInquúyD©aSize


129 
	gEFI_STATUS


130 (
	tEFIAPI
 *
	tEFI_DISK_INFO_IDENTIFY
)(

131 
	tIN
 
	tEFI_DISK_INFO_PROTOCOL
 *
	tThis
,

132 
	tIN
 
	tOUT
 
	tVOID
 *
	tIdítifyD©a
,

133 
	tIN
 
	tOUT
 
	tUINT32
 *
	tIdítifyD©aSize


154 
	gEFI_STATUS


155 (
	tEFIAPI
 *
	tEFI_DISK_INFO_SENSE_DATA
)(

156 
	tIN
 
	tEFI_DISK_INFO_PROTOCOL
 *
	tThis
,

157 
	tIN
 
	tOUT
 
	tVOID
 *
	tSí£D©a
,

158 
	tIN
 
	tOUT
 
	tUINT32
 *
	tSí£D©aSize
,

159 
	tOUT
 
	tUINT8
 *
	tSí£D©aNumbî


174 
	gEFI_STATUS


175 (
	tEFIAPI
 *
	tEFI_DISK_INFO_WHICH_IDE
)(

176 
	tIN
 
	tEFI_DISK_INFO_PROTOCOL
 *
	tThis
,

177 
	tOUT
 
	tUINT32
 *
	tIdeCh™√l
,

178 
	tOUT
 
	tUINT32
 *
	tIdeDevi˚


184 
	s_EFI_DISK_INFO_PROTOCOL
 {

189 
EFI_GUID
 
	mI¡îÁ˚
;

194 
EFI_DISK_INFO_INQUIRY
 
	mInquúy
;

199 
EFI_DISK_INFO_IDENTIFY
 
	mIdítify
;

204 
EFI_DISK_INFO_SENSE_DATA
 
	mSí£D©a
;

208 
EFI_DISK_INFO_WHICH_IDE
 
	mWhichIde
;

211 
EFI_GUID
 
gEfiDiskInfoPrŸocﬁGuid
;

213 
EFI_GUID
 
gEfiDiskInfoIdeI¡îÁ˚Guid
;

214 
EFI_GUID
 
gEfiDiskInfoScsiI¡îÁ˚Guid
;

215 
EFI_GUID
 
gEfiDiskInfoUsbI¡îÁ˚Guid
;

216 
EFI_GUID
 
gEfiDiskInfoAhciI¡îÁ˚Guid
;

217 
EFI_GUID
 
gEfiDiskInfoNvmeI¡îÁ˚Guid
;

218 
EFI_GUID
 
gEfiDiskInfoUfsI¡îÁ˚Guid
;

219 
EFI_GUID
 
gEfiDiskInfoSdMmcI¡îÁ˚Guid
;

	@DiskIo.h

13 #i‚de‡
__DISK_IO_H__


14 
	#__DISK_IO_H__


	)

16 
	#EFI_DISK_IO_PROTOCOL_GUID
 \

	)

24 
	#DISK_IO_PROTOCOL
 
EFI_DISK_IO_PROTOCOL_GUID


	)

26 
_EFI_DISK_IO_PROTOCOL
 
	tEFI_DISK_IO_PROTOCOL
;

31 
EFI_DISK_IO_PROTOCOL
 
	tEFI_DISK_IO
;

51 
	gEFI_STATUS


52 (
	tEFIAPI
 *
	tEFI_DISK_READ
)(

53 
	tIN
 
	tEFI_DISK_IO_PROTOCOL
 *
	tThis
,

54 
	tIN
 
	tUINT32
 
	tMedüId
,

55 
	tIN
 
	tUINT64
 
	tOff£t
,

56 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

57 
	tOUT
 
	tVOID
 *
	tBuf„r


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_DISK_WRITE
)(

81 
	tIN
 
	tEFI_DISK_IO_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tUINT32
 
	tMedüId
,

83 
	tIN
 
	tUINT64
 
	tOff£t
,

84 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

85 
	tIN
 
	tVOID
 *
	tBuf„r


88 
	#EFI_DISK_IO_PROTOCOL_REVISION
 0x00010000

	)

93 
	#EFI_DISK_IO_INTERFACE_REVISION
 
EFI_DISK_IO_PROTOCOL_REVISION


	)

98 
	s_EFI_DISK_IO_PROTOCOL
 {

104 
UINT64
 
	mRevisi⁄
;

105 
EFI_DISK_READ
 
	mRódDisk
;

106 
EFI_DISK_WRITE
 
	mWrôeDisk
;

109 
EFI_GUID
 
gEfiDiskIoPrŸocﬁGuid
;

	@DiskIo2.h

12 #i‚de‡
__DISK_IO2_H__


13 
	#__DISK_IO2_H__


	)

15 
	#EFI_DISK_IO2_PROTOCOL_GUID
 \

	)

20 
_EFI_DISK_IO2_PROTOCOL
 
	tEFI_DISK_IO2_PROTOCOL
;

33 
EFI_EVENT
 
	mEvít
;

38 
EFI_STATUS
 
	mTønß˘i⁄Sètus
;

39 } 
	tEFI_DISK_IO2_TOKEN
;

51 
	gEFI_STATUS


52 (
	tEFIAPI
 *
	tEFI_DISK_CANCEL_EX
) (

53 
	tIN
 
	tEFI_DISK_IO2_PROTOCOL
 *
	tThis


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_DISK_READ_EX
) (

81 
	tIN
 
	tEFI_DISK_IO2_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tUINT32
 
	tMedüId
,

83 
	tIN
 
	tUINT64
 
	tOff£t
,

84 
	tIN
 
	tOUT
 
	tEFI_DISK_IO2_TOKEN
 *
	tTokí
,

85 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

86 
	tOUT
 
	tVOID
 *
	tBuf„r


112 
	gEFI_STATUS


113 (
	tEFIAPI
 *
	tEFI_DISK_WRITE_EX
) (

114 
	tIN
 
	tEFI_DISK_IO2_PROTOCOL
 *
	tThis
,

115 
	tIN
 
	tUINT32
 
	tMedüId
,

116 
	tIN
 
	tUINT64
 
	tOff£t
,

117 
	tIN
 
	tOUT
 
	tEFI_DISK_IO2_TOKEN
 *
	tTokí
,

118 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

119 
	tIN
 
	tVOID
 *
	tBuf„r


140 
	gEFI_STATUS


141 (
	tEFIAPI
 *
	tEFI_DISK_FLUSH_EX
) (

142 
	tIN
 
	tEFI_DISK_IO2_PROTOCOL
 *
	tThis
,

143 
	tIN
 
	tOUT
 
	tEFI_DISK_IO2_TOKEN
 *
	tTokí


146 
	#EFI_DISK_IO2_PROTOCOL_REVISION
 0x00020000

	)

151 
	s_EFI_DISK_IO2_PROTOCOL
 {

157 
UINT64
 
	mRevisi⁄
;

158 
EFI_DISK_CANCEL_EX
 
	mC™˚l
;

159 
EFI_DISK_READ_EX
 
	mRódDiskEx
;

160 
EFI_DISK_WRITE_EX
 
	mWrôeDiskEx
;

161 
EFI_DISK_FLUSH_EX
 
	mFlushDiskEx
;

164 
EFI_GUID
 
gEfiDiskIo2PrŸocﬁGuid
;

	@Dns4.h

15 #i‚de‡
__EFI_DNS4_PROTOCOL_H__


16 
	#__EFI_DNS4_PROTOCOL_H__


	)

18 
	#EFI_DNS4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

23 
	#EFI_DNS4_PROTOCOL_GUID
 \

	)

28 
_EFI_DNS4_PROTOCOL
 
	tEFI_DNS4_PROTOCOL
;

42 
UINTN
 
	mDnsSîvîLi°Cou¡
;

54 
EFI_IPv4_ADDRESS
 *
	mDnsSîvîLi°
;

58 
BOOLEAN
 
	mU£DeÁu…Sëtög
;

63 
BOOLEAN
 
	mE«bÀDnsCache
;

71 
UINT8
 
	mPrŸocﬁ
;

75 
EFI_IPv4_ADDRESS
 
	mSèti⁄Ip
;

79 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

83 
UINT16
 
	mLoˇlP‹t
;

87 
UINT32
 
	mRëryCou¡
;

92 
UINT32
 
	mRëryI¡îvÆ
;

93 } 
	tEFI_DNS4_CONFIG_DATA
;

103 
CHAR16
 *
	mHo°Name
;

107 
EFI_IPv4_ADDRESS
 *
	mIpAddªss
;

115 
UINT32
 
	mTimeout
;

116 } 
	tEFI_DNS4_CACHE_ENTRY
;

125 
EFI_DNS4_CONFIG_DATA
 
	mDnsC⁄figD©a
;

130 
UINT32
 
	mDnsSîvîCou¡
;

138 
EFI_IPv4_ADDRESS
 *
	mDnsSîvîLi°
;

142 
UINT32
 
	mDnsCacheCou¡
;

148 
EFI_DNS4_CACHE_ENTRY
 *
	mDnsCacheLi°
;

149 } 
	tEFI_DNS4_MODE_DATA
;

158 
UINT32
 
	mIpCou¡
;

162 
EFI_IPv4_ADDRESS
 *
	mIpLi°
;

163 } 
	tDNS_HOST_TO_ADDR_DATA
;

173 
CHAR16
 *
	mHo°Name
;

174 } 
	tDNS_ADDR_TO_HOST_DATA
;

183 
CHAR8
 *
	mQName
;

187 
UINT16
 
	mQTy≥
;

191 
UINT16
 
	mQCœss
;

197 
UINT32
 
	mTTL
;

201 
UINT16
 
	mD©aLígth
;

206 
CHAR8
 *
	mRD©a
;

207 } 
	tDNS_RESOURCE_RECORD
;

216 
UINTN
 
	mRRCou¡
;

221 
DNS_RESOURCE_RECORD
 *
	mRRLi°
;

222 } 
	tDNS_GENERAL_LOOKUP_DATA
;

232 
EFI_EVENT
 
	mEvít
;

242 
EFI_STATUS
 
	mSètus
;

247 
UINT32
 
	mRëryCou¡
;

252 
UINT32
 
	mRëryI¡îvÆ
;

261 
DNS_HOST_TO_ADDR_DATA
 *
	mH2AD©a
;

266 
DNS_ADDR_TO_HOST_DATA
 *
	mA2HD©a
;

271 
DNS_GENERAL_LOOKUP_DATA
 *
	mGLookupD©a
;

272 } 
	mR•D©a
;

273 } 
	tEFI_DNS4_COMPLETION_TOKEN
;

291 
	gEFI_STATUS


292 (
	tEFIAPI
 *
	tEFI_DNS4_GET_MODE_DATA
) (

293 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

294 
	tOUT
 
	tEFI_DNS4_MODE_DATA
 *
	tDnsModeD©a


323 
	gEFI_STATUS


324 (
	tEFIAPI
 *
	tEFI_DNS4_CONFIGURE
) (

325 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

326 
	tIN
 
	tEFI_DNS4_CONFIG_DATA
 *
	tDnsC⁄figD©a


350 
	gEFI_STATUS


351 (
	tEFIAPI
 *
	tEFI_DNS4_HOST_NAME_TO_IP
) (

352 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

353 
	tIN
 
	tCHAR16
 *
	tHo°Name
,

354 
	tIN
 
	tEFI_DNS4_COMPLETION_TOKEN
 *
	tTokí


380 
	gEFI_STATUS


381 (
	tEFIAPI
 *
	tEFI_DNS4_IP_TO_HOST_NAME
) (

382 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

383 
	tIN
 
	tEFI_IPv4_ADDRESS
 
	tIpAddªss
,

384 
	tIN
 
	tEFI_DNS4_COMPLETION_TOKEN
 *
	tTokí


415 
	gEFI_STATUS


416 (
	tEFIAPI
 *
	tEFI_DNS4_GENERAL_LOOKUP
) (

417 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

418 
	tIN
 
	tCHAR8
 *
	tQName
,

419 
	tIN
 
	tUINT16
 
	tQTy≥
,

420 
	tIN
 
	tUINT16
 
	tQCœss
,

421 
	tIN
 
	tEFI_DNS4_COMPLETION_TOKEN
 *
	tTokí


451 
	gEFI_STATUS


452 (
	tEFIAPI
 *
	tEFI_DNS4_UPDATE_DNS_CACHE
) (

453 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

454 
	tIN
 
	tBOOLEAN
 
	tDñëeFœg
,

455 
	tIN
 
	tBOOLEAN
 
	tOvîride
,

456 
	tIN
 
	tEFI_DNS4_CACHE_ENTRY
 
	tDnsCacheE¡ry


481 
	gEFI_STATUS


482 (
	tEFIAPI
 *
	tEFI_DNS4_POLL
) (

483 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis


512 
	gEFI_STATUS


513 (
	tEFIAPI
 *
	tEFI_DNS4_CANCEL
) (

514 
	tIN
 
	tEFI_DNS4_PROTOCOL
 *
	tThis
,

515 
	tIN
 
	tEFI_DNS4_COMPLETION_TOKEN
 *
	tTokí


523 
	s_EFI_DNS4_PROTOCOL
 {

524 
EFI_DNS4_GET_MODE_DATA
 
	mGëModeD©a
;

525 
EFI_DNS4_CONFIGURE
 
	mC⁄figuª
;

526 
EFI_DNS4_HOST_NAME_TO_IP
 
	mHo°NameToIp
;

527 
EFI_DNS4_IP_TO_HOST_NAME
 
	mIpToHo°Name
;

528 
EFI_DNS4_GENERAL_LOOKUP
 
	mGíîÆLookUp
;

529 
EFI_DNS4_UPDATE_DNS_CACHE
 
	mUpd©eDnsCache
;

530 
EFI_DNS4_POLL
 
	mPﬁl
;

531 
EFI_DNS4_CANCEL
 
	mC™˚l
;

534 
EFI_GUID
 
gEfiDns4Sîvi˚BödögPrŸocﬁGuid
;

535 
EFI_GUID
 
gEfiDns4PrŸocﬁGuid
;

	@Dns6.h

15 #i‚de‡
__EFI_DNS6_PROTOCOL_H__


16 
	#__EFI_DNS6_PROTOCOL_H__


	)

18 
	#EFI_DNS6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

23 
	#EFI_DNS6_PROTOCOL_GUID
 \

	)

28 
_EFI_DNS6_PROTOCOL
 
	tEFI_DNS6_PROTOCOL
;

38 
BOOLEAN
 
	mE«bÀDnsCache
;

44 
UINT8
 
	mPrŸocﬁ
;

50 
EFI_IPv6_ADDRESS
 
	mSèti⁄Ip
;

54 
UINT16
 
	mLoˇlP‹t
;

63 
UINT32
 
	mDnsSîvîCou¡
;

75 
EFI_IPv6_ADDRESS
 *
	mDnsSîvîLi°
;

79 
UINT32
 
	mRëryCou¡
;

83 
UINT32
 
	mRëryI¡îvÆ
;

84 } 
	tEFI_DNS6_CONFIG_DATA
;

93 
CHAR16
 *
	mHo°Name
;

97 
EFI_IPv6_ADDRESS
 *
	mIpAddªss
;

104 
UINT32
 
	mTimeout
;

105 } 
	tEFI_DNS6_CACHE_ENTRY
;

114 
EFI_DNS6_CONFIG_DATA
 
	mDnsC⁄figD©a
;

118 
UINT32
 
	mDnsSîvîCou¡
;

125 
EFI_IPv6_ADDRESS
 *
	mDnsSîvîLi°
;

129 
UINT32
 
	mDnsCacheCou¡
;

135 
EFI_DNS6_CACHE_ENTRY
 *
	mDnsCacheLi°
;

136 } 
	tEFI_DNS6_MODE_DATA
;

145 
UINT32
 
	mIpCou¡
;

149 
EFI_IPv6_ADDRESS
 *
	mIpLi°
;

150 } 
	tDNS6_HOST_TO_ADDR_DATA
;

160 
CHAR16
 *
	mHo°Name
;

161 } 
	tDNS6_ADDR_TO_HOST_DATA
;

170 
CHAR8
 *
	mQName
;

174 
UINT16
 
	mQTy≥
;

178 
UINT16
 
	mQCœss
;

184 
UINT32
 
	mTTL
;

188 
UINT16
 
	mD©aLígth
;

193 
CHAR8
 *
	mRD©a
;

194 } 
	tDNS6_RESOURCE_RECORD
;

203 
UINTN
 
	mRRCou¡
;

208 
DNS6_RESOURCE_RECORD
 *
	mRRLi°
;

209 } 
	tDNS6_GENERAL_LOOKUP_DATA
;

219 
EFI_EVENT
 
	mEvít
;

229 
EFI_STATUS
 
	mSètus
;

234 
UINT32
 
	mRëryCou¡
;

240 
UINT32
 
	mRëryI¡îvÆ
;

249 
DNS6_HOST_TO_ADDR_DATA
 *
	mH2AD©a
;

254 
DNS6_ADDR_TO_HOST_DATA
 *
	mA2HD©a
;

259 
DNS6_GENERAL_LOOKUP_DATA
 *
	mGLookupD©a
;

260 } 
	mR•D©a
;

261 } 
	tEFI_DNS6_COMPLETION_TOKEN
;

280 
	gEFI_STATUS


281 (
	tEFIAPI
 * 
	tEFI_DNS6_GET_MODE_DATA
)(

282 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

283 
	tOUT
 
	tEFI_DNS6_MODE_DATA
 *
	tDnsModeD©a


310 
	gEFI_STATUS


311 (
	tEFIAPI
 * 
	tEFI_DNS6_CONFIGURE
)(

312 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

313 
	tIN
 
	tEFI_DNS6_CONFIG_DATA
 *
	tDnsC⁄figD©a


339 
	gEFI_STATUS


340 (
	tEFIAPI
 *
	tEFI_DNS6_HOST_NAME_TO_IP
) (

341 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

342 
	tIN
 
	tCHAR16
 *
	tHo°Name
,

343 
	tIN
 
	tEFI_DNS6_COMPLETION_TOKEN
 *
	tTokí


370 
	gEFI_STATUS


371 (
	tEFIAPI
 *
	tEFI_DNS6_IP_TO_HOST_NAME
) (

372 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

373 
	tIN
 
	tEFI_IPv6_ADDRESS
 
	tIpAddªss
,

374 
	tIN
 
	tEFI_DNS6_COMPLETION_TOKEN
 *
	tTokí


407 
	gEFI_STATUS


408 (
	tEFIAPI
 *
	tEFI_DNS6_GENERAL_LOOKUP
) (

409 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

410 
	tIN
 
	tCHAR8
 *
	tQName
,

411 
	tIN
 
	tUINT16
 
	tQTy≥
,

412 
	tIN
 
	tUINT16
 
	tQCœss
,

413 
	tIN
 
	tEFI_DNS6_COMPLETION_TOKEN
 *
	tTokí


444 
	gEFI_STATUS


445 (
	tEFIAPI
 *
	tEFI_DNS6_UPDATE_DNS_CACHE
) (

446 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

447 
	tIN
 
	tBOOLEAN
 
	tDñëeFœg
,

448 
	tIN
 
	tBOOLEAN
 
	tOvîride
,

449 
	tIN
 
	tEFI_DNS6_CACHE_ENTRY
 
	tDnsCacheE¡ry


476 
	gEFI_STATUS


477 (
	tEFIAPI
 *
	tEFI_DNS6_POLL
) (

478 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis


508 
	gEFI_STATUS


509 (
	tEFIAPI
 *
	tEFI_DNS6_CANCEL
) (

510 
	tIN
 
	tEFI_DNS6_PROTOCOL
 *
	tThis
,

511 
	tIN
 
	tEFI_DNS6_COMPLETION_TOKEN
 *
	tTokí


519 
	s_EFI_DNS6_PROTOCOL
 {

520 
EFI_DNS6_GET_MODE_DATA
 
	mGëModeD©a
;

521 
EFI_DNS6_CONFIGURE
 
	mC⁄figuª
;

522 
EFI_DNS6_HOST_NAME_TO_IP
 
	mHo°NameToIp
;

523 
EFI_DNS6_IP_TO_HOST_NAME
 
	mIpToHo°Name
;

524 
EFI_DNS6_GENERAL_LOOKUP
 
	mGíîÆLookUp
;

525 
EFI_DNS6_UPDATE_DNS_CACHE
 
	mUpd©eDnsCache
;

526 
EFI_DNS6_POLL
 
	mPﬁl
;

527 
EFI_DNS6_CANCEL
 
	mC™˚l
;

530 
EFI_GUID
 
gEfiDns6Sîvi˚BödögPrŸocﬁGuid
;

531 
EFI_GUID
 
gEfiDns6PrŸocﬁGuid
;

	@DriverBinding.h

12 #i‚de‡
__EFI_DRIVER_BINDING_H__


13 
	#__EFI_DRIVER_BINDING_H__


	)

18 
	#EFI_DRIVER_BINDING_PROTOCOL_GUID
 \

	)

23 
_EFI_DRIVER_BINDING_PROTOCOL
 
	tEFI_DRIVER_BINDING_PROTOCOL
;

68 
	gEFI_STATUS


69 (
	tEFIAPI
 *
	tEFI_DRIVER_BINDING_SUPPORTED
)(

70 
	tIN
 
	tEFI_DRIVER_BINDING_PROTOCOL
 *
	tThis
,

71 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

72 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tRemaöögDevi˚P©h
 
	tOPTIONAL


111 
	gEFI_STATUS


112 (
	tEFIAPI
 *
	tEFI_DRIVER_BINDING_START
)(

113 
	tIN
 
	tEFI_DRIVER_BINDING_PROTOCOL
 *
	tThis
,

114 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

115 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tRemaöögDevi˚P©h
 
	tOPTIONAL


145 
	gEFI_STATUS


146 (
	tEFIAPI
 *
	tEFI_DRIVER_BINDING_STOP
)(

147 
	tIN
 
	tEFI_DRIVER_BINDING_PROTOCOL
 *
	tThis
,

148 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

149 
	tIN
 
	tUINTN
 
	tNumbîOfChûdªn
,

150 
	tIN
 
	tEFI_HANDLE
 *
	tChûdH™dÀBuf„r
 
	tOPTIONAL


157 
	s_EFI_DRIVER_BINDING_PROTOCOL
 {

158 
EFI_DRIVER_BINDING_SUPPORTED
 
	mSuµ‹ãd
;

159 
EFI_DRIVER_BINDING_START
 
	mSèπ
;

160 
EFI_DRIVER_BINDING_STOP
 
	mSt›
;

174 
UINT32
 
	mVîsi⁄
;

180 
EFI_HANDLE
 
	mImageH™dÀ
;

190 
EFI_HANDLE
 
	mDrivîBödögH™dÀ
;

193 
EFI_GUID
 
gEfiDrivîBödögPrŸocﬁGuid
;

	@DriverConfiguration.h

9 #i‚de‡
__EFI_DRIVER_CONFIGURATION_H__


10 
	#__EFI_DRIVER_CONFIGURATION_H__


	)

12 
	~<PrŸocﬁ/DrivîC⁄figuøti⁄2.h
>

17 
	#EFI_DRIVER_CONFIGURATION_PROTOCOL_GUID
 \

	)

22 
_EFI_DRIVER_CONFIGURATION_PROTOCOL
 
	tEFI_DRIVER_CONFIGURATION_PROTOCOL
;

67 
	gEFI_STATUS


68 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION_SET_OPTIONS
)(

69 
	tIN
 
	tEFI_DRIVER_CONFIGURATION_PROTOCOL
 *
	tThis
,

70 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

71 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

72 
	tIN
 
	tCHAR8
 *
	tL™guage
,

73 
	tOUT
 
	tEFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
 *
	tA˘i⁄Requúed


106 
	gEFI_STATUS


107 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION_OPTIONS_VALID
)(

108 
	tIN
 
	tEFI_DRIVER_CONFIGURATION_PROTOCOL
 *
	tThis
,

109 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

110 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL


133 
	gEFI_STATUS


134 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION_FORCE_DEFAULTS
)(

135 
	tIN
 
	tEFI_DRIVER_CONFIGURATION_PROTOCOL
 *
	tThis
,

136 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

137 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

138 
	tIN
 
	tUINT32
 
	tDeÁu…Ty≥
,

139 
	tOUT
 
	tEFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
 *
	tA˘i⁄Requúed


146 
	s_EFI_DRIVER_CONFIGURATION_PROTOCOL
 {

147 
EFI_DRIVER_CONFIGURATION_SET_OPTIONS
 
	mSëO±i⁄s
;

148 
EFI_DRIVER_CONFIGURATION_OPTIONS_VALID
 
	mO±i⁄sVÆid
;

149 
EFI_DRIVER_CONFIGURATION_FORCE_DEFAULTS
 
	mF‹˚DeÁu…s
;

155 
CHAR8
 *
	mSuµ‹ãdL™guages
;

159 
EFI_GUID
 
gEfiDrivîC⁄figuøti⁄PrŸocﬁGuid
;

	@DriverConfiguration2.h

9 #i‚de‡
__EFI_DRIVER_CONFIGURATION2_H__


10 
	#__EFI_DRIVER_CONFIGURATION2_H__


	)

15 
	#EFI_DRIVER_CONFIGURATION2_PROTOCOL_GUID
 \

	)

20 
_EFI_DRIVER_CONFIGURATION2_PROTOCOL
 
	tEFI_DRIVER_CONFIGURATION2_PROTOCOL
;

27 
	mEfiDrivîC⁄figuøti⁄A˘i⁄N⁄e
 = 0,

32 
	mEfiDrivîC⁄figuøti⁄A˘i⁄St›C⁄åﬁÀr
 = 1,

37 
	mEfiDrivîC⁄figuøti⁄A˘i⁄Re°¨tC⁄åﬁÀr
 = 2,

42 
	mEfiDrivîC⁄figuøti⁄A˘i⁄Re°¨tPœtf‹m
 = 3,

43 
	mEfiDrivîC⁄figuøti⁄A˘i⁄Maximum


44 } 
	tEFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
;

46 
	#EFI_DRIVER_CONFIGURATION_SAFE_DEFAULTS
 0x00000000

	)

47 
	#EFI_DRIVER_CONFIGURATION_MANUFACTURING_DEFAULTS
 0x00000001

	)

48 
	#EFI_DRIVER_CONFIGURATION_CUSTOM_DEFAULTS
 0x00000002

	)

49 
	#EFI_DRIVER_CONFIGURATION_PERORMANCE_DEFAULTS
 0x00000003

	)

93 
	gEFI_STATUS


94 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION2_SET_OPTIONS
)(

95 
	tIN
 
	tEFI_DRIVER_CONFIGURATION2_PROTOCOL
 *
	tThis
,

96 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

97 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

98 
	tIN
 
	tCHAR8
 *
	tL™guage
,

99 
	tOUT
 
	tEFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
 *
	tA˘i⁄Requúed


132 
	gEFI_STATUS


133 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION2_OPTIONS_VALID
)(

134 
	tIN
 
	tEFI_DRIVER_CONFIGURATION2_PROTOCOL
 *
	tThis
,

135 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

136 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL


159 
	gEFI_STATUS


160 (
	tEFIAPI
 *
	tEFI_DRIVER_CONFIGURATION2_FORCE_DEFAULTS
)(

161 
	tIN
 
	tEFI_DRIVER_CONFIGURATION2_PROTOCOL
 *
	tThis
,

162 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

163 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

164 
	tIN
 
	tUINT32
 
	tDeÁu…Ty≥
,

165 
	tOUT
 
	tEFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
 *
	tA˘i⁄Requúed


171 
	s_EFI_DRIVER_CONFIGURATION2_PROTOCOL
 {

172 
EFI_DRIVER_CONFIGURATION2_SET_OPTIONS
 
	mSëO±i⁄s
;

173 
EFI_DRIVER_CONFIGURATION2_OPTIONS_VALID
 
	mO±i⁄sVÆid
;

174 
EFI_DRIVER_CONFIGURATION2_FORCE_DEFAULTS
 
	mF‹˚DeÁu…s
;

179 
CHAR8
 *
	mSuµ‹ãdL™guages
;

182 
EFI_GUID
 
gEfiDrivîC⁄figuøti⁄2PrŸocﬁGuid
;

	@DriverDiagnostics.h

9 #i‚de‡
__EFI_DRIVER_DIAGNOSTICS_H__


10 
	#__EFI_DRIVER_DIAGNOSTICS_H__


	)

15 
	#EFI_DRIVER_DIAGNOSTICS_PROTOCOL_GUID
 \

	)

20 
_EFI_DRIVER_DIAGNOSTICS_PROTOCOL
 
	tEFI_DRIVER_DIAGNOSTICS_PROTOCOL
;

26 
	mEfiDrivîDügno°icTy≥Sènd¨d
 = 0,

31 
	mEfiDrivîDügno°icTy≥Exãnded
 = 1,

36 
	mEfiDrivîDügno°icTy≥M™uÁ˘urög
= 2,

42 
	mEfiDrivîDügno°icTy≥C™˚l
 = 3,

43 
	mEfiDrivîDügno°icTy≥Maximum


44 } 
	tEFI_DRIVER_DIAGNOSTIC_TYPE
;

99 
	gEFI_STATUS


100 (
	tEFIAPI
 *
	tEFI_DRIVER_DIAGNOSTICS_RUN_DIAGNOSTICS
)(

101 
	tIN
 
	tEFI_DRIVER_DIAGNOSTICS_PROTOCOL
 *
	tThis
,

102 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

103 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

104 
	tIN
 
	tEFI_DRIVER_DIAGNOSTIC_TYPE
 
	tDügno°icTy≥
,

105 
	tIN
 
	tCHAR8
 *
	tL™guage
,

106 
	tOUT
 
	tEFI_GUID
 **
	tEº‹Ty≥
,

107 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

108 
	tOUT
 
	tCHAR16
 **
	tBuf„r


114 
	s_EFI_DRIVER_DIAGNOSTICS_PROTOCOL
 {

115 
EFI_DRIVER_DIAGNOSTICS_RUN_DIAGNOSTICS
 
	mRunDügno°ics
;

120 
CHAR8
 *
	mSuµ‹ãdL™guages
;

123 
EFI_GUID
 
gEfiDrivîDügno°icsPrŸocﬁGuid
;

	@DriverDiagnostics2.h

9 #i‚de‡
__EFI_DRIVER_DIAGNOSTICS2_H__


10 
	#__EFI_DRIVER_DIAGNOSTICS2_H__


	)

12 
	~<PrŸocﬁ/DrivîDügno°ics.h
>

14 
	#EFI_DRIVER_DIAGNOSTICS2_PROTOCOL_GUID
 \

	)

19 
_EFI_DRIVER_DIAGNOSTICS2_PROTOCOL
 
	tEFI_DRIVER_DIAGNOSTICS2_PROTOCOL
;

79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_DRIVER_DIAGNOSTICS2_RUN_DIAGNOSTICS
)(

81 
	tIN
 
	tEFI_DRIVER_DIAGNOSTICS2_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

83 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

84 
	tIN
 
	tEFI_DRIVER_DIAGNOSTIC_TYPE
 
	tDügno°icTy≥
,

85 
	tIN
 
	tCHAR8
 *
	tL™guage
,

86 
	tOUT
 
	tEFI_GUID
 **
	tEº‹Ty≥
,

87 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

88 
	tOUT
 
	tCHAR16
 **
	tBuf„r


94 
	s_EFI_DRIVER_DIAGNOSTICS2_PROTOCOL
 {

95 
EFI_DRIVER_DIAGNOSTICS2_RUN_DIAGNOSTICS
 
	mRunDügno°ics
;

100 
CHAR8
 *
	mSuµ‹ãdL™guages
;

103 
EFI_GUID
 
gEfiDrivîDügno°ics2PrŸocﬁGuid
;

	@DriverFamilyOverride.h

9 #i‚de‡
__EFI_DRIVER_FAMILY_OVERRIDE_H__


10 
	#__EFI_DRIVER_FAMILY_OVERRIDE_H__


	)

12 
	#EFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL_GUID
 \

	)

17 
_EFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL
 
	tEFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL
;

38 
	gUINT32


39 (
	tEFIAPI
 *
	tEFI_DRIVER_FAMILY_OVERRIDE_GET_VERSION
)(

40 
	tIN
 
	tEFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL
 *
	tThis


54 
	s_EFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL
 {

55 
EFI_DRIVER_FAMILY_OVERRIDE_GET_VERSION
 
	mGëVîsi⁄
;

58 
EFI_GUID
 
gEfiDrivîFamûyOvîridePrŸocﬁGuid
;

	@DriverHealth.h

32 #i‚de‡
__EFI_DRIVER_HEALTH_H__


33 
	#__EFI_DRIVER_HEALTH_H__


	)

35 
	#EFI_DRIVER_HEALTH_PROTOCOL_GUID
 \

	)

40 
_EFI_DRIVER_HEALTH_PROTOCOL
 
	tEFI_DRIVER_HEALTH_PROTOCOL
;

46 
	mEfiDrivîHó…hSètusHó…hy
,

47 
	mEfiDrivîHó…hSètusRïaúRequúed
,

48 
	mEfiDrivîHó…hSètusC⁄figuøti⁄Requúed
,

49 
	mEfiDrivîHó…hSètusFaûed
,

50 
	mEfiDrivîHó…hSètusRec⁄√˘Requúed
,

51 
	mEfiDrivîHó…hSètusReboŸRequúed


52 } 
	tEFI_DRIVER_HEALTH_STATUS
;

58 
EFI_HII_HANDLE
 
	mHiiH™dÀ
;

59 
EFI_STRING_ID
 
	mSåögId
;

69 
UINT64
 
	mMesßgeCode
;

70 } 
	tEFI_DRIVER_HEALTH_HII_MESSAGE
;

83 
	gEFI_STATUS


84 (
	tEFIAPI
 *
	tEFI_DRIVER_HEALTH_REPAIR_NOTIFY
)(

85 
	tIN
 
	tUINTN
 
	tVÆue
,

86 
	tIN
 
	tUINTN
 
	tLimô


176 
	gEFI_STATUS


177 (
	tEFIAPI
 *
	tEFI_DRIVER_HEALTH_GET_HEALTH_STATUS
)(

178 
	tIN
 
	tEFI_DRIVER_HEALTH_PROTOCOL
 *
	tThis
,

179 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
 
	tOPTIONAL
,

180 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

181 
	tOUT
 
	tEFI_DRIVER_HEALTH_STATUS
 *
	tHó…hSètus
,

182 
	tOUT
 
	tEFI_DRIVER_HEALTH_HII_MESSAGE
 **
	tMesßgeLi°
 
	tOPTIONAL
,

183 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tF‹mHiiH™dÀ
 
	tOPTIONAL


215 
	gEFI_STATUS


216 (
	tEFIAPI
 *
	tEFI_DRIVER_HEALTH_REPAIR
)(

217 
	tIN
 
	tEFI_DRIVER_HEALTH_PROTOCOL
 *
	tThis
,

218 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

219 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

220 
	tIN
 
	tEFI_DRIVER_HEALTH_REPAIR_NOTIFY
 
	tRïaúNŸify
 
	tOPTIONAL


230 
	s_EFI_DRIVER_HEALTH_PROTOCOL
 {

231 
EFI_DRIVER_HEALTH_GET_HEALTH_STATUS
 
	mGëHó…hSètus
;

232 
EFI_DRIVER_HEALTH_REPAIR
 
	mRïaú
;

235 
EFI_GUID
 
gEfiDrivîHó…hPrŸocﬁGuid
;

	@DriverSupportedEfiVersion.h

12 #i‚de‡
__DRIVER_SUPPORTED_EFI_VERSION_H__


13 
	#__DRIVER_SUPPORTED_EFI_VERSION_H__


	)

15 
	#EFI_DRIVER_SUPPORTED_EFI_VERSION_PROTOCOL_GUID
 \

	)

26 
	s_EFI_DRIVER_SUPPORTED_EFI_VERSION_PROTOCOL
 {

31 
UINT32
 
	mLígth
;

35 
UINT32
 
	mFúmw¨eVîsi⁄
;

36 } 
	tEFI_DRIVER_SUPPORTED_EFI_VERSION_PROTOCOL
;

38 
EFI_GUID
 
gEfiDrivîSuµ‹ãdEfiVîsi⁄PrŸocﬁGuid
;

	@DxeMmReadyToLock.h

9 #i‚de‡
_DXE_MM_READY_TO_LOCK_H_


10 
	#_DXE_MM_READY_TO_LOCK_H_


	)

12 
	#EFI_DXE_MM_READY_TO_LOCK_PROTOCOL_GUID
 \

	)

17 
EFI_GUID
 
gEfiDxeMmRódyToLockPrŸocﬁGuid
;

	@DxeSmmReadyToLock.h

25 #i‚de‡
_DXE_SMM_READY_TO_LOCK_H_


26 
	#_DXE_SMM_READY_TO_LOCK_H_


	)

28 
	~<PrŸocﬁ/DxeMmRódyToLock.h
>

30 
	#EFI_DXE_SMM_READY_TO_LOCK_PROTOCOL_GUID
 
EFI_DXE_MM_READY_TO_LOCK_PROTOCOL_GUID


	)

32 
EFI_GUID
 
gEfiDxeSmmRódyToLockPrŸocﬁGuid
;

	@Eap.h

16 #i‚de‡
__EFI_EAP_PROTOCOL_H__


17 
	#__EFI_EAP_PROTOCOL_H__


	)

20 
	#EFI_EAP_PROTOCOL_GUID
 \

	)

25 
_EFI_EAP_PROTOCOL
 
	tEFI_EAP_PROTOCOL
;

31 
VOID
 * 
	tEFI_PORT_HANDLE
;

36 
	#EFI_EAP_TYPE_TLS
 13

38 

	)

43 
	#EFI_EAP_TYPE_MD5
 4

	)

44 
	#EFI_EAP_TYPE_OTP
 5

	)

45 
	#EFI_EAP_TYPE_TOKEN_CARD
 6

	)

68 
	gEFI_STATUS


69 (
	tEFIAPI
 *
	tEFI_EAP_BUILD_RESPONSE_PACKET
)(

70 
	tIN
 
	tEFI_PORT_HANDLE
 
	tP‹tNumbî
,

71 
	tIN
 
	tUINT8
 *
	tReque°Buf„r
,

72 
	tIN
 
	tUINTN
 
	tReque°Size
,

73 
	tIN
 
	tUINT8
 *
	tBuf„r
,

74 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize


104 
	gEFI_STATUS


105 (
	tEFIAPI
 *
	tEFI_EAP_SET_DESIRED_AUTHENTICATION_METHOD
)(

106 
	tIN
 
	tEFI_EAP_PROTOCOL
 *
	tThis
,

107 
	tIN
 
	tUINT8
 
	tE≠AuthTy≥


134 
	gEFI_STATUS


135 (
	tEFIAPI
 *
	tEFI_EAP_REGISTER_AUTHENTICATION_METHOD
)(

136 
	tIN
 
	tEFI_EAP_PROTOCOL
 *
	tThis
,

137 
	tIN
 
	tUINT8
 
	tE≠AuthTy≥
,

138 
	tIN
 
	tEFI_EAP_BUILD_RESPONSE_PACKET
 
	tH™dÀr


148 
	s_EFI_EAP_PROTOCOL
 {

149 
EFI_EAP_SET_DESIRED_AUTHENTICATION_METHOD
 
	mSëDesúedAuthMëhod
;

150 
EFI_EAP_REGISTER_AUTHENTICATION_METHOD
 
	mRegi°îAuthMëhod
;

153 
EFI_GUID
 
gEfiE≠PrŸocﬁGuid
;

	@EapConfiguration.h

12 #i‚de‡
__EFI_EAP_CONFIGURATION_PROTOCOL_H__


13 
	#__EFI_EAP_CONFIGURATION_PROTOCOL_H__


	)

18 
	#EFI_EAP_CONFIGURATION_PROTOCOL_GUID
 \

	)

23 
_EFI_EAP_CONFIGURATION_PROTOCOL
 
	tEFI_EAP_CONFIGURATION_PROTOCOL
;

28 
	#EFI_EAP_TYPE_ATTRIBUTE
 0

	)

34 
	mEfiE≠C⁄figE≠AuthMëhod
,

35 
	mEfiE≠C⁄figE≠Suµ‹ãdAuthMëhod
,

39 
	mEfiE≠C⁄figIdítôySåög
,

43 
	mEfiE≠C⁄figE≠TlsCACît
,

44 
	mEfiE≠C⁄figE≠TlsClõ¡Cît
,

45 
	mEfiE≠C⁄figE≠TlsClõ¡Priv©eKeyFûe
,

46 
	mEfiE≠C⁄figE≠TlsClõ¡Priv©eKeyFûePassw‹d
,

47 
	mEfiE≠C⁄figE≠TlsCùhîSuôe
,

48 
	mEfiE≠C⁄figE≠TlsSuµ‹ãdCùhîSuôe
,

52 
	mEfiE≠C⁄figE≠MSCh≠V2Passw‹d
,

56 
	mEfiE≠C⁄figE≠2ndAuthMëhod
,

60 } 
	tEFI_EAP_CONFIG_DATA_TYPE
;

65 
UINT8
 
	tEFI_EAP_TYPE
;

66 
	#EFI_EAP_TYPE_ATTRIBUTE
 0

	)

67 
	#EFI_EAP_TYPE_IDENTITY
 1

	)

68 
	#EFI_EAP_TYPE_NOTIFICATION
 2

	)

69 
	#EFI_EAP_TYPE_NAK
 3

	)

70 
	#EFI_EAP_TYPE_MD5CHALLENGE
 4

	)

71 
	#EFI_EAP_TYPE_OTP
 5

	)

72 
	#EFI_EAP_TYPE_GTC
 6

	)

73 
	#EFI_EAP_TYPE_EAPTLS
 13

	)

74 
	#EFI_EAP_TYPE_EAPSIM
 18

	)

75 
	#EFI_EAP_TYPE_TTLS
 21

	)

76 
	#EFI_EAP_TYPE_PEAP
 25

	)

77 
	#EFI_EAP_TYPE_MSCHAPV2
 26

	)

78 
	#EFI_EAP_TYPE_EAP_EXTENSION
 33

	)

100 
	gEFI_STATUS


101 (
	tEFIAPI
 *
	tEFI_EAP_CONFIGURATION_SET_DATA
) (

102 
	tIN
 
	tEFI_EAP_CONFIGURATION_PROTOCOL
 *
	tThis
,

103 
	tIN
 
	tEFI_EAP_TYPE
 
	tE≠Ty≥
,

104 
	tIN
 
	tEFI_EAP_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

105 
	tIN
 
	tVOID
 *
	tD©a
,

106 
	tIN
 
	tUINTN
 
	tD©aSize


132 
	gEFI_STATUS


133 (
	tEFIAPI
 *
	tEFI_EAP_CONFIGURATION_GET_DATA
) (

134 
	tIN
 
	tEFI_EAP_CONFIGURATION_PROTOCOL
 *
	tThis
,

135 
	tIN
 
	tEFI_EAP_TYPE
 
	tE≠Ty≥
,

136 
	tIN
 
	tEFI_EAP_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

137 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

138 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize


146 
	s_EFI_EAP_CONFIGURATION_PROTOCOL
 {

147 
EFI_EAP_CONFIGURATION_SET_DATA
 
	mSëD©a
;

148 
EFI_EAP_CONFIGURATION_GET_DATA
 
	mGëD©a
;

151 
EFI_GUID
 
gEfiE≠C⁄figuøti⁄PrŸocﬁGuid
;

	@EapManagement.h

17 #i‚de‡
__EFI_EAP_MANAGEMENT_PROTOCOL_H__


18 
	#__EFI_EAP_MANAGEMENT_PROTOCOL_H__


	)

20 
	~<PrŸocﬁ/E≠.h
>

22 
	#EFI_EAP_MANAGEMENT_PROTOCOL_GUID
 \

	)

27 
_EFI_EAP_MANAGEMENT_PROTOCOL
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
;

33 
	#PAE_SUPPORT_AUTHENTICATOR
 0x01

	)

34 
	#PAE_SUPPORT_SUPPLICANT
 0x02

	)

40 
	s_EFI_EAPOL_PORT_INFO
 {

45 
EFI_PORT_HANDLE
 
	mP‹tNumbî
;

50 
UINT8
 
	mPrŸocﬁVîsi⁄
;

56 
UINT8
 
	mP´C≠abûôõs
;

57 } 
	tEFI_EAPOL_PORT_INFO
;

62 
	e_EFI_EAPOL_SUPPLICANT_PAE_STATE
 {

63 
	mLogoff
,

64 
	mDisc⁄√˘ed
,

65 
	mC⁄√˘ög
,

66 
	mAcquúed
,

67 
	mAuthítiˇtög
,

68 
	mHñd
,

69 
	mAuthítiˇãd
,

70 
	mMaxSuµliˇ¡P´Sèã


71 } 
	tEFI_EAPOL_SUPPLICANT_PAE_STATE
;

77 
	#AUTH_PERIOD_FIELD_VALID
 0x01

	)

78 
	#HELD_PERIOD_FIELD_VALID
 0x02

	)

79 
	#START_PERIOD_FIELD_VALID
 0x04

	)

80 
	#MAX_START_FIELD_VALID
 0x08

	)

86 
	s_EFI_EAPOL_SUPPLICANT_PAE_CONFIGURATION
 {

90 
UINT8
 
	mVÆidFõldMask
;

94 
UINTN
 
	mAuthPîiod
;

98 
UINTN
 
	mHñdPîiod
;

102 
UINTN
 
	mSèπPîiod
;

108 
UINTN
 
	mMaxSèπ
;

109 } 
	tEFI_EAPOL_SUPPLICANT_PAE_CONFIGURATION
;

114 
	s_EFI_EAPOL_SUPPLICANT_PAE_STATISTICS
 {

118 
UINTN
 
	mE≠ﬁFømesRe˚ived
;

122 
UINTN
 
	mE≠ﬁFømesTønsmôãd
;

126 
UINTN
 
	mE≠ﬁSèπFømesTønsmôãd
;

130 
UINTN
 
	mE≠ﬁLogoffFømesTønsmôãd
;

134 
UINTN
 
	mE≠Re•IdFømesTønsmôãd
;

139 
UINTN
 
	mE≠Re•⁄£FømesTønsmôãd
;

143 
UINTN
 
	mE≠ReqIdFømesRe˚ived
;

148 
UINTN
 
	mE≠Reque°FømesRe˚ived
;

153 
UINTN
 
	mInvÆidE≠ﬁFømesRe˚ived
;

158 
UINTN
 
	mE≠LígthEº‹FømesRe˚ived
;

162 
UINTN
 
	mLa°E≠ﬁFømeVîsi⁄
;

166 
UINTN
 
	mLa°E≠ﬁFømeSour˚
;

167 } 
	tEFI_EAPOL_SUPPLICANT_PAE_STATISTICS
;

197 
	gEFI_STATUS


198 (
	tEFIAPI
 *
	tEFI_EAP_GET_SYSTEM_CONFIGURATION
)(

199 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis
,

200 
	tOUT
 
	tBOOLEAN
 *
	tSy°emAuthC⁄åﬁ
,

201 
	tOUT
 
	tEFI_EAPOL_PORT_INFO
 *
	tP‹tInfo
 
	tOPTIONAL


221 
	gEFI_STATUS


222 (
	tEFIAPI
 *
	tEFI_EAP_SET_SYSTEM_CONFIGURATION
)(

223 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis
,

224 
	tIN
 
	tBOOLEAN
 
	tSy°emAuthC⁄åﬁ


239 
	gEFI_STATUS


240 (
	tEFIAPI
 *
	tEFI_EAP_INITIALIZE_PORT
)(

241 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis


257 
	gEFI_STATUS


258 (
	tEFIAPI
 *
	tEFI_EAP_USER_LOGON
)(

259 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis


275 
	gEFI_STATUS


276 (
	tEFIAPI
 *
	tEFI_EAP_USER_LOGOFF
)(

277 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis


313 
	gEFI_STATUS


314 (
	tEFIAPI
 *
	tEFI_EAP_GET_SUPPLICANT_STATUS
)(

315 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis
,

316 
	tOUT
 
	tEFI_EAPOL_SUPPLICANT_PAE_STATE
 *
	tCuºítSèã
,

317 
	tIN
 
	tOUT
 
	tEFI_EAPOL_SUPPLICANT_PAE_CONFIGURATION
 *
	tC⁄figuøti⁄
 
	tOPTIONAL


344 
	gEFI_STATUS


345 (
	tEFIAPI
 *
	tEFI_EAP_SET_SUPPLICANT_CONFIGURATION
)(

346 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis
,

347 
	tIN
 
	tEFI_EAPOL_SUPPLICANT_PAE_CONFIGURATION
 *
	tC⁄figuøti⁄


370 
	gEFI_STATUS


371 (
	tEFIAPI
 *
	tEFI_EAP_GET_SUPPLICANT_STATISTICS
)(

372 
	tIN
 
	tEFI_EAP_MANAGEMENT_PROTOCOL
 *
	tThis
,

373 
	tOUT
 
	tEFI_EAPOL_SUPPLICANT_PAE_STATISTICS
 *
	tSèti°ics


383 
	s_EFI_EAP_MANAGEMENT_PROTOCOL
 {

384 
EFI_EAP_GET_SYSTEM_CONFIGURATION
 
	mGëSy°emC⁄figuøti⁄
;

385 
EFI_EAP_SET_SYSTEM_CONFIGURATION
 
	mSëSy°emC⁄figuøti⁄
;

386 
EFI_EAP_INITIALIZE_PORT
 
	mInôülizeP‹t
;

387 
EFI_EAP_USER_LOGON
 
	mU£rLog⁄
;

388 
EFI_EAP_USER_LOGOFF
 
	mU£rLogoff
;

389 
EFI_EAP_GET_SUPPLICANT_STATUS
 
	mGëSuµliˇ¡Sètus
;

390 
EFI_EAP_SET_SUPPLICANT_CONFIGURATION
 
	mSëSuµliˇ¡C⁄figuøti⁄
;

391 
EFI_EAP_GET_SUPPLICANT_STATISTICS
 
	mGëSuµliˇ¡Sèti°ics
;

394 
EFI_GUID
 
gEfiE≠M™agemítPrŸocﬁGuid
;

	@EapManagement2.h

12 #i‚de‡
__EFI_EAP_MANAGEMENT2_PROTOCOL_H__


13 
	#__EFI_EAP_MANAGEMENT2_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/E≠M™agemít.h
>

22 
	#EFI_EAP_MANAGEMENT2_PROTOCOL_GUID
 \

	)

27 
_EFI_EAP_MANAGEMENT2_PROTOCOL
 
	tEFI_EAP_MANAGEMENT2_PROTOCOL
;

51 
	gEFI_STATUS


52 (
	tEFIAPI
 *
	tEFI_EAP_GET_KEY
) (

53 
	tIN
 
	tEFI_EAP_MANAGEMENT2_PROTOCOL
 *
	tThis
,

54 
	tIN
 
	tOUT
 
	tUINT8
 *
	tMsk
,

55 
	tIN
 
	tOUT
 
	tUINTN
 *
	tMskSize
,

56 
	tIN
 
	tOUT
 
	tUINT8
 *
	tEmsk
,

57 
	tIN
 
	tOUT
 
	tUINT8
 *
	tEmskSize


67 
	s_EFI_EAP_MANAGEMENT2_PROTOCOL
 {

68 
EFI_EAP_GET_SYSTEM_CONFIGURATION
 
	mGëSy°emC⁄figuøti⁄
;

69 
EFI_EAP_SET_SYSTEM_CONFIGURATION
 
	mSëSy°emC⁄figuøti⁄
;

70 
EFI_EAP_INITIALIZE_PORT
 
	mInôülizeP‹t
;

71 
EFI_EAP_USER_LOGON
 
	mU£rLog⁄
;

72 
EFI_EAP_USER_LOGOFF
 
	mU£rLogoff
;

73 
EFI_EAP_GET_SUPPLICANT_STATUS
 
	mGëSuµliˇ¡Sètus
;

74 
EFI_EAP_SET_SUPPLICANT_CONFIGURATION
 
	mSëSuµliˇ¡C⁄figuøti⁄
;

75 
EFI_EAP_GET_SUPPLICANT_STATISTICS
 
	mGëSuµliˇ¡Sèti°ics
;

76 
EFI_EAP_GET_KEY
 
	mGëKey
;

79 
EFI_GUID
 
gEfiE≠M™agemít2PrŸocﬁGuid
;

	@Ebc.h

9 #i‚de‡
__EFI_EBC_PROTOCOL_H__


10 
	#__EFI_EBC_PROTOCOL_H__


	)

12 
	#EFI_EBC_INTERPRETER_PROTOCOL_GUID
 \

	)

20 
	#OPCODE_BREAK
 0x00

	)

21 
	#OPCODE_JMP
 0x01

	)

22 
	#OPCODE_JMP8
 0x02

	)

23 
	#OPCODE_CALL
 0x03

	)

24 
	#OPCODE_RET
 0x04

	)

25 
	#OPCODE_CMPEQ
 0x05

	)

26 
	#OPCODE_CMPLTE
 0x06

	)

27 
	#OPCODE_CMPGTE
 0x07

	)

28 
	#OPCODE_CMPULTE
 0x08

	)

29 
	#OPCODE_CMPUGTE
 0x09

	)

30 
	#OPCODE_NOT
 0x0A

	)

31 
	#OPCODE_NEG
 0x0B

	)

32 
	#OPCODE_ADD
 0x0C

	)

33 
	#OPCODE_SUB
 0x0D

	)

34 
	#OPCODE_MUL
 0x0E

	)

35 
	#OPCODE_MULU
 0x0F

	)

36 
	#OPCODE_DIV
 0x10

	)

37 
	#OPCODE_DIVU
 0x11

	)

38 
	#OPCODE_MOD
 0x12

	)

39 
	#OPCODE_MODU
 0x13

	)

40 
	#OPCODE_AND
 0x14

	)

41 
	#OPCODE_OR
 0x15

	)

42 
	#OPCODE_XOR
 0x16

	)

43 
	#OPCODE_SHL
 0x17

	)

44 
	#OPCODE_SHR
 0x18

	)

45 
	#OPCODE_ASHR
 0x19

	)

46 
	#OPCODE_EXTNDB
 0x1A

	)

47 
	#OPCODE_EXTNDW
 0x1B

	)

48 
	#OPCODE_EXTNDD
 0x1C

	)

49 
	#OPCODE_MOVBW
 0x1D

	)

50 
	#OPCODE_MOVWW
 0x1E

	)

51 
	#OPCODE_MOVDW
 0x1F

	)

52 
	#OPCODE_MOVQW
 0x20

	)

53 
	#OPCODE_MOVBD
 0x21

	)

54 
	#OPCODE_MOVWD
 0x22

	)

55 
	#OPCODE_MOVDD
 0x23

	)

56 
	#OPCODE_MOVQD
 0x24

	)

57 
	#OPCODE_MOVSNW
 0x25

58 
	#OPCODE_MOVSND
 0x26

62 
	#OPCODE_MOVQQ
 0x28

63 
	#OPCODE_LOADSP
 0x29

	)

64 
	#OPCODE_STORESP
 0x2A

	)

65 
	#OPCODE_PUSH
 0x2B

	)

66 
	#OPCODE_POP
 0x2C

	)

67 
	#OPCODE_CMPIEQ
 0x2D

	)

68 
	#OPCODE_CMPILTE
 0x2E

	)

69 
	#OPCODE_CMPIGTE
 0x2F

	)

70 
	#OPCODE_CMPIULTE
 0x30

	)

71 
	#OPCODE_CMPIUGTE
 0x31

	)

72 
	#OPCODE_MOVNW
 0x32

	)

73 
	#OPCODE_MOVND
 0x33

	)

77 
	#OPCODE_PUSHN
 0x35

	)

78 
	#OPCODE_POPN
 0x36

	)

79 
	#OPCODE_MOVI
 0x37

	)

80 
	#OPCODE_MOVIN
 0x38

	)

81 
	#OPCODE_MOVREL
 0x39

	)

86 
	#OPCODE_M_OPCODE
 0x3F

87 
	#OPCODE_M_IMMDATA
 0x80

	)

88 
	#OPCODE_M_IMMDATA64
 0x40

	)

89 
	#OPCODE_M_64BIT
 0x40

90 
	#OPCODE_M_RELADDR
 0x10

91 
	#OPCODE_M_CMPI32_DATA
 0x80

92 
	#OPCODE_M_CMPI64
 0x40

93 
	#OPERAND_M_MOVIN_N
 0x80

	)

94 
	#OPERAND_M_CMPI_INDEX
 0x10

	)

100 
	#OPCODE_M_IMMED_OP1
 0x80

	)

101 
	#OPCODE_M_IMMED_OP2
 0x40

	)

106 
	#OPERAND_M_INDIRECT1
 0x08

	)

107 
	#OPERAND_M_INDIRECT2
 0x80

	)

108 
	#OPERAND_M_OP1
 0x07

	)

109 
	#OPERAND_M_OP2
 0x70

	)

114 
	#DATAMANIP_M_64
 0x40

115 
	#DATAMANIP_M_IMMDATA
 0x80

	)

121 
	#OPCODE_M_IMMED_OP2
 0x40

	)

128 
	#MOVI_M_IMMDATA
 0x40

	)

129 
	#MOVI_M_DATAWIDTH
 0xC0

	)

130 
	#MOVI_DATAWIDTH16
 0x40

	)

131 
	#MOVI_DATAWIDTH32
 0x80

	)

132 
	#MOVI_DATAWIDTH64
 0xC0

	)

133 
	#MOVI_M_MOVEWIDTH
 0x30

	)

134 
	#MOVI_MOVEWIDTH8
 0x00

	)

135 
	#MOVI_MOVEWIDTH16
 0x10

	)

136 
	#MOVI_MOVEWIDTH32
 0x20

	)

137 
	#MOVI_MOVEWIDTH64
 0x30

	)

142 
	#OPERAND_M_RELATIVE_ADDR
 0x10

	)

143 
	#OPERAND_M_NATIVE_CALL
 0x20

	)

148 
	#PUSHPOP_M_IMMDATA
 0x80

149 
	#PUSHPOP_M_64
 0x40

153 
	#JMP_M_RELATIVE
 0x10

	)

154 
	#JMP_M_CONDITIONAL
 0x80

	)

155 
	#JMP_M_CS
 0x40

	)

160 
	#OPERAND1_INDIRECT
(
›
Ë((›Ë& 
OPERAND_M_INDIRECT1
)

	)

161 
	#OPERAND2_INDIRECT
(
›
Ë((›Ë& 
OPERAND_M_INDIRECT2
)

	)

166 
	#OPERAND1_REGNUM
(
›
Ë((›Ë& 
OPERAND_M_OP1
)

	)

167 
	#OPERAND2_REGNUM
(
›
Ë(((›Ë& 
OPERAND_M_OP2
Ë>> 4)

	)

169 
	#OPERAND1_CHAR
(
›
Ë('0' + 
	`OPERAND1_REGNUM
 (›))

	)

170 
	#OPERAND2_CHAR
(
›
Ë('0' + 
	`OPERAND2_REGNUM
 (›))

	)

175 
	#CONDITION_M_CONDITIONAL
 0x80

	)

176 
	#CONDITION_M_CS
 0x40

	)

181 
	#EFI_EBC_PROTOCOL_GUID
 
EFI_EBC_INTERPRETER_PROTOCOL_GUID


	)

186 
_EFI_EBC_PROTOCOL
 
	tEFI_EBC_PROTOCOL
;

207 
	gEFI_STATUS


208 (
	tEFIAPI
 *
	tEFI_EBC_CREATE_THUNK
)(

209 
	tIN
 
	tEFI_EBC_PROTOCOL
 *
	tThis
,

210 
	tIN
 
	tEFI_HANDLE
 
	tImageH™dÀ
,

211 
	tIN
 
	tVOID
 *
	tEbcE¡ryPoöt
,

212 
	tOUT
 
	tVOID
 **
	tThunk


230 
	gEFI_STATUS


231 (
	tEFIAPI
 *
	tEFI_EBC_UNLOAD_IMAGE
)(

232 
	tIN
 
	tEFI_EBC_PROTOCOL
 *
	tThis
,

233 
	tIN
 
	tEFI_HANDLE
 
	tImageH™dÀ


247 
	gEFI_STATUS


248 (
	tEFIAPI
 *
	tEBC_ICACHE_FLUSH
)(

249 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tSèπ
,

250 
	tIN
 
	tUINT64
 
	tLígth


264 
	gEFI_STATUS


265 (
	tEFIAPI
 *
	tEFI_EBC_REGISTER_ICACHE_FLUSH
)(

266 
	tIN
 
	tEFI_EBC_PROTOCOL
 *
	tThis
,

267 
	tIN
 
	tEBC_ICACHE_FLUSH
 
	tFlush


284 
	gEFI_STATUS


285 (
	tEFIAPI
 *
	tEFI_EBC_GET_VERSION
)(

286 
	tIN
 
	tEFI_EBC_PROTOCOL
 *
	tThis
,

287 
	tIN
 
	tOUT
 
	tUINT64
 *
	tVîsi⁄


296 
	s_EFI_EBC_PROTOCOL
 {

297 
EFI_EBC_CREATE_THUNK
 
	mCª©eThunk
;

298 
EFI_EBC_UNLOAD_IMAGE
 
	mU∆ﬂdImage
;

299 
EFI_EBC_REGISTER_ICACHE_FLUSH
 
	mRegi°îICacheFlush
;

300 
EFI_EBC_GET_VERSION
 
	mGëVîsi⁄
;

306 
EFI_GUID
 
gEfiEbcPrŸocﬁGuid
;

	@EdidActive.h

11 #i‚de‡
__EDID_ACTIVE_H__


12 
	#__EDID_ACTIVE_H__


	)

14 
	#EFI_EDID_ACTIVE_PROTOCOL_GUID
 \

	)

31 
UINT32
 
	mSizeOfEdid
;

41 
UINT8
 *
	mEdid
;

42 } 
	tEFI_EDID_ACTIVE_PROTOCOL
;

44 
EFI_GUID
 
gEfiEdidA˘ivePrŸocﬁGuid
;

	@EdidDiscovered.h

12 #i‚de‡
__EDID_DISCOVERED_H__


13 
	#__EDID_DISCOVERED_H__


	)

15 
	#EFI_EDID_DISCOVERED_PROTOCOL_GUID
 \

	)

29 
UINT32
 
	mSizeOfEdid
;

39 
UINT8
 *
	mEdid
;

40 } 
	tEFI_EDID_DISCOVERED_PROTOCOL
;

42 
EFI_GUID
 
gEfiEdidDiscovîedPrŸocﬁGuid
;

	@EdidOverride.h

12 #i‚de‡
__EDID_OVERRIDE_H__


13 
	#__EDID_OVERRIDE_H__


	)

15 
	#EFI_EDID_OVERRIDE_PROTOCOL_GUID
 \

	)

20 
_EFI_EDID_OVERRIDE_PROTOCOL
 
	tEFI_EDID_OVERRIDE_PROTOCOL
;

22 
	#EFI_EDID_OVERRIDE_DONT_OVERRIDE
 0x01

	)

23 
	#EFI_EDID_OVERRIDE_ENABLE_HOT_PLUG
 0x02

	)

42 
	gEFI_STATUS


43 (
	tEFIAPI
 *
	tEFI_EDID_OVERRIDE_PROTOCOL_GET_EDID
)(

44 
	tIN
 
	tEFI_EDID_OVERRIDE_PROTOCOL
 *
	tThis
,

45 
	tIN
 
	tEFI_HANDLE
 *
	tChûdH™dÀ
,

46 
	tOUT
 
	tUINT32
 *
	tAâribuãs
,

47 
	tOUT
 
	tUINTN
 *
	tEdidSize
,

48 
	tOUT
 
	tUINT8
 **
	tEdid


55 
	s_EFI_EDID_OVERRIDE_PROTOCOL
 {

56 
EFI_EDID_OVERRIDE_PROTOCOL_GET_EDID
 
	mGëEdid
;

59 
EFI_GUID
 
gEfiEdidOvîridePrŸocﬁGuid
;

	@EraseBlock.h

12 #i‚de‡
__EFI_ERASE_BLOCK_PROTOCOL_H__


13 
	#__EFI_ERASE_BLOCK_PROTOCOL_H__


	)

15 
	#EFI_ERASE_BLOCK_PROTOCOL_GUID
 \

	)

20 
_EFI_ERASE_BLOCK_PROTOCOL
 
	tEFI_ERASE_BLOCK_PROTOCOL
;

22 
	#EFI_ERASE_BLOCK_PROTOCOL_REVISION
 ((2<<16Ë| (60))

	)

33 
EFI_EVENT
 
	mEvít
;

37 
EFI_STATUS
 
	mTønß˘i⁄Sètus
;

38 } 
	tEFI_ERASE_BLOCK_TOKEN
;

68 
	gEFI_STATUS


69 (
	tEFIAPI
 *
	tEFI_BLOCK_ERASE
) (

70 
	tIN
 
	tEFI_ERASE_BLOCK_PROTOCOL
 *
	tThis
,

71 
	tIN
 
	tUINT32
 
	tMedüId
,

72 
	tIN
 
	tEFI_LBA
 
	tLBA
,

73 
	tIN
 
	tOUT
 
	tEFI_ERASE_BLOCK_TOKEN
 *
	tTokí
,

74 
	tIN
 
	tUINTN
 
	tSize


82 
	s_EFI_ERASE_BLOCK_PROTOCOL
 {

88 
UINT64
 
	mRevisi⁄
;

93 
UINT32
 
	mEø£LígthGønuœrôy
;

94 
EFI_BLOCK_ERASE
 
	mEø£Blocks
;

97 
EFI_GUID
 
gEfiEø£BlockPrŸocﬁGuid
;

	@FirmwareManagement.h

20 #i‚de‡
__EFI_FIRMWARE_MANAGEMENT_PROTOCOL_H__


21 
	#__EFI_FIRMWARE_MANAGEMENT_PROTOCOL_H__


	)

24 
	#EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GUID
 \

	)

29 
_EFI_FIRMWARE_MANAGEMENT_PROTOCOL
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
;

34 
	#EFI_FMP_DEP_PUSH_GUID
 0x00

	)

35 
	#EFI_FMP_DEP_PUSH_VERSION
 0x01

	)

36 
	#EFI_FMP_DEP_VERSION_STR
 0x02

	)

37 
	#EFI_FMP_DEP_AND
 0x03

	)

38 
	#EFI_FMP_DEP_OR
 0x04

	)

39 
	#EFI_FMP_DEP_NOT
 0x05

	)

40 
	#EFI_FMP_DEP_TRUE
 0x06

	)

41 
	#EFI_FMP_DEP_FALSE
 0x07

	)

42 
	#EFI_FMP_DEP_EQ
 0x08

	)

43 
	#EFI_FMP_DEP_GT
 0x09

	)

44 
	#EFI_FMP_DEP_GTE
 0x0A

	)

45 
	#EFI_FMP_DEP_LT
 0x0B

	)

46 
	#EFI_FMP_DEP_LTE
 0x0C

	)

47 
	#EFI_FMP_DEP_END
 0x0D

	)

53 
UINT8
 
	mDïídícõs
[1];

54 } 
	tEFI_FIRMWARE_IMAGE_DEP
;

64 
UINT8
 
	mImageIndex
;

68 
EFI_GUID
 
	mImageTy≥Id
;

72 
UINT64
 
	mImageId
;

76 
CHAR16
 *
	mImageIdName
;

81 
UINT32
 
	mVîsi⁄
;

85 
CHAR16
 *
	mVîsi⁄Name
;

89 
UINTN
 
	mSize
;

97 
UINT64
 
	mAâribuãsSuµ‹ãd
;

102 
UINT64
 
	mAâribuãsSëtög
;

107 
UINT64
 
	mCom∑tibûôõs
;

112 
UINT32
 
	mLowe°Suµ‹ãdImageVîsi⁄
;

117 
UINT32
 
	mLa°Aâem±Vîsi⁄
;

122 
UINT32
 
	mLa°Aâem±Sètus
;

138 
UINT64
 
	mH¨dw¨eIn°™˚
;

139 
EFI_FIRMWARE_IMAGE_DEP
 *
	mDïídícõs
;

140 } 
	tEFI_FIRMWARE_IMAGE_DESCRIPTOR
;

150 
	#IMAGE_ATTRIBUTE_IMAGE_UPDATABLE
 0x0000000000000001

	)

156 
	#IMAGE_ATTRIBUTE_RESET_REQUIRED
 0x0000000000000002

	)

162 
	#IMAGE_ATTRIBUTE_AUTHENTICATION_REQUIRED
 0x0000000000000004

	)

167 
	#IMAGE_ATTRIBUTE_IN_USE
 0x0000000000000008

	)

171 
	#IMAGE_ATTRIBUTE_UEFI_IMAGE
 0x0000000000000010

	)

176 
	#IMAGE_ATTRIBUTE_DEPENDENCY
 0x0000000000000020

	)

187 
	#IMAGE_COMPATIBILITY_CHECK_SUPPORTED
 0x0000000000000001

	)

192 
	#EFI_FIRMWARE_IMAGE_DESCRIPTOR_VERSION
 4

	)

203 
UINT64
 
	mM⁄Ÿ⁄icCou¡
;

211 
WIN_CERTIFICATE_UEFI_GUID
 
	mAuthInfo
;

212 } 
	tEFI_FIRMWARE_IMAGE_AUTHENTICATION
;

224 
	#IMAGE_UPDATABLE_VALID
 0x0000000000000001

	)

229 
	#IMAGE_UPDATABLE_INVALID
 0x0000000000000002

	)

234 
	#IMAGE_UPDATABLE_INVALID_TYPE
 0x0000000000000004

	)

241 
	#IMAGE_UPDATABLE_INVALID_OLD
 0x0000000000000008

	)

247 
	#IMAGE_UPDATABLE_VALID_WITH_VENDOR_CODE
 0x0000000000000010

	)

257 
	#PACKAGE_ATTRIBUTE_VERSION_UPDATABLE
 0x0000000000000001

	)

262 
	#PACKAGE_ATTRIBUTE_RESET_REQUIRED
 0x0000000000000002

	)

267 
	#PACKAGE_ATTRIBUTE_AUTHENTICATION_REQUIRED
 0x0000000000000004

	)

283 
	gEFI_STATUS


284 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_UPDATE_IMAGE_PROGRESS
)(

285 
	tIN
 
	tUINTN
 
	tCom∂ëi⁄


327 
	gEFI_STATUS


328 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE_INFO
)(

329 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

330 
	tIN
 
	tOUT
 
	tUINTN
 *
	tImageInfoSize
,

331 
	tIN
 
	tOUT
 
	tEFI_FIRMWARE_IMAGE_DESCRIPTOR
 *
	tImageInfo
,

332 
	tOUT
 
	tUINT32
 *
	tDes¸ùt‹Vîsi⁄
,

333 
	tOUT
 
	tUINT8
 *
	tDes¸ùt‹Cou¡
,

334 
	tOUT
 
	tUINTN
 *
	tDes¸ùt‹Size
,

335 
	tOUT
 
	tUINT32
 *
	tPackageVîsi⁄
,

336 
	tOUT
 
	tCHAR16
 **
	tPackageVîsi⁄Name


363 
	gEFI_STATUS


364 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE
)(

365 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

366 
	tIN
 
	tUINT8
 
	tImageIndex
,

367 
	tOUT
 
	tVOID
 *
	tImage
,

368 
	tIN
 
	tOUT
 
	tUINTN
 *
	tImageSize


418 
	gEFI_STATUS


419 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_IMAGE
)(

420 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

421 
	tIN
 
	tUINT8
 
	tImageIndex
,

422 
	tIN
 
	tCONST
 
	tVOID
 *
	tImage
,

423 
	tIN
 
	tUINTN
 
	tImageSize
,

424 
	tIN
 
	tCONST
 
	tVOID
 *
	tVíd‹Code
,

425 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_UPDATE_IMAGE_PROGRESS
 
	tProgªss
,

426 
	tOUT
 
	tCHAR16
 **
	tAb‹tRós⁄


450 
	gEFI_STATUS


451 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_CHECK_IMAGE
)(

452 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

453 
	tIN
 
	tUINT8
 
	tImageIndex
,

454 
	tIN
 
	tCONST
 
	tVOID
 *
	tImage
,

455 
	tIN
 
	tUINTN
 
	tImageSize
,

456 
	tOUT
 
	tUINT32
 *
	tImageUpd©abÀ


492 
	gEFI_STATUS


493 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_PACKAGE_INFO
)(

494 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

495 
	tOUT
 
	tUINT32
 *
	tPackageVîsi⁄
,

496 
	tOUT
 
	tCHAR16
 **
	tPackageVîsi⁄Name
,

497 
	tOUT
 
	tUINT32
 *
	tPackageVîsi⁄NameMaxLí
,

498 
	tOUT
 
	tUINT64
 *
	tAâribuãsSuµ‹ãd
,

499 
	tOUT
 
	tUINT64
 *
	tAâribuãsSëtög


534 
	gEFI_STATUS


535 (
	tEFIAPI
 *
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_PACKAGE_INFO
)(

536 
	tIN
 
	tEFI_FIRMWARE_MANAGEMENT_PROTOCOL
 *
	tThis
,

537 
	tIN
 
	tCONST
 
	tVOID
 *
	tImage
,

538 
	tIN
 
	tUINTN
 
	tImageSize
,

539 
	tIN
 
	tCONST
 
	tVOID
 *
	tVíd‹Code
,

540 
	tIN
 
	tUINT32
 
	tPackageVîsi⁄
,

541 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tPackageVîsi⁄Name


553 
	s_EFI_FIRMWARE_MANAGEMENT_PROTOCOL
 {

554 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE_INFO
 
	mGëImageInfo
;

555 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE
 
	mGëImage
;

556 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_IMAGE
 
	mSëImage
;

557 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_CHECK_IMAGE
 
	mCheckImage
;

558 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_PACKAGE_INFO
 
	mGëPackageInfo
;

559 
EFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_PACKAGE_INFO
 
	mSëPackageInfo
;

562 
EFI_GUID
 
gEfiFúmw¨eM™agemítPrŸocﬁGuid
;

	@FirmwareVolume2.h

16 #i‚de‡
__FIRMWARE_VOLUME2_H__


17 
	#__FIRMWARE_VOLUME2_H__


	)

19 
	#EFI_FIRMWARE_VOLUME2_PROTOCOL_GUID
 \

	)

22 
_EFI_FIRMWARE_VOLUME2_PROTOCOL
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
;

28 
UINT64
 
	tEFI_FV_ATTRIBUTES
;

34 
	#EFI_FV2_READ_DISABLE_CAP
 0x0000000000000001ULL

	)

35 
	#EFI_FV2_READ_ENABLE_CAP
 0x0000000000000002ULL

	)

36 
	#EFI_FV2_READ_STATUS
 0x0000000000000004ULL

	)

37 
	#EFI_FV2_WRITE_DISABLE_CAP
 0x0000000000000008ULL

	)

38 
	#EFI_FV2_WRITE_ENABLE_CAP
 0x0000000000000010ULL

	)

39 
	#EFI_FV2_WRITE_STATUS
 0x0000000000000020ULL

	)

40 
	#EFI_FV2_LOCK_CAP
 0x0000000000000040ULL

	)

41 
	#EFI_FV2_LOCK_STATUS
 0x0000000000000080ULL

	)

42 
	#EFI_FV2_WRITE_POLICY_RELIABLE
 0x0000000000000100ULL

	)

43 
	#EFI_FV2_READ_LOCK_CAP
 0x0000000000001000ULL

	)

44 
	#EFI_FV2_READ_LOCK_STATUS
 0x0000000000002000ULL

	)

45 
	#EFI_FV2_WRITE_LOCK_CAP
 0x0000000000004000ULL

	)

46 
	#EFI_FV2_WRITE_LOCK_STATUS
 0x0000000000008000ULL

	)

47 
	#EFI_FV2_ALIGNMENT
 0x00000000001F0000ULL

	)

48 
	#EFI_FV2_ALIGNMENT_1
 0x0000000000000000ULL

	)

49 
	#EFI_FV2_ALIGNMENT_2
 0x0000000000010000ULL

	)

50 
	#EFI_FV2_ALIGNMENT_4
 0x0000000000020000ULL

	)

51 
	#EFI_FV2_ALIGNMENT_8
 0x0000000000030000ULL

	)

52 
	#EFI_FV2_ALIGNMENT_16
 0x0000000000040000ULL

	)

53 
	#EFI_FV2_ALIGNMENT_32
 0x0000000000050000ULL

	)

54 
	#EFI_FV2_ALIGNMENT_64
 0x0000000000060000ULL

	)

55 
	#EFI_FV2_ALIGNMENT_128
 0x0000000000070000ULL

	)

56 
	#EFI_FV2_ALIGNMENT_256
 0x0000000000080000ULL

	)

57 
	#EFI_FV2_ALIGNMENT_512
 0x0000000000090000ULL

	)

58 
	#EFI_FV2_ALIGNMENT_1K
 0x00000000000A0000ULL

	)

59 
	#EFI_FV2_ALIGNMENT_2K
 0x00000000000B0000ULL

	)

60 
	#EFI_FV2_ALIGNMENT_4K
 0x00000000000C0000ULL

	)

61 
	#EFI_FV2_ALIGNMENT_8K
 0x00000000000D0000ULL

	)

62 
	#EFI_FV2_ALIGNMENT_16K
 0x00000000000E0000ULL

	)

63 
	#EFI_FV2_ALIGNMENT_32K
 0x00000000000F0000ULL

	)

64 
	#EFI_FV2_ALIGNMENT_64K
 0x0000000000100000ULL

	)

65 
	#EFI_FV2_ALIGNMENT_128K
 0x0000000000110000ULL

	)

66 
	#EFI_FV2_ALIGNMENT_256K
 0x0000000000120000ULL

	)

67 
	#EFI_FV2_ALIGNMENT_512K
 0x0000000000130000ULL

	)

68 
	#EFI_FV2_ALIGNMENT_1M
 0x0000000000140000ULL

	)

69 
	#EFI_FV2_ALIGNMENT_2M
 0x0000000000150000ULL

	)

70 
	#EFI_FV2_ALIGNMENT_4M
 0x0000000000160000ULL

	)

71 
	#EFI_FV2_ALIGNMENT_8M
 0x0000000000170000ULL

	)

72 
	#EFI_FV2_ALIGNMENT_16M
 0x0000000000180000ULL

	)

73 
	#EFI_FV2_ALIGNMENT_32M
 0x0000000000190000ULL

	)

74 
	#EFI_FV2_ALIGNMENT_64M
 0x00000000001A0000ULL

	)

75 
	#EFI_FV2_ALIGNMENT_128M
 0x00000000001B0000ULL

	)

76 
	#EFI_FV2_ALIGNMENT_256M
 0x00000000001C0000ULL

	)

77 
	#EFI_FV2_ALIGNMENT_512M
 0x00000000001D0000ULL

	)

78 
	#EFI_FV2_ALIGNMENT_1G
 0x00000000001E0000ULL

	)

79 
	#EFI_FV2_ALIGNMENT_2G
 0x00000000001F0000ULL

	)

106 
	gEFI_STATUS


107 (
	tEFIAPI
 * 
	tEFI_FV_GET_ATTRIBUTES
)(

108 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

109 
	tOUT
 
	tEFI_FV_ATTRIBUTES
 *
	tFvAâribuãs


201 
	gEFI_STATUS


202 (
	tEFIAPI
 * 
	tEFI_FV_SET_ATTRIBUTES
)(

203 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

204 
	tIN
 
	tOUT
 
	tEFI_FV_ATTRIBUTES
 *
	tFvAâribuãs


296 
	gEFI_STATUS


297 (
	tEFIAPI
 * 
	tEFI_FV_READ_FILE
)(

298 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

299 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tNameGuid
,

300 
	tIN
 
	tOUT
 
	tVOID
 **
	tBuf„r
,

301 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

302 
	tOUT
 
	tEFI_FV_FILETYPE
 *
	tFoundTy≥
,

303 
	tOUT
 
	tEFI_FV_FILE_ATTRIBUTES
 *
	tFûeAâribuãs
,

304 
	tOUT
 
	tUINT32
 *
	tAuthítiˇti⁄Sètus


404 
	gEFI_STATUS


405 (
	tEFIAPI
 * 
	tEFI_FV_READ_SECTION
)(

406 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

407 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tNameGuid
,

408 
	tIN
 
	tEFI_SECTION_TYPE
 
	tSe˘i⁄Ty≥
,

409 
	tIN
 
	tUINTN
 
	tSe˘i⁄In°™˚
,

410 
	tIN
 
	tOUT
 
	tVOID
 **
	tBuf„r
,

411 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

412 
	tOUT
 
	tUINT32
 *
	tAuthítiˇti⁄Sètus


418 
UINT32
 
	tEFI_FV_WRITE_POLICY
;

419 
	#EFI_FV_UNRELIABLE_WRITE
 0x00000000

	)

420 
	#EFI_FV_RELIABLE_WRITE
 0x00000001

	)

429 
EFI_GUID
 *
	mNameGuid
;

433 
EFI_FV_FILETYPE
 
	mTy≥
;

437 
EFI_FV_FILE_ATTRIBUTES
 
	mFûeAâribuãs
;

441 
VOID
 *
	mBuf„r
;

445 
UINT32
 
	mBuf„rSize
;

446 } 
	tEFI_FV_WRITE_FILE_DATA
;

515 
	gEFI_STATUS


516 (
	tEFIAPI
 * 
	tEFI_FV_WRITE_FILE
)(

517 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

518 
	tIN
 
	tUINT32
 
	tNumbîOfFûes
,

519 
	tIN
 
	tEFI_FV_WRITE_POLICY
 
	tWrôePﬁicy
,

520 
	tIN
 
	tEFI_FV_WRITE_FILE_DATA
 *
	tFûeD©a


600 
	gEFI_STATUS


601 (
	tEFIAPI
 * 
	tEFI_FV_GET_NEXT_FILE
)(

602 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

603 
	tIN
 
	tOUT
 
	tVOID
 *
	tKey
,

604 
	tIN
 
	tOUT
 
	tEFI_FV_FILETYPE
 *
	tFûeTy≥
,

605 
	tOUT
 
	tEFI_GUID
 *
	tNameGuid
,

606 
	tOUT
 
	tEFI_FV_FILE_ATTRIBUTES
 *
	tAâribuãs
,

607 
	tOUT
 
	tUINTN
 *
	tSize


658 
	gEFI_STATUS


659 (
	tEFIAPI
 *
	tEFI_FV_GET_INFO
)(

660 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

661 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

662 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

663 
	tOUT
 
	tVOID
 *
	tBuf„r


708 
	gEFI_STATUS


709 (
	tEFIAPI
 *
	tEFI_FV_SET_INFO
)(

710 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME2_PROTOCOL
 *
	tThis
,

711 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

712 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

713 
	tIN
 
	tCONST
 
	tVOID
 *
	tBuf„r


730 
	s_EFI_FIRMWARE_VOLUME2_PROTOCOL
 {

731 
EFI_FV_GET_ATTRIBUTES
 
	mGëVﬁumeAâribuãs
;

732 
EFI_FV_SET_ATTRIBUTES
 
	mSëVﬁumeAâribuãs
;

733 
EFI_FV_READ_FILE
 
	mRódFûe
;

734 
EFI_FV_READ_SECTION
 
	mRódSe˘i⁄
;

735 
EFI_FV_WRITE_FILE
 
	mWrôeFûe
;

736 
EFI_FV_GET_NEXT_FILE
 
	mGëNextFûe
;

743 
UINT32
 
	mKeySize
;

748 
EFI_HANDLE
 
	mP¨ítH™dÀ
;

749 
EFI_FV_GET_INFO
 
	mGëInfo
;

750 
EFI_FV_SET_INFO
 
	mSëInfo
;

754 
EFI_GUID
 
gEfiFúmw¨eVﬁume2PrŸocﬁGuid
;

	@FirmwareVolumeBlock.h

12 #i‚de‡
__FIRMWARE_VOLUME_BLOCK_H__


13 
	#__FIRMWARE_VOLUME_BLOCK_H__


	)

20 
	#EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL_GUID
 \

	)

23 
	#EFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL_GUID
 \

	)

26 
_EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL
 
	tEFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL
;

28 
EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 * 
	tEFI_FVB_GET_ATTRIBUTES
)(

48 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

49 
	tOUT
 
	tEFI_FVB_ATTRIBUTES_2
 *
	tAâribuãs


76 
	gEFI_STATUS


77 (
	tEFIAPI
 * 
	tEFI_FVB_SET_ATTRIBUTES
)(

78 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

79 
	tIN
 
	tOUT
 
	tEFI_FVB_ATTRIBUTES_2
 *
	tAâribuãs


101 
	gEFI_STATUS


102 (
	tEFIAPI
 * 
	tEFI_FVB_GET_PHYSICAL_ADDRESS
)(

103 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

104 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tAddªss


134 
	gEFI_STATUS


135 (
	tEFIAPI
 * 
	tEFI_FVB_GET_BLOCK_SIZE
)(

136 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

137 
	tIN
 
	tEFI_LBA
 
	tLba
,

138 
	tOUT
 
	tUINTN
 *
	tBlockSize
,

139 
	tOUT
 
	tUINTN
 *
	tNumbîOfBlocks


191 
	gEFI_STATUS


192 (
	tEFIAPI
 *
	tEFI_FVB_READ
)(

193 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

194 
	tIN
 
	tEFI_LBA
 
	tLba
,

195 
	tIN
 
	tUINTN
 
	tOff£t
,

196 
	tIN
 
	tOUT
 
	tUINTN
 *
	tNumByãs
,

197 
	tIN
 
	tOUT
 
	tUINT8
 *
	tBuf„r


260 
	gEFI_STATUS


261 (
	tEFIAPI
 * 
	tEFI_FVB_WRITE
)(

262 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

263 
	tIN
 
	tEFI_LBA
 
	tLba
,

264 
	tIN
 
	tUINTN
 
	tOff£t
,

265 
	tIN
 
	tOUT
 
	tUINTN
 *
	tNumByãs
,

266 
	tIN
 
	tUINT8
 *
	tBuf„r


275 
	#EFI_LBA_LIST_TERMINATOR
 0xFFFFFFFFFFFFFFFFULL

	)

327 
	gEFI_STATUS


328 (
	tEFIAPI
 * 
	tEFI_FVB_ERASE_BLOCKS
)(

329 
	tIN
 
	tCONST
 
	tEFI_FIRMWARE_VOLUME_BLOCK2_PROTOCOL
 *
	tThis
,

342 
	s_EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL
{

343 
EFI_FVB_GET_ATTRIBUTES
 
	mGëAâribuãs
;

344 
EFI_FVB_SET_ATTRIBUTES
 
	mSëAâribuãs
;

345 
EFI_FVB_GET_PHYSICAL_ADDRESS
 
	mGëPhysiˇlAddªss
;

346 
EFI_FVB_GET_BLOCK_SIZE
 
	mGëBlockSize
;

347 
EFI_FVB_READ
 
	mRód
;

348 
EFI_FVB_WRITE
 
	mWrôe
;

349 
EFI_FVB_ERASE_BLOCKS
 
	mEø£Blocks
;

353 
EFI_HANDLE
 
	mP¨ítH™dÀ
;

357 
EFI_GUID
 
gEfiFúmw¨eVﬁumeBlockPrŸocﬁGuid
;

358 
EFI_GUID
 
gEfiFúmw¨eVﬁumeBlock2PrŸocﬁGuid
;

	@FormBrowser2.h

12 #i‚de‡
__EFI_FORM_BROWSER2_H__


13 
	#__EFI_FORM_BROWSER2_H__


	)

15 
	~<Guid/HiiPœtf‹mSëupF‹m£t.h
>

17 
	#EFI_FORM_BROWSER2_PROTOCOL_GUID
 \

	)

21 
_EFI_FORM_BROWSER2_PROTOCOL
 
	tEFI_FORM_BROWSER2_PROTOCOL
;

44 
UINTN
 
	mLe·Cﬁumn
;

45 
UINTN
 
	mRightCﬁumn
;

46 
UINTN
 
	mT›Row
;

47 
UINTN
 
	mBŸtomRow
;

48 } 
	tEFI_SCREEN_DESCRIPTOR
;

50 
UINTN
 
	tEFI_BROWSER_ACTION_REQUEST
;

52 
	#EFI_BROWSER_ACTION_REQUEST_NONE
 0

	)

53 
	#EFI_BROWSER_ACTION_REQUEST_RESET
 1

	)

54 
	#EFI_BROWSER_ACTION_REQUEST_SUBMIT
 2

	)

55 
	#EFI_BROWSER_ACTION_REQUEST_EXIT
 3

	)

56 
	#EFI_BROWSER_ACTION_REQUEST_FORM_SUBMIT_EXIT
 4

	)

57 
	#EFI_BROWSER_ACTION_REQUEST_FORM_DISCARD_EXIT
 5

	)

58 
	#EFI_BROWSER_ACTION_REQUEST_FORM_APPLY
 6

	)

59 
	#EFI_BROWSER_ACTION_REQUEST_FORM_DISCARD
 7

	)

60 
	#EFI_BROWSER_ACTION_REQUEST_RECONNECT
 8

	)

100 
	gEFI_STATUS


101 (
	tEFIAPI
 *
	tEFI_SEND_FORM2
)(

102 
	tIN
 
	tCONST
 
	tEFI_FORM_BROWSER2_PROTOCOL
 *
	tThis
,

103 
	tIN
 
	tEFI_HII_HANDLE
 *
	tH™dÀ
,

104 
	tIN
 
	tUINTN
 
	tH™dÀCou¡
,

105 
	tIN
 
	tEFI_GUID
 *
	tF‹mSëGuid
, 
	tOPTIONAL


106 
	tIN
 
	tEFI_FORM_ID
 
	tF‹mId
, 
	tOPTIONAL


107 
	tIN
 
	tCONST
 
	tEFI_SCREEN_DESCRIPTOR
 *
	tS¸ìnDimísi⁄s
, 
	tOPTIONAL


108 
	tOUT
 
	tEFI_BROWSER_ACTION_REQUEST
 *
	tA˘i⁄Reque°
 
	tOPTIONAL


152 
	gEFI_STATUS


153 (
	tEFIAPI
 *
	tEFI_BROWSER_CALLBACK2
)(

154 
	tIN
 
	tCONST
 
	tEFI_FORM_BROWSER2_PROTOCOL
 *
	tThis
,

155 
	tIN
 
	tOUT
 
	tUINTN
 *
	tResu…sD©aSize
,

156 
	tIN
 
	tOUT
 
	tEFI_STRING
 
	tResu…sD©a
,

157 
	tIN
 
	tCONST
 
	tBOOLEAN
 
	tRërõveD©a
,

158 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tV¨übÀGuid
, 
	tOPTIONAL


159 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tV¨übÀName
 
	tOPTIONAL


166 
	s_EFI_FORM_BROWSER2_PROTOCOL
 {

167 
EFI_SEND_FORM2
 
	mSídF‹m
;

168 
EFI_BROWSER_CALLBACK2
 
	mBrow£rCÆlback
;

171 
EFI_GUID
 
gEfiF‹mBrow£r2PrŸocﬁGuid
;

	@Ftp4.h

18 #i‚de‡
__EFI_FTP4_PROTOCOL_H__


19 
	#__EFI_FTP4_PROTOCOL_H__


	)

22 
	#EFI_FTP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

27 
	#EFI_FTP4_PROTOCOL_GUID
 \

	)

32 
_EFI_FTP4_PROTOCOL
 
	tEFI_FTP4_PROTOCOL
;

45 
EFI_EVENT
 
	mEvít
;

66 
EFI_STATUS
 
	mSètus
;

67 } 
	tEFI_FTP4_CONNECTION_TOKEN
;

77 
UINT8
 *
	mU£∫ame
;

82 
UINT8
 *
	mPassw‹d
;

87 
BOOLEAN
 
	mA˘ive
;

91 
BOOLEAN
 
	mU£DeÁu…Sëtög
;

95 
EFI_IPv4_ADDRESS
 
	mSèti⁄Ip
;

99 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

103 
EFI_IPv4_ADDRESS
 
	mG©ewayIp
;

107 
EFI_IPv4_ADDRESS
 
	mSîvîIp
;

112 
UINT16
 
	mSîvîP‹t
;

117 
UINT16
 
	mA…D©aP‹t
;

127 
UINT8
 
	mRïTy≥
;

131 
UINT8
 
	mFûeSåu˘
;

135 
UINT8
 
	mTønsMode
;

136 } 
	tEFI_FTP4_CONFIG_DATA
;

138 
_EFI_FTP4_COMMAND_TOKEN
 
	tEFI_FTP4_COMMAND_TOKEN
;

157 
	gEFI_STATUS


158 (
	tEFIAPI
 *
	tEFI_FTP4_DATA_CALLBACK
)(

159 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

160 
	tIN
 
	tEFI_FTP4_COMMAND_TOKEN
 *
	tTokí


166 
	s_EFI_FTP4_COMMAND_TOKEN
 {

175 
EFI_EVENT
 
	mEvít
;

179 
UINT8
 *
	mP©h«me
;

183 
UINT64
 
	mD©aBuf„rSize
;

188 
VOID
 *
	mD©aBuf„r
;

201 
EFI_FTP4_DATA_CALLBACK
 
	mD©aCÆlback
;

205 
VOID
 *
	mC⁄ãxt
;

226 
EFI_STATUS
 
	mSètus
;

253 
	gEFI_STATUS


254 (
	tEFIAPI
 *
	tEFI_FTP4_GET_MODE_DATA
)(

255 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

256 
	tOUT
 
	tEFI_FTP4_CONFIG_DATA
 *
	tModeD©a


284 
	gEFI_STATUS


285 (
	tEFIAPI
 *
	tEFI_FTP4_CONNECT
)(

286 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

287 
	tIN
 
	tEFI_FTP4_CONNECTION_TOKEN
 *
	tTokí


313 
	gEFI_STATUS


314 (
	tEFIAPI
 *
	tEFI_FTP4_CLOSE
)(

315 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

316 
	tIN
 
	tEFI_FTP4_CONNECTION_TOKEN
 *
	tTokí


350 
	gEFI_STATUS


351 (
	tEFIAPI
 *
	tEFI_FTP4_CONFIGURE
)(

352 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

353 
	tIN
 
	tEFI_FTP4_CONFIG_DATA
 *
	tFçC⁄figD©a
 
	tOPTIONAL


388 
	gEFI_STATUS


389 (
	tEFIAPI
 *
	tEFI_FTP4_READ_FILE
)(

390 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

391 
	tIN
 
	tEFI_FTP4_COMMAND_TOKEN
 *
	tTokí


428 
	gEFI_STATUS


429 (
	tEFIAPI
 *
	tEFI_FTP4_WRITE_FILE
)(

430 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

431 
	tIN
 
	tEFI_FTP4_COMMAND_TOKEN
 *
	tTokí


465 
	gEFI_STATUS


466 (
	tEFIAPI
 *
	tEFI_FTP4_READ_DIRECTORY
)(

467 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis
,

468 
	tIN
 
	tEFI_FTP4_COMMAND_TOKEN
 *
	tTokí


493 
	gEFI_STATUS


494 (
	tEFIAPI
 *
	tEFI_FTP4_POLL
)(

495 
	tIN
 
	tEFI_FTP4_PROTOCOL
 *
	tThis


503 
	s_EFI_FTP4_PROTOCOL
 {

504 
EFI_FTP4_GET_MODE_DATA
 
	mGëModeD©a
;

505 
EFI_FTP4_CONNECT
 
	mC⁄√˘
;

506 
EFI_FTP4_CLOSE
 
	mClo£
;

507 
EFI_FTP4_CONFIGURE
 
	mC⁄figuª
;

508 
EFI_FTP4_READ_FILE
 
	mRódFûe
;

509 
EFI_FTP4_WRITE_FILE
 
	mWrôeFûe
;

510 
EFI_FTP4_READ_DIRECTORY
 
	mRódDúe˘‹y
;

511 
EFI_FTP4_POLL
 
	mPﬁl
;

514 
EFI_GUID
 
gEfiFç4Sîvi˚BödögPrŸocﬁGuid
;

515 
EFI_GUID
 
gEfiFç4PrŸocﬁGuid
;

	@GraphicsOutput.h

11 #i‚de‡
__GRAPHICS_OUTPUT_H__


12 
	#__GRAPHICS_OUTPUT_H__


	)

14 
	#EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID
 \

	)

19 
_EFI_GRAPHICS_OUTPUT_PROTOCOL
 
	tEFI_GRAPHICS_OUTPUT_PROTOCOL
;

22 
UINT32
 
	mRedMask
;

23 
UINT32
 
	mGªíMask
;

24 
UINT32
 
	mBlueMask
;

25 
UINT32
 
	mRe£rvedMask
;

26 } 
	tEFI_PIXEL_BITMASK
;

36 
	mPixñRedGªíBlueRe£rved8BôPîCﬁ‹
,

44 
	mPixñBlueGªíRedRe£rved8BôPîCﬁ‹
,

48 
	mPixñBôMask
,

52 
	mPixñB…O∆y
,

56 
	mPixñF‹m©Max


57 } 
	tEFI_GRAPHICS_PIXEL_FORMAT
;

64 
UINT32
 
	mVîsi⁄
;

68 
UINT32
 
	mH‹iz⁄èlResﬁuti⁄
;

72 
UINT32
 
	mVîtiˇlResﬁuti⁄
;

77 
EFI_GRAPHICS_PIXEL_FORMAT
 
	mPixñF‹m©
;

82 
EFI_PIXEL_BITMASK
 
	mPixñInf‹m©i⁄
;

86 
UINT32
 
	mPixñsPîSˇnLöe
;

87 } 
	tEFI_GRAPHICS_OUTPUT_MODE_INFORMATION
;

104 
	gEFI_STATUS


105 (
	tEFIAPI
 *
	tEFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE
)(

106 
	tIN
 
	tEFI_GRAPHICS_OUTPUT_PROTOCOL
 *
	tThis
,

107 
	tIN
 
	tUINT32
 
	tModeNumbî
,

108 
	tOUT
 
	tUINTN
 *
	tSizeOfInfo
,

109 
	tOUT
 
	tEFI_GRAPHICS_OUTPUT_MODE_INFORMATION
 **
	tInfo


125 
	gEFI_STATUS


126 (
	tEFIAPI
 *
	tEFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE
)(

127 
	tIN
 
	tEFI_GRAPHICS_OUTPUT_PROTOCOL
 *
	tThis
,

128 
	tIN
 
	tUINT32
 
	tModeNumbî


132 
UINT8
 
	mBlue
;

133 
UINT8
 
	mGªí
;

134 
UINT8
 
	mRed
;

135 
UINT8
 
	mRe£rved
;

136 } 
	tEFI_GRAPHICS_OUTPUT_BLT_PIXEL
;

139 
EFI_GRAPHICS_OUTPUT_BLT_PIXEL
 
	mPixñ
;

140 
UINT32
 
	mRaw
;

141 } 
	tEFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION
;

153 
	mEfiB…VideoFûl
,

163 
	mEfiB…VideoToB…Buf„r
,

173 
	mEfiB…Buf„rToVideo
,

181 
	mEfiB…VideoToVideo
,

183 
	mEfiGøphicsOuçutB…O≥øti⁄Max


184 } 
	tEFI_GRAPHICS_OUTPUT_BLT_OPERATION
;

210 
	gEFI_STATUS


211 (
	tEFIAPI
 *
	tEFI_GRAPHICS_OUTPUT_PROTOCOL_BLT
)(

212 
	tIN
 
	tEFI_GRAPHICS_OUTPUT_PROTOCOL
 *
	tThis
,

213 
	tIN
 
	tEFI_GRAPHICS_OUTPUT_BLT_PIXEL
 *
	tB…Buf„r
, 
	tOPTIONAL


214 
	tIN
 
	tEFI_GRAPHICS_OUTPUT_BLT_OPERATION
 
	tB…O≥øti⁄
,

215 
	tIN
 
	tUINTN
 
	tSour˚X
,

216 
	tIN
 
	tUINTN
 
	tSour˚Y
,

217 
	tIN
 
	tUINTN
 
	tDe°ö©i⁄X
,

218 
	tIN
 
	tUINTN
 
	tDe°ö©i⁄Y
,

219 
	tIN
 
	tUINTN
 
	tWidth
,

220 
	tIN
 
	tUINTN
 
	tHeight
,

221 
	tIN
 
	tUINTN
 
	tDñè
 
	tOPTIONAL


228 
UINT32
 
	mMaxMode
;

232 
UINT32
 
	mMode
;

236 
EFI_GRAPHICS_OUTPUT_MODE_INFORMATION
 *
	mInfo
;

240 
UINTN
 
	mSizeOfInfo
;

245 
EFI_PHYSICAL_ADDRESS
 
	mFømeBuf„rBa£
;

250 
UINTN
 
	mFømeBuf„rSize
;

251 } 
	tEFI_GRAPHICS_OUTPUT_PROTOCOL_MODE
;

258 
	s_EFI_GRAPHICS_OUTPUT_PROTOCOL
 {

259 
EFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE
 
	mQuîyMode
;

260 
EFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE
 
	mSëMode
;

261 
EFI_GRAPHICS_OUTPUT_PROTOCOL_BLT
 
	mB…
;

265 
EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE
 *
	mMode
;

268 
EFI_GUID
 
gEfiGøphicsOuçutPrŸocﬁGuid
;

	@GuidedSectionExtraction.h

15 #i‚de‡
__GUID_SECTION_EXTRACTION_PROTOCOL_H__


16 
	#__GUID_SECTION_EXTRACTION_PROTOCOL_H__


	)

29 
_EFI_GUIDED_SECTION_EXTRACTION_PROTOCOL
 
	tEFI_GUIDED_SECTION_EXTRACTION_PROTOCOL
;

113 
	gEFI_STATUS


114 (
	tEFIAPI
 *
	tEFI_EXTRACT_GUIDED_SECTION
)(

115 
	tIN
 
	tCONST
 
	tEFI_GUIDED_SECTION_EXTRACTION_PROTOCOL
 *
	tThis
,

116 
	tIN
 
	tCONST
 
	tVOID
 *
	tI≈utSe˘i⁄
,

117 
	tOUT
 
	tVOID
 **
	tOuçutBuf„r
,

118 
	tOUT
 
	tUINTN
 *
	tOuçutSize
,

119 
	tOUT
 
	tUINT32
 *
	tAuthítiˇti⁄Sètus


130 
	s_EFI_GUIDED_SECTION_EXTRACTION_PROTOCOL
 {

131 
EFI_EXTRACT_GUIDED_SECTION
 
	mExåa˘Se˘i⁄
;

	@Hash.h

13 #i‚de‡
__EFI_HASH_PROTOCOL_H__


14 
	#__EFI_HASH_PROTOCOL_H__


	)

16 
	#EFI_HASH_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

21 
	#EFI_HASH_PROTOCOL_GUID
 \

	)

26 
	#EFI_HASH_ALGORITHM_SHA1_GUID
 \

	)

31 
	#EFI_HASH_ALGORITHM_SHA224_GUID
 \

	)

36 
	#EFI_HASH_ALGORITHM_SHA256_GUID
 \

	)

41 
	#EFI_HASH_ALGORITHM_SHA384_GUID
 \

	)

46 
	#EFI_HASH_ALGORITHM_SHA512_GUID
 \

	)

51 
	#EFI_HASH_ALGORTIHM_MD5_GUID
 \

	)

56 
	#EFI_HASH_ALGORITHM_SHA1_NOPAD_GUID
 \

	)

61 
	#EFI_HASH_ALGORITHM_SHA256_NOPAD_GUID
 \

	)

76 
_EFI_HASH_PROTOCOL
 
	tEFI_HASH_PROTOCOL
;

78 
UINT8
 
	tEFI_MD5_HASH
[16];

79 
UINT8
 
	tEFI_SHA1_HASH
[20];

80 
UINT8
 
	tEFI_SHA224_HASH
[28];

81 
UINT8
 
	tEFI_SHA256_HASH
[32];

82 
UINT8
 
	tEFI_SHA384_HASH
[48];

83 
UINT8
 
	tEFI_SHA512_HASH
[64];

86 
EFI_MD5_HASH
 *
	mMd5Hash
;

87 
EFI_SHA1_HASH
 *
	mSha1Hash
;

88 
EFI_SHA224_HASH
 *
	mSha224Hash
;

89 
EFI_SHA256_HASH
 *
	mSha256Hash
;

90 
EFI_SHA384_HASH
 *
	mSha384Hash
;

91 
EFI_SHA512_HASH
 *
	mSha512Hash
;

92 } 
	tEFI_HASH_OUTPUT
;

108 
	gEFI_STATUS


109 (
	tEFIAPI
 *
	tEFI_HASH_GET_HASH_SIZE
)(

110 
	tIN
 
	tCONST
 
	tEFI_HASH_PROTOCOL
 *
	tThis
,

111 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

112 
	tOUT
 
	tUINTN
 *
	tHashSize


139 
	gEFI_STATUS


140 (
	tEFIAPI
 *
	tEFI_HASH_HASH
)(

141 
	tIN
 
	tCONST
 
	tEFI_HASH_PROTOCOL
 *
	tThis
,

142 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

143 
	tIN
 
	tBOOLEAN
 
	tExãnd
,

144 
	tIN
 
	tCONST
 
	tUINT8
 *
	tMesßge
,

145 
	tIN
 
	tUINT64
 
	tMesßgeSize
,

146 
	tIN
 
	tOUT
 
	tEFI_HASH_OUTPUT
 *
	tHash


153 
	s_EFI_HASH_PROTOCOL
 {

154 
EFI_HASH_GET_HASH_SIZE
 
	mGëHashSize
;

155 
EFI_HASH_HASH
 
	mHash
;

158 
EFI_GUID
 
gEfiHashSîvi˚BödögPrŸocﬁGuid
;

159 
EFI_GUID
 
gEfiHashPrŸocﬁGuid
;

160 
EFI_GUID
 
gEfiHashAlg‹ôhmSha1Guid
;

161 
EFI_GUID
 
gEfiHashAlg‹ôhmSha224Guid
;

162 
EFI_GUID
 
gEfiHashAlg‹ôhmSha256Guid
;

163 
EFI_GUID
 
gEfiHashAlg‹ôhmSha384Guid
;

164 
EFI_GUID
 
gEfiHashAlg‹ôhmSha512Guid
;

165 
EFI_GUID
 
gEfiHashAlg‹ôhmMD5Guid
;

166 
EFI_GUID
 
gEfiHashAlg‹ôhmSha1NoPadGuid
;

167 
EFI_GUID
 
gEfiHashAlg‹ôhmSha256NoPadGuid
;

	@Hash2.h

15 #i‚de‡
__EFI_HASH2_PROTOCOL_H__


16 
	#__EFI_HASH2_PROTOCOL_H__


	)

18 
	#EFI_HASH2_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

23 
	#EFI_HASH2_PROTOCOL_GUID
 \

	)

28 
	~<PrŸocﬁ/Hash.h
>

43 
_EFI_HASH2_PROTOCOL
 
	tEFI_HASH2_PROTOCOL
;

45 
UINT8
 
	tEFI_MD5_HASH2
[16];

46 
UINT8
 
	tEFI_SHA1_HASH2
[20];

47 
UINT8
 
	tEFI_SHA224_HASH2
[28];

48 
UINT8
 
	tEFI_SHA256_HASH2
[32];

49 
UINT8
 
	tEFI_SHA384_HASH2
[48];

50 
UINT8
 
	tEFI_SHA512_HASH2
[64];

53 
EFI_MD5_HASH2
 
	mMd5Hash
;

54 
EFI_SHA1_HASH2
 
	mSha1Hash
;

55 
EFI_SHA224_HASH2
 
	mSha224Hash
;

56 
EFI_SHA256_HASH2
 
	mSha256Hash
;

57 
EFI_SHA384_HASH2
 
	mSha384Hash
;

58 
EFI_SHA512_HASH2
 
	mSha512Hash
;

59 } 
	tEFI_HASH2_OUTPUT
;

75 
	gEFI_STATUS


76 (
	tEFIAPI
 *
	tEFI_HASH2_GET_HASH_SIZE
)(

77 
	tIN
 
	tCONST
 
	tEFI_HASH2_PROTOCOL
 *
	tThis
,

78 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

79 
	tOUT
 
	tUINTN
 *
	tHashSize


103 
	gEFI_STATUS


104 (
	tEFIAPI
 *
	tEFI_HASH2_HASH
)(

105 
	tIN
 
	tCONST
 
	tEFI_HASH2_PROTOCOL
 *
	tThis
,

106 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

107 
	tIN
 
	tCONST
 
	tUINT8
 *
	tMesßge
,

108 
	tIN
 
	tUINTN
 
	tMesßgeSize
,

109 
	tIN
 
	tOUT
 
	tEFI_HASH2_OUTPUT
 *
	tHash


129 
	gEFI_STATUS


130 (
	tEFIAPI
 *
	tEFI_HASH2_HASH_INIT
)(

131 
	tIN
 
	tCONST
 
	tEFI_HASH2_PROTOCOL
 *
	tThis
,

132 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tHashAlg‹ôhm


151 
	gEFI_STATUS


152 (
	tEFIAPI
 *
	tEFI_HASH2_HASH_UPDATE
)(

153 
	tIN
 
	tCONST
 
	tEFI_HASH2_PROTOCOL
 *
	tThis
,

154 
	tIN
 
	tCONST
 
	tUINT8
 *
	tMesßge
,

155 
	tIN
 
	tUINTN
 
	tMesßgeSize


175 
	gEFI_STATUS


176 (
	tEFIAPI
 *
	tEFI_HASH2_HASH_FINAL
)(

177 
	tIN
 
	tCONST
 
	tEFI_HASH2_PROTOCOL
 *
	tThis
,

178 
	tIN
 
	tOUT
 
	tEFI_HASH2_OUTPUT
 *
	tHash


185 
	s_EFI_HASH2_PROTOCOL
 {

186 
EFI_HASH2_GET_HASH_SIZE
 
	mGëHashSize
;

187 
EFI_HASH2_HASH
 
	mHash
;

188 
EFI_HASH2_HASH_INIT
 
	mHashInô
;

189 
EFI_HASH2_HASH_UPDATE
 
	mHashUpd©e
;

190 
EFI_HASH2_HASH_FINAL
 
	mHashFöÆ
;

193 
EFI_GUID
 
gEfiHash2Sîvi˚BödögPrŸocﬁGuid
;

194 
EFI_GUID
 
gEfiHash2PrŸocﬁGuid
;

	@HiiConfigAccess.h

17 #i‚de‡
__EFI_HII_CONFIG_ACCESS_H__


18 
	#__EFI_HII_CONFIG_ACCESS_H__


	)

20 
	~<PrŸocﬁ/F‹mBrow£r2.h
>

22 
	#EFI_HII_CONFIG_ACCESS_PROTOCOL_GUID
 \

	)

25 
_EFI_HII_CONFIG_ACCESS_PROTOCOL
 
	tEFI_HII_CONFIG_ACCESS_PROTOCOL
;

27 
UINTN
 
	tEFI_BROWSER_ACTION
;

29 
	#EFI_BROWSER_ACTION_CHANGING
 0

	)

30 
	#EFI_BROWSER_ACTION_CHANGED
 1

	)

31 
	#EFI_BROWSER_ACTION_RETRIEVE
 2

	)

32 
	#EFI_BROWSER_ACTION_FORM_OPEN
 3

	)

33 
	#EFI_BROWSER_ACTION_FORM_CLOSE
 4

	)

34 
	#EFI_BROWSER_ACTION_SUBMITTED
 5

	)

35 
	#EFI_BROWSER_ACTION_DEFAULT_STANDARD
 0x1000

	)

36 
	#EFI_BROWSER_ACTION_DEFAULT_MANUFACTURING
 0x1001

	)

37 
	#EFI_BROWSER_ACTION_DEFAULT_SAFE
 0x1002

	)

38 
	#EFI_BROWSER_ACTION_DEFAULT_PLATFORM
 0x2000

	)

39 
	#EFI_BROWSER_ACTION_DEFAULT_HARDWARE
 0x3000

	)

40 
	#EFI_BROWSER_ACTION_DEFAULT_FIRMWARE
 0x4000

	)

111 
	gEFI_STATUS


112 (
	tEFIAPI
 * 
	tEFI_HII_ACCESS_EXTRACT_CONFIG
)(

113 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ACCESS_PROTOCOL
 *
	tThis
,

114 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tReque°
,

115 
	tOUT
 
	tEFI_STRING
 *
	tProgªss
,

116 
	tOUT
 
	tEFI_STRING
 *
	tResu…s


161 
	gEFI_STATUS


162 (
	tEFIAPI
 * 
	tEFI_HII_ACCESS_ROUTE_CONFIG
)(

163 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ACCESS_PROTOCOL
 *
	tThis
,

164 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tC⁄figuøti⁄
,

165 
	tOUT
 
	tEFI_STRING
 *
	tProgªss


194 
	gEFI_STATUS


195 (
	tEFIAPI
 *
	tEFI_HII_ACCESS_FORM_CALLBACK
)(

196 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ACCESS_PROTOCOL
 *
	tThis
,

197 
	tIN
 
	tEFI_BROWSER_ACTION
 
	tA˘i⁄
,

198 
	tIN
 
	tEFI_QUESTION_ID
 
	tQue°i⁄Id
,

199 
	tIN
 
	tUINT8
 
	tTy≥
,

200 
	tIN
 
	tOUT
 
	tEFI_IFR_TYPE_VALUE
 *
	tVÆue
,

201 
	tOUT
 
	tEFI_BROWSER_ACTION_REQUEST
 *
	tA˘i⁄Reque°


210 
	s_EFI_HII_CONFIG_ACCESS_PROTOCOL
 {

211 
EFI_HII_ACCESS_EXTRACT_CONFIG
 
	mExåa˘C⁄fig
;

212 
EFI_HII_ACCESS_ROUTE_CONFIG
 
	mRouãC⁄fig
;

213 
EFI_HII_ACCESS_FORM_CALLBACK
 
	mCÆlback
;

216 
EFI_GUID
 
gEfiHiiC⁄figAc˚ssPrŸocﬁGuid
;

	@HiiConfigKeyword.h

15 #i‚de‡
__EFI_CONFIG_KEYWORD_HANDLER_H__


16 
	#__EFI_CONFIG_KEYWORD_HANDLER_H__


	)

18 
	#EFI_CONFIG_KEYWORD_HANDLER_PROTOCOL_GUID
 \

	)

26 
	#KEYWORD_HANDLER_NO_ERROR
 0x00000000

	)

27 
	#KEYWORD_HANDLER_NAMESPACE_ID_NOT_FOUND
 0x00000001

	)

28 
	#KEYWORD_HANDLER_MALFORMED_STRING
 0x00000002

	)

29 
	#KEYWORD_HANDLER_KEYWORD_NOT_FOUND
 0x00000004

	)

30 
	#KEYWORD_HANDLER_INCOMPATIBLE_VALUE_DETECTED
 0x00000008

	)

31 
	#KEYWORD_HANDLER_ACCESS_NOT_PERMITTED
 0x00000010

	)

32 
	#KEYWORD_HANDLER_UNDEFINED_PROCESSING_ERROR
 0x80000000

	)

34 
_EFI_CONFIG_KEYWORD_HANDLER_PROTOCOL
 
	tEFI_CONFIG_KEYWORD_HANDLER_PROTOCOL
;

96 
	gEFI_STATUS


97 (
	tEFIAPI
 *
	tEFI_CONFIG_KEYWORD_HANDLER_SET_DATA
) (

98 
	tIN
 
	tEFI_CONFIG_KEYWORD_HANDLER_PROTOCOL
 *
	tThis
,

99 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tKeyw‹dSåög
,

100 
	tOUT
 
	tEFI_STRING
 *
	tProgªss
,

101 
	tOUT
 
	tUINT32
 *
	tProgªssEº


175 
	gEFI_STATUS


176 (
	tEFIAPI
 *
	tEFI_CONFIG_KEYWORD_HANDLER_GET_DATA
) (

177 
	tIN
 
	tEFI_CONFIG_KEYWORD_HANDLER_PROTOCOL
 *
	tThis
,

178 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tNameS∑˚Id
, 
	tOPTIONAL


179 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tKeyw‹dSåög
, 
	tOPTIONAL


180 
	tOUT
 
	tEFI_STRING
 *
	tProgªss
,

181 
	tOUT
 
	tUINT32
 *
	tProgªssEº
,

182 
	tOUT
 
	tEFI_STRING
 *
	tResu…s


191 
	s_EFI_CONFIG_KEYWORD_HANDLER_PROTOCOL
 {

192 
EFI_CONFIG_KEYWORD_HANDLER_SET_DATA
 
	mSëD©a
;

193 
EFI_CONFIG_KEYWORD_HANDLER_GET_DATA
 
	mGëD©a
;

196 
EFI_GUID
 
gEfiC⁄figKeyw‹dH™dÀrPrŸocﬁGuid
;

	@HiiConfigRouting.h

17 #i‚de‡
__HII_CONFIG_ROUTING_H__


18 
	#__HII_CONFIG_ROUTING_H__


	)

20 
	#EFI_HII_CONFIG_ROUTING_PROTOCOL_GUID
 \

	)

24 
_EFI_HII_CONFIG_ROUTING_PROTOCOL
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
;

110 
	gEFI_STATUS


111 (
	tEFIAPI
 * 
	tEFI_HII_EXTRACT_CONFIG
)(

112 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

113 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tReque°
,

114 
	tOUT
 
	tEFI_STRING
 *
	tProgªss
,

115 
	tOUT
 
	tEFI_STRING
 *
	tResu…s


152 
	gEFI_STATUS


153 (
	tEFIAPI
 * 
	tEFI_HII_EXPORT_CONFIG
)(

154 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

155 
	tOUT
 
	tEFI_STRING
 *
	tResu…s


198 
	gEFI_STATUS


199 (
	tEFIAPI
 * 
	tEFI_HII_ROUTE_CONFIG
)(

200 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

201 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tC⁄figuøti⁄
,

202 
	tOUT
 
	tEFI_STRING
 *
	tProgªss


268 
	gEFI_STATUS


269 (
	tEFIAPI
 * 
	tEFI_HII_BLOCK_TO_CONFIG
)(

270 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

271 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tC⁄figReque°
,

272 
	tIN
 
	tCONST
 
	tUINT8
 *
	tBlock
,

273 
	tIN
 
	tCONST
 
	tUINTN
 
	tBlockSize
,

274 
	tOUT
 
	tEFI_STRING
 *
	tC⁄fig
,

275 
	tOUT
 
	tEFI_STRING
 *
	tProgªss


345 
	gEFI_STATUS


346 (
	tEFIAPI
 * 
	tEFI_HII_CONFIG_TO_BLOCK
)(

347 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

348 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tC⁄figRe•
,

349 
	tIN
 
	tOUT
 
	tUINT8
 *
	tBlock
,

350 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBlockSize
,

351 
	tOUT
 
	tEFI_STRING
 *
	tProgªss


388 
	gEFI_STATUS


389 (
	tEFIAPI
 * 
	tEFI_HII_GET_ALT_CFG
)(

390 
	tIN
 
	tCONST
 
	tEFI_HII_CONFIG_ROUTING_PROTOCOL
 *
	tThis
,

391 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tC⁄figRe•
,

392 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

393 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tName
,

394 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

395 
	tIN
 
	tCONST
 
	tUINT16
 *
	tA…CfgId
,

396 
	tOUT
 
	tEFI_STRING
 *
	tA…CfgRe•


404 
	s_EFI_HII_CONFIG_ROUTING_PROTOCOL
 {

405 
EFI_HII_EXTRACT_CONFIG
 
	mExåa˘C⁄fig
;

406 
EFI_HII_EXPORT_CONFIG
 
	mExp‹tC⁄fig
;

407 
EFI_HII_ROUTE_CONFIG
 
	mRouãC⁄fig
;

408 
EFI_HII_BLOCK_TO_CONFIG
 
	mBlockToC⁄fig
;

409 
EFI_HII_CONFIG_TO_BLOCK
 
	mC⁄figToBlock
;

410 
EFI_HII_GET_ALT_CFG
 
	mGëA…C⁄fig
;

413 
EFI_GUID
 
gEfiHiiC⁄figRoutögPrŸocﬁGuid
;

	@HiiDatabase.h

13 #i‚de‡
__HII_DATABASE_H__


14 
	#__HII_DATABASE_H__


	)

16 
	#EFI_HII_DATABASE_PROTOCOL_GUID
 \

	)

20 
_EFI_HII_DATABASE_PROTOCOL
 
	tEFI_HII_DATABASE_PROTOCOL
;

26 
UINTN
 
	tEFI_HII_DATABASE_NOTIFY_TYPE
;

28 
	#EFI_HII_DATABASE_NOTIFY_NEW_PACK
 0x00000001

	)

29 
	#EFI_HII_DATABASE_NOTIFY_REMOVE_PACK
 0x00000002

	)

30 
	#EFI_HII_DATABASE_NOTIFY_EXPORT_PACK
 0x00000004

	)

31 
	#EFI_HII_DATABASE_NOTIFY_ADD_PACK
 0x00000008

	)

59 
	gEFI_STATUS


60 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_NOTIFY
)(

61 
	tIN
 
	tUINT8
 
	tPackageTy≥
,

62 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tPackageGuid
,

63 
	tIN
 
	tCONST
 
	tEFI_HII_PACKAGE_HEADER
 *
	tPackage
,

64 
	tIN
 
	tEFI_HII_HANDLE
 
	tH™dÀ
,

65 
	tIN
 
	tEFI_HII_DATABASE_NOTIFY_TYPE
 
	tNŸifyTy≥


102 
	gEFI_STATUS


103 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_NEW_PACK
)(

104 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

105 
	tIN
 
	tCONST
 
	tEFI_HII_PACKAGE_LIST_HEADER
 *
	tPackageLi°
,

106 
	tIN
 
	tEFI_HANDLE
 
	tDrivîH™dÀ
, 
	tOPTIONAL


107 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tH™dÀ


131 
	gEFI_STATUS


132 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_REMOVE_PACK
)(

133 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

134 
	tIN
 
	tEFI_HII_HANDLE
 
	tH™dÀ


179 
	gEFI_STATUS


180 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_UPDATE_PACK
)(

181 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

182 
	tIN
 
	tEFI_HII_HANDLE
 
	tH™dÀ
,

183 
	tIN
 
	tCONST
 
	tEFI_HII_PACKAGE_LIST_HEADER
 *
	tPackageLi°


231 
	gEFI_STATUS


232 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_LIST_PACKS
)(

233 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

234 
	tIN
 
	tUINT8
 
	tPackageTy≥
,

235 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tPackageGuid
,

236 
	tIN
 
	tOUT
 
	tUINTN
 *
	tH™dÀBuf„rLígth
,

237 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tH™dÀ


282 
	gEFI_STATUS


283 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_EXPORT_PACKS
)(

284 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

285 
	tIN
 
	tEFI_HII_HANDLE
 
	tH™dÀ
,

286 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

287 
	tOUT
 
	tEFI_HII_PACKAGE_LIST_HEADER
 *
	tBuf„r


343 
	gEFI_STATUS


344 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_REGISTER_NOTIFY
)(

345 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

346 
	tIN
 
	tUINT8
 
	tPackageTy≥
,

347 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tPackageGuid
,

348 
	tIN
 
	tEFI_HII_DATABASE_NOTIFY
 
	tPackageNŸifyFn
,

349 
	tIN
 
	tEFI_HII_DATABASE_NOTIFY_TYPE
 
	tNŸifyTy≥
,

350 
	tOUT
 
	tEFI_HANDLE
 *
	tNŸifyH™dÀ


370 
	gEFI_STATUS


371 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_UNREGISTER_NOTIFY
)(

372 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

373 
	tIN
 
	tEFI_HANDLE
 
	tNŸifiˇti⁄H™dÀ


410 
	gEFI_STATUS


411 (
	tEFIAPI
 *
	tEFI_HII_FIND_KEYBOARD_LAYOUTS
)(

412 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

413 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyGuidBuf„rLígth
,

414 
	tOUT
 
	tEFI_GUID
 *
	tKeyGuidBuf„r


445 
	gEFI_STATUS


446 (
	tEFIAPI
 *
	tEFI_HII_GET_KEYBOARD_LAYOUT
)(

447 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

448 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tKeyGuid
,

449 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeybﬂrdLayoutLígth
,

450 
	tOUT
 
	tEFI_HII_KEYBOARD_LAYOUT
 *
	tKeybﬂrdLayout


474 
	gEFI_STATUS


475 (
	tEFIAPI
 *
	tEFI_HII_SET_KEYBOARD_LAYOUT
)(

476 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

477 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tKeyGuid


500 
	gEFI_STATUS


501 (
	tEFIAPI
 *
	tEFI_HII_DATABASE_GET_PACK_HANDLE
)(

502 
	tIN
 
	tCONST
 
	tEFI_HII_DATABASE_PROTOCOL
 *
	tThis
,

503 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°H™dÀ
,

504 
	tOUT
 
	tEFI_HANDLE
 *
	tDrivîH™dÀ


510 
	s_EFI_HII_DATABASE_PROTOCOL
 {

511 
EFI_HII_DATABASE_NEW_PACK
 
	mNewPackageLi°
;

512 
EFI_HII_DATABASE_REMOVE_PACK
 
	mRemovePackageLi°
;

513 
EFI_HII_DATABASE_UPDATE_PACK
 
	mUpd©ePackageLi°
;

514 
EFI_HII_DATABASE_LIST_PACKS
 
	mLi°PackageLi°s
;

515 
EFI_HII_DATABASE_EXPORT_PACKS
 
	mExp‹tPackageLi°s
;

516 
EFI_HII_DATABASE_REGISTER_NOTIFY
 
	mRegi°îPackageNŸify
;

517 
EFI_HII_DATABASE_UNREGISTER_NOTIFY
 
	mUƒegi°îPackageNŸify
;

518 
EFI_HII_FIND_KEYBOARD_LAYOUTS
 
	mFödKeybﬂrdLayouts
;

519 
EFI_HII_GET_KEYBOARD_LAYOUT
 
	mGëKeybﬂrdLayout
;

520 
EFI_HII_SET_KEYBOARD_LAYOUT
 
	mSëKeybﬂrdLayout
;

521 
EFI_HII_DATABASE_GET_PACK_HANDLE
 
	mGëPackageLi°H™dÀ
;

524 
EFI_GUID
 
gEfiHiiD©aba£PrŸocﬁGuid
;

	@HiiFont.h

12 #i‚de‡
__HII_FONT_H__


13 
	#__HII_FONT_H__


	)

15 
	~<PrŸocﬁ/GøphicsOuçut.h
>

16 
	~<PrŸocﬁ/HiiImage.h
>

18 
	#EFI_HII_FONT_PROTOCOL_GUID
 \

	)

21 
_EFI_HII_FONT_PROTOCOL
 
	tEFI_HII_FONT_PROTOCOL
;

23 
VOID
 *
	tEFI_FONT_HANDLE
;

28 
UINT32
 
	tEFI_HII_OUT_FLAGS
;

30 
	#EFI_HII_OUT_FLAG_CLIP
 0x00000001

	)

31 
	#EFI_HII_OUT_FLAG_WRAP
 0x00000002

	)

32 
	#EFI_HII_OUT_FLAG_CLIP_CLEAN_Y
 0x00000004

	)

33 
	#EFI_HII_OUT_FLAG_CLIP_CLEAN_X
 0x00000008

	)

34 
	#EFI_HII_OUT_FLAG_TRANSPARENT
 0x00000010

	)

35 
	#EFI_HII_IGNORE_IF_NO_GLYPH
 0x00000020

	)

36 
	#EFI_HII_IGNORE_LINE_BREAK
 0x00000040

	)

37 
	#EFI_HII_DIRECT_TO_SCREEN
 0x00000080

	)

42 
	s_EFI_HII_ROW_INFO
 {

46 
UINTN
 
	mSèπIndex
;

51 
UINTN
 
	mEndIndex
;

52 
UINTN
 
	mLöeHeight
;

53 
UINTN
 
	mLöeWidth
;

58 
UINTN
 
	mBa£löeOff£t
;

59 } 
	tEFI_HII_ROW_INFO
;

65 
UINT32
 
	tEFI_FONT_INFO_MASK
;

67 
	#EFI_FONT_INFO_SYS_FONT
 0x00000001

	)

68 
	#EFI_FONT_INFO_SYS_SIZE
 0x00000002

	)

69 
	#EFI_FONT_INFO_SYS_STYLE
 0x00000004

	)

70 
	#EFI_FONT_INFO_SYS_FORE_COLOR
 0x00000010

	)

71 
	#EFI_FONT_INFO_SYS_BACK_COLOR
 0x00000020

	)

72 
	#EFI_FONT_INFO_RESIZE
 0x00001000

	)

73 
	#EFI_FONT_INFO_RESTYLE
 0x00002000

	)

74 
	#EFI_FONT_INFO_ANY_FONT
 0x00010000

	)

75 
	#EFI_FONT_INFO_ANY_SIZE
 0x00020000

	)

76 
	#EFI_FONT_INFO_ANY_STYLE
 0x00040000

	)

82 
EFI_HII_FONT_STYLE
 
	mF⁄tStyÀ
;

83 
UINT16
 
	mF⁄tSize
;

84 
CHAR16
 
	mF⁄tName
[1];

85 } 
	tEFI_FONT_INFO
;

99 
	s_EFI_FONT_DISPLAY_INFO
 {

100 
EFI_GRAPHICS_OUTPUT_BLT_PIXEL
 
	mF‹egroundCﬁ‹
;

101 
EFI_GRAPHICS_OUTPUT_BLT_PIXEL
 
	mBackgroundCﬁ‹
;

102 
EFI_FONT_INFO_MASK
 
	mF⁄tInfoMask
;

103 
EFI_FONT_INFO
 
	mF⁄tInfo
;

104 } 
	tEFI_FONT_DISPLAY_INFO
;

211 
	gEFI_STATUS


212 (
	tEFIAPI
 *
	tEFI_HII_STRING_TO_IMAGE
)(

213 
	tIN
 
	tCONST
 
	tEFI_HII_FONT_PROTOCOL
 *
	tThis
,

214 
	tIN
 
	tEFI_HII_OUT_FLAGS
 
	tFœgs
,

215 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tSåög
,

216 
	tIN
 
	tCONST
 
	tEFI_FONT_DISPLAY_INFO
 *
	tSåögInfo
,

217 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

218 
	tIN
 
	tUINTN
 
	tB…X
,

219 
	tIN
 
	tUINTN
 
	tB…Y
,

220 
	tOUT
 
	tEFI_HII_ROW_INFO
 **
	tRowInfoAºay
 
	tOPTIONAL
,

221 
	tOUT
 
	tUINTN
 *
	tRowInfoAºaySize
 
	tOPTIONAL
,

222 
	tOUT
 
	tUINTN
 *
	tCﬁumnInfoAºay
 
	tOPTIONAL


347 
	gEFI_STATUS


348 (
	tEFIAPI
 *
	tEFI_HII_STRING_ID_TO_IMAGE
)(

349 
	tIN
 
	tCONST
 
	tEFI_HII_FONT_PROTOCOL
 *
	tThis
,

350 
	tIN
 
	tEFI_HII_OUT_FLAGS
 
	tFœgs
,

351 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

352 
	tIN
 
	tEFI_STRING_ID
 
	tSåögId
,

353 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tL™guage
,

354 
	tIN
 
	tCONST
 
	tEFI_FONT_DISPLAY_INFO
 *
	tSåögInfo
 
	tOPTIONAL
,

355 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

356 
	tIN
 
	tUINTN
 
	tB…X
,

357 
	tIN
 
	tUINTN
 
	tB…Y
,

358 
	tOUT
 
	tEFI_HII_ROW_INFO
 **
	tRowInfoAºay
 
	tOPTIONAL
,

359 
	tOUT
 
	tUINTN
 *
	tRowInfoAºaySize
 
	tOPTIONAL
,

360 
	tOUT
 
	tUINTN
 *
	tCﬁumnInfoAºay
 
	tOPTIONAL


399 
	gEFI_STATUS


400 (
	tEFIAPI
 *
	tEFI_HII_GET_GLYPH
)(

401 
	tIN
 
	tCONST
 
	tEFI_HII_FONT_PROTOCOL
 *
	tThis
,

402 
	tIN
 
	tCONST
 
	tCHAR16
 
	tCh¨
,

403 
	tIN
 
	tCONST
 
	tEFI_FONT_DISPLAY_INFO
 *
	tSåögInfo
,

404 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

405 
	tOUT
 
	tUINTN
 *
	tBa£löe
 
	tOPTIONAL


446 
	gEFI_STATUS


447 (
	tEFIAPI
 *
	tEFI_HII_GET_FONT_INFO
)(

448 
	tIN
 
	tCONST
 
	tEFI_HII_FONT_PROTOCOL
 *
	tThis
,

449 
	tIN
 
	tOUT
 
	tEFI_FONT_HANDLE
 *
	tF⁄tH™dÀ
,

450 
	tIN
 
	tCONST
 
	tEFI_FONT_DISPLAY_INFO
 *
	tSåögInfoIn
, 
	tOPTIONAL


451 
	tOUT
 
	tEFI_FONT_DISPLAY_INFO
 **
	tSåögInfoOut
,

452 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tSåög
 
	tOPTIONAL


458 
	s_EFI_HII_FONT_PROTOCOL
 {

459 
EFI_HII_STRING_TO_IMAGE
 
	mSåögToImage
;

460 
EFI_HII_STRING_ID_TO_IMAGE
 
	mSåögIdToImage
;

461 
EFI_HII_GET_GLYPH
 
	mGëGlyph
;

462 
EFI_HII_GET_FONT_INFO
 
	mGëF⁄tInfo
;

465 
EFI_GUID
 
gEfiHiiF⁄tPrŸocﬁGuid
;

	@HiiImage.h

12 #i‚de‡
__HII_IMAGE_H__


13 
	#__HII_IMAGE_H__


	)

15 
	~<PrŸocﬁ/GøphicsOuçut.h
>

17 
	#EFI_HII_IMAGE_PROTOCOL_GUID
 \

	)

20 
_EFI_HII_IMAGE_PROTOCOL
 
	tEFI_HII_IMAGE_PROTOCOL
;

26 
	#EFI_IMAGE_TRANSPARENT
 0x00000001

	)

46 
	s_EFI_IMAGE_INPUT
 {

47 
UINT32
 
	mFœgs
;

48 
UINT16
 
	mWidth
;

49 
UINT16
 
	mHeight
;

50 
EFI_GRAPHICS_OUTPUT_BLT_PIXEL
 *
	mBôm≠
;

51 } 
	tEFI_IMAGE_INPUT
;

80 
	gEFI_STATUS


81 (
	tEFIAPI
 *
	tEFI_HII_NEW_IMAGE
)(

82 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_PROTOCOL
 *
	tThis
,

83 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

84 
	tOUT
 
	tEFI_IMAGE_ID
 *
	tImageId
,

85 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage


122 
	gEFI_STATUS


123 (
	tEFIAPI
 *
	tEFI_HII_GET_IMAGE
)(

124 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_PROTOCOL
 *
	tThis
,

125 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

126 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

127 
	tOUT
 
	tEFI_IMAGE_INPUT
 *
	tImage


153 
	gEFI_STATUS


154 (
	tEFIAPI
 *
	tEFI_HII_SET_IMAGE
)(

155 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_PROTOCOL
 *
	tThis
,

156 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

157 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

158 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage


166 
UINT32
 
	tEFI_HII_DRAW_FLAGS
;

168 
	#EFI_HII_DRAW_FLAG_CLIP
 0x00000001

	)

169 
	#EFI_HII_DRAW_FLAG_TRANSPARENT
 0x00000030

	)

170 
	#EFI_HII_DRAW_FLAG_DEFAULT
 0x00000000

	)

171 
	#EFI_HII_DRAW_FLAG_FORCE_TRANS
 0x00000010

	)

172 
	#EFI_HII_DRAW_FLAG_FORCE_OPAQUE
 0x00000020

	)

173 
	#EFI_HII_DIRECT_TO_SCREEN
 0x00000080

	)

190 
	s_EFI_IMAGE_OUTPUT
 {

191 
UINT16
 
	mWidth
;

192 
UINT16
 
	mHeight
;

194 
EFI_GRAPHICS_OUTPUT_BLT_PIXEL
 *
	mBôm≠
;

195 
EFI_GRAPHICS_OUTPUT_PROTOCOL
 *
	mS¸ìn
;

196 } 
	mImage
;

197 } 
	tEFI_IMAGE_OUTPUT
;

248 
	gEFI_STATUS


249 (
	tEFIAPI
 *
	tEFI_HII_DRAW_IMAGE
)(

250 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_PROTOCOL
 *
	tThis
,

251 
	tIN
 
	tEFI_HII_DRAW_FLAGS
 
	tFœgs
,

252 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage
,

253 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

254 
	tIN
 
	tUINTN
 
	tB…X
,

255 
	tIN
 
	tUINTN
 
	tB…Y


326 
	gEFI_STATUS


327 (
	tEFIAPI
 *
	tEFI_HII_DRAW_IMAGE_ID
)(

328 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_PROTOCOL
 *
	tThis
,

329 
	tIN
 
	tEFI_HII_DRAW_FLAGS
 
	tFœgs
,

330 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

331 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

332 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

333 
	tIN
 
	tUINTN
 
	tB…X
,

334 
	tIN
 
	tUINTN
 
	tB…Y


341 
	s_EFI_HII_IMAGE_PROTOCOL
 {

342 
EFI_HII_NEW_IMAGE
 
	mNewImage
;

343 
EFI_HII_GET_IMAGE
 
	mGëImage
;

344 
EFI_HII_SET_IMAGE
 
	mSëImage
;

345 
EFI_HII_DRAW_IMAGE
 
	mDøwImage
;

346 
EFI_HII_DRAW_IMAGE_ID
 
	mDøwImageId
;

349 
EFI_GUID
 
gEfiHiiImagePrŸocﬁGuid
;

	@HiiImageDecoder.h

13 #i‚de‡
__HII_IMAGE_DECODER_H__


14 
	#__HII_IMAGE_DECODER_H__


	)

16 
	~<PrŸocﬁ/HiiImage.h
>

18 
	#EFI_HII_IMAGE_DECODER_PROTOCOL_GUID
 \

	)

22 
	#EFI_HII_IMAGE_DECODER_NAME_JPEG_GUID
 \

	)

25 
	#EFI_HII_IMAGE_DECODER_NAME_PNG_GUID
 \

	)

28 
_EFI_HII_IMAGE_DECODER_PROTOCOL
 
	tEFI_HII_IMAGE_DECODER_PROTOCOL
;

31 
	mEFI_HII_IMAGE_DECODER_COLOR_TYPE_RGB
 = 0x0,

32 
	mEFI_HII_IMAGE_DECODER_COLOR_TYPE_RGBA
 = 0x1,

33 
	mEFI_HII_IMAGE_DECODER_COLOR_TYPE_CMYK
 = 0x2,

34 
	mEFI_HII_IMAGE_DECODER_COLOR_TYPE_UNKNOWN
 = 0xFF

35 } 
	tEFI_HII_IMAGE_DECODER_COLOR_TYPE
;

47 
	s_EFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
 {

48 
EFI_GUID
 
	mDecodîName
;

49 
UINT16
 
	mImageInfoSize
;

50 
UINT16
 
	mImageWidth
;

51 
UINT16
 
	mImageHeight
;

52 
EFI_HII_IMAGE_DECODER_COLOR_TYPE
 
	mCﬁ‹Ty≥
;

53 
UINT8
 
	mCﬁ‹DïthInBôs
;

54 } 
	tEFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
;

56 
	#EFI_IMAGE_JPEG_SCANTYPE_PROGREESSIVE
 0x01

	)

57 
	#EFI_IMAGE_JPEG_SCANTYPE_INTERLACED
 0x02

	)

65 
	s_EFI_HII_IMAGE_DECODER_JPEG_INFO
 {

66 
EFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
 
	mHódî
;

67 
UINT16
 
	mSˇnTy≥
;

68 
UINT64
 
	mRe£rved
;

69 } 
	tEFI_HII_IMAGE_DECODER_JPEG_INFO
;

77 
	s_EFI_HII_IMAGE_DECODER_PNG_INFO
 {

78 
EFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
 
	mHódî
;

79 
UINT16
 
	mCh™√ls
;

80 
UINT64
 
	mRe£rved
;

81 } 
	tEFI_HII_IMAGE_DECODER_PNG_INFO
;

86 
	s_EFI_HII_IMAGE_DECODER_OTHER_INFO
 {

87 
EFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
 
	mHódî
;

88 
CHAR16
 
	mImageExãni⁄
[1];

92 } 
	tEFI_HII_IMAGE_DECODER_OTHER_INFO
;

114 
	gEFI_STATUS


115 (
	tEFIAPI
 *
	tEFI_HII_IMAGE_DECODER_GET_NAME
)(

116 
	tIN
 
	tEFI_HII_IMAGE_DECODER_PROTOCOL
 *
	tThis
,

117 
	tIN
 
	tOUT
 
	tEFI_GUID
 **
	tDecodîName
,

118 
	tIN
 
	tOUT
 
	tUINT16
 *
	tNumbîOfDecodîName


142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_HII_IMAGE_DECODER_GET_IMAGE_INFO
)(

144 
	tIN
 
	tEFI_HII_IMAGE_DECODER_PROTOCOL
 *
	tThis
,

145 
	tIN
 
	tVOID
 *
	tImage
,

146 
	tIN
 
	tUINTN
 
	tSizeOfImage
,

147 
	tIN
 
	tOUT
 
	tEFI_HII_IMAGE_DECODER_IMAGE_INFO_HEADER
 **
	tImageInfo


181 
	gEFI_STATUS


182 (
	tEFIAPI
 *
	tEFI_HII_IMAGE_DECODER_DECODE
)(

183 
	tIN
 
	tEFI_HII_IMAGE_DECODER_PROTOCOL
 *
	tThis
,

184 
	tIN
 
	tVOID
 *
	tImage
,

185 
	tIN
 
	tUINTN
 
	tImageRawD©aSize
,

186 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tBôm≠
,

187 
	tIN
 
	tBOOLEAN
 
	tTøn•¨ít


190 
	s_EFI_HII_IMAGE_DECODER_PROTOCOL
 {

191 
EFI_HII_IMAGE_DECODER_GET_NAME
 
	mGëImageDecodîName
;

192 
EFI_HII_IMAGE_DECODER_GET_IMAGE_INFO
 
	mGëImageInfo
;

193 
EFI_HII_IMAGE_DECODER_DECODE
 
	mDecodeImage
;

196 
EFI_GUID
 
gEfiHiiImageDecodîPrŸocﬁGuid
;

197 
EFI_GUID
 
gEfiHiiImageDecodîNameJ≥gGuid
;

198 
EFI_GUID
 
gEfiHiiImageDecodîNamePngGuid
;

	@HiiImageEx.h

13 #i‚de‡
__EFI_HII_IMAGE_EX_H__


14 
	#__EFI_HII_IMAGE_EX_H__


	)

16 
	~<PrŸocﬁ/HiiImage.h
>

21 
	#EFI_HII_IMAGE_EX_PROTOCOL_GUID
 \

	)

24 
_EFI_HII_IMAGE_EX_PROTOCOL
 
	tEFI_HII_IMAGE_EX_PROTOCOL
;

45 
	gEFI_STATUS


46 (
	tEFIAPI
 *
	tEFI_HII_NEW_IMAGE_EX
)(

47 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

48 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

49 
	tOUT
 
	tEFI_IMAGE_ID
 *
	tImageId
,

50 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_HII_GET_IMAGE_EX
)(

81 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

83 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

84 
	tOUT
 
	tEFI_IMAGE_INPUT
 *
	tImage


107 
	gEFI_STATUS


108 (
	tEFIAPI
 *
	tEFI_HII_SET_IMAGE_EX
)(

109 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

110 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

111 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

112 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage


144 
	gEFI_STATUS


145 (
	tEFIAPI
 *
	tEFI_HII_DRAW_IMAGE_EX
)(

146 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

147 
	tIN
 
	tEFI_HII_DRAW_FLAGS
 
	tFœgs
,

148 
	tIN
 
	tCONST
 
	tEFI_IMAGE_INPUT
 *
	tImage
,

149 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

150 
	tIN
 
	tUINTN
 
	tB…X
,

151 
	tIN
 
	tUINTN
 
	tB…Y


191 
	gEFI_STATUS


192 (
	tEFIAPI
 *
	tEFI_HII_DRAW_IMAGE_ID_EX
)(

193 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

194 
	tIN
 
	tEFI_HII_DRAW_FLAGS
 
	tFœgs
,

195 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

196 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

197 
	tIN
 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 **
	tB…
,

198 
	tIN
 
	tUINTN
 
	tB…X
,

199 
	tIN
 
	tUINTN
 
	tB…Y


226 
	gEFI_STATUS


227 (
	tEFIAPI
 *
	tEFI_HII_GET_IMAGE_INFO
)(

228 
	tIN
 
	tCONST
 
	tEFI_HII_IMAGE_EX_PROTOCOL
 *
	tThis
,

229 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

230 
	tIN
 
	tEFI_IMAGE_ID
 
	tImageId
,

231 
	tOUT
 
	tEFI_IMAGE_OUTPUT
 *
	tImage


237 
	s_EFI_HII_IMAGE_EX_PROTOCOL
 {

238 
EFI_HII_NEW_IMAGE_EX
 
	mNewImageEx
;

239 
EFI_HII_GET_IMAGE_EX
 
	mGëImageEx
;

240 
EFI_HII_SET_IMAGE_EX
 
	mSëImageEx
;

241 
EFI_HII_DRAW_IMAGE_EX
 
	mDøwImageEx
;

242 
EFI_HII_DRAW_IMAGE_ID_EX
 
	mDøwImageIdEx
;

243 
EFI_HII_GET_IMAGE_INFO
 
	mGëImageInfo
;

246 
EFI_GUID
 
gEfiHiiImageExPrŸocﬁGuid
;

	@HiiPackageList.h

13 #i‚de‡
__HII_PACKAGE_LIST_H__


14 
	#__HII_PACKAGE_LIST_H__


	)

16 
	#EFI_HII_PACKAGE_LIST_PROTOCOL_GUID
 \

	)

19 
EFI_HII_PACKAGE_LIST_HEADER
 * 
	tEFI_HII_PACKAGE_LIST_PROTOCOL
;

21 
EFI_GUID
 
gEfiHiiPackageLi°PrŸocﬁGuid
;

	@HiiPopup.h

13 #i‚de‡
__HII_POPUP_H__


14 
	#__HII_POPUP_H__


	)

16 
	#EFI_HII_POPUP_PROTOCOL_GUID
 \

	)

19 
	#EFI_HII_POPUP_PROTOCOL_REVISION
 1

	)

21 
_EFI_HII_POPUP_PROTOCOL
 
	tEFI_HII_POPUP_PROTOCOL
;

24 
	mEfiHiiP›upStyÀInfo
,

25 
	mEfiHiiP›upStyÀW¨nög
,

26 
	mEfiHiiP›upStyÀEº‹


27 } 
	tEFI_HII_POPUP_STYLE
;

30 
	mEfiHiiP›upTy≥Ok
,

31 
	mEfiHiiP›upTy≥OkC™˚l
,

32 
	mEfiHiiP›upTy≥YesNo
,

33 
	mEfiHiiP›upTy≥YesNoC™˚l


34 } 
	tEFI_HII_POPUP_TYPE
;

37 
	mEfiHiiP›upSñe˘i⁄Ok
,

38 
	mEfiHiiP›upSñe˘i⁄C™˚l
,

39 
	mEfiHiiP›upSñe˘i⁄Yes
,

40 
	mEfiHiiP›upSñe˘i⁄No


41 } 
	tEFI_HII_POPUP_SELECTION
;

60 
	gEFI_STATUS


61 (
	tEFIAPI
 * 
	tEFI_HII_CREATE_POPUP
) (

62 
	tIN
 
	tEFI_HII_POPUP_PROTOCOL
 *
	tThis
,

63 
	tIN
 
	tEFI_HII_POPUP_STYLE
 
	tP›upStyÀ
,

64 
	tIN
 
	tEFI_HII_POPUP_TYPE
 
	tP›upTy≥
,

65 
	tIN
 
	tEFI_HII_HANDLE
 
	tHiiH™dÀ
,

66 
	tIN
 
	tEFI_STRING_ID
 
	tMesßge
,

67 
	tOUT
 
	tEFI_HII_POPUP_SELECTION
 *
	tU£rSñe˘i⁄
 
	tOPTIONAL


70 
	s_EFI_HII_POPUP_PROTOCOL
 {

71 
UINT64
 
	mRevisi⁄
;

72 
EFI_HII_CREATE_POPUP
 
	mCª©eP›up
;

73 } 
	tEFI_HII_POPUP_PROTOCOL
;

75 
EFI_GUID
 
gEfiHiiP›upPrŸocﬁGuid
;

	@HiiString.h

12 #i‚de‡
__HII_STRING_H__


13 
	#__HII_STRING_H__


	)

15 
	~<PrŸocﬁ/HiiF⁄t.h
>

17 
	#EFI_HII_STRING_PROTOCOL_GUID
 \

	)

20 
_EFI_HII_STRING_PROTOCOL
 
	tEFI_HII_STRING_PROTOCOL
;

55 
	gEFI_STATUS


56 (
	tEFIAPI
 *
	tEFI_HII_NEW_STRING
)(

57 
	tIN
 
	tCONST
 
	tEFI_HII_STRING_PROTOCOL
 *
	tThis
,

58 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

59 
	tOUT
 
	tEFI_STRING_ID
 *
	tSåögId
,

60 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tL™guage
,

61 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tL™guageName
, 
	tOPTIONAL


62 
	tIN
 
	tCONST
 
	tEFI_STRING
 
	tSåög
,

63 
	tIN
 
	tCONST
 
	tEFI_FONT_INFO
 *
	tSåögF⁄tInfo
 
	tOPTIONAL


101 
	gEFI_STATUS


102 (
	tEFIAPI
 *
	tEFI_HII_GET_STRING
)(

103 
	tIN
 
	tCONST
 
	tEFI_HII_STRING_PROTOCOL
 *
	tThis
,

104 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tL™guage
,

105 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

106 
	tIN
 
	tEFI_STRING_ID
 
	tSåögId
,

107 
	tOUT
 
	tEFI_STRING
 
	tSåög
,

108 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSåögSize
,

109 
	tOUT
 
	tEFI_FONT_INFO
 **
	tSåögF⁄tInfo
 
	tOPTIONAL


136 
	gEFI_STATUS


137 (
	tEFIAPI
 *
	tEFI_HII_SET_STRING
)(

138 
	tIN
 
	tCONST
 
	tEFI_HII_STRING_PROTOCOL
 *
	tThis
,

139 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

140 
	tIN
 
	tEFI_STRING_ID
 
	tSåögId
,

141 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tL™guage
,

142 
	tIN
 
	tEFI_STRING
 
	tSåög
,

143 
	tIN
 
	tCONST
 
	tEFI_FONT_INFO
 *
	tSåögF⁄tInfo
 
	tOPTIONAL


170 
	gEFI_STATUS


171 (
	tEFIAPI
 *
	tEFI_HII_GET_LANGUAGES
)(

172 
	tIN
 
	tCONST
 
	tEFI_HII_STRING_PROTOCOL
 *
	tThis
,

173 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

174 
	tIN
 
	tOUT
 
	tCHAR8
 *
	tL™guages
,

175 
	tIN
 
	tOUT
 
	tUINTN
 *
	tL™guagesSize


213 
	gEFI_STATUS


214 (
	tEFIAPI
 *
	tEFI_HII_GET_2ND_LANGUAGES
)(

215 
	tIN
 
	tCONST
 
	tEFI_HII_STRING_PROTOCOL
 *
	tThis
,

216 
	tIN
 
	tEFI_HII_HANDLE
 
	tPackageLi°
,

217 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tPrim¨yL™guage
,

218 
	tIN
 
	tOUT
 
	tCHAR8
 *
	tSec⁄d¨yL™guages
,

219 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSec⁄d¨yL™guagesSize


226 
	s_EFI_HII_STRING_PROTOCOL
 {

227 
EFI_HII_NEW_STRING
 
	mNewSåög
;

228 
EFI_HII_GET_STRING
 
	mGëSåög
;

229 
EFI_HII_SET_STRING
 
	mSëSåög
;

230 
EFI_HII_GET_LANGUAGES
 
	mGëL™guages
;

231 
EFI_HII_GET_2ND_LANGUAGES
 
	mGëSec⁄d¨yL™guages
;

235 
EFI_GUID
 
gEfiHiiSåögPrŸocﬁGuid
;

	@Http.h

16 #i‚de‡
__EFI_HTTP_PROTOCOL_H__


17 
	#__EFI_HTTP_PROTOCOL_H__


	)

19 
	#EFI_HTTP_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

24 
	#EFI_HTTP_PROTOCOL_GUID
 \

	)

29 
_EFI_HTTP_PROTOCOL
 
	tEFI_HTTP_PROTOCOL
;

35 
	mHâpVîsi⁄10
,

36 
	mHâpVîsi⁄11
,

37 
	mHâpVîsi⁄Unsuµ‹ãd


38 } 
	tEFI_HTTP_VERSION
;

44 
	mHâpMëhodGë
,

45 
	mHâpMëhodPo°
,

46 
	mHâpMëhodP©ch
,

47 
	mHâpMëhodO±i⁄s
,

48 
	mHâpMëhodC⁄√˘
,

49 
	mHâpMëhodHód
,

50 
	mHâpMëhodPut
,

51 
	mHâpMëhodDñëe
,

52 
	mHâpMëhodTø˚
,

53 
	mHâpMëhodMax


54 } 
	tEFI_HTTP_METHOD
;

60 
	mHTTP_STATUS_UNSUPPORTED_STATUS
 = 0,

61 
	mHTTP_STATUS_100_CONTINUE
,

62 
	mHTTP_STATUS_101_SWITCHING_PROTOCOLS
,

63 
	mHTTP_STATUS_200_OK
,

64 
	mHTTP_STATUS_201_CREATED
,

65 
	mHTTP_STATUS_202_ACCEPTED
,

66 
	mHTTP_STATUS_203_NON_AUTHORITATIVE_INFORMATION
,

67 
	mHTTP_STATUS_204_NO_CONTENT
,

68 
	mHTTP_STATUS_205_RESET_CONTENT
,

69 
	mHTTP_STATUS_206_PARTIAL_CONTENT
,

70 
	mHTTP_STATUS_300_MULTIPLE_CHOICES
,

71 
	mHTTP_STATUS_301_MOVED_PERMANENTLY
,

72 
	mHTTP_STATUS_302_FOUND
,

73 
	mHTTP_STATUS_303_SEE_OTHER
,

74 
	mHTTP_STATUS_304_NOT_MODIFIED
,

75 
	mHTTP_STATUS_305_USE_PROXY
,

76 
	mHTTP_STATUS_307_TEMPORARY_REDIRECT
,

77 
	mHTTP_STATUS_400_BAD_REQUEST
,

78 
	mHTTP_STATUS_401_UNAUTHORIZED
,

79 
	mHTTP_STATUS_402_PAYMENT_REQUIRED
,

80 
	mHTTP_STATUS_403_FORBIDDEN
,

81 
	mHTTP_STATUS_404_NOT_FOUND
,

82 
	mHTTP_STATUS_405_METHOD_NOT_ALLOWED
,

83 
	mHTTP_STATUS_406_NOT_ACCEPTABLE
,

84 
	mHTTP_STATUS_407_PROXY_AUTHENTICATION_REQUIRED
,

85 
	mHTTP_STATUS_408_REQUEST_TIME_OUT
,

86 
	mHTTP_STATUS_409_CONFLICT
,

87 
	mHTTP_STATUS_410_GONE
,

88 
	mHTTP_STATUS_411_LENGTH_REQUIRED
,

89 
	mHTTP_STATUS_412_PRECONDITION_FAILED
,

90 
	mHTTP_STATUS_413_REQUEST_ENTITY_TOO_LARGE
,

91 
	mHTTP_STATUS_414_REQUEST_URI_TOO_LARGE
,

92 
	mHTTP_STATUS_415_UNSUPPORTED_MEDIA_TYPE
,

93 
	mHTTP_STATUS_416_REQUESTED_RANGE_NOT_SATISFIED
,

94 
	mHTTP_STATUS_417_EXPECTATION_FAILED
,

95 
	mHTTP_STATUS_500_INTERNAL_SERVER_ERROR
,

96 
	mHTTP_STATUS_501_NOT_IMPLEMENTED
,

97 
	mHTTP_STATUS_502_BAD_GATEWAY
,

98 
	mHTTP_STATUS_503_SERVICE_UNAVAILABLE
,

99 
	mHTTP_STATUS_504_GATEWAY_TIME_OUT
,

100 
	mHTTP_STATUS_505_HTTP_VERSION_NOT_SUPPORTED
,

101 
	mHTTP_STATUS_308_PERMANENT_REDIRECT


102 } 
	tEFI_HTTP_STATUS_CODE
;

113 
BOOLEAN
 
	mU£DeÁu…Addªss
;

118 
EFI_IPv4_ADDRESS
 
	mLoˇlAddªss
;

123 
EFI_IPv4_ADDRESS
 
	mLoˇlSub√t
;

128 
UINT16
 
	mLoˇlP‹t
;

129 } 
	tEFI_HTTPv4_ACCESS_POINT
;

138 
EFI_IPv6_ADDRESS
 
	mLoˇlAddªss
;

142 
UINT16
 
	mLoˇlP‹t
;

143 } 
	tEFI_HTTPv6_ACCESS_POINT
;

154 
EFI_HTTP_VERSION
 
	mHâpVîsi⁄
;

158 
UINT32
 
	mTimeOutMûli£c
;

164 
BOOLEAN
 
	mLoˇlAddªssIsIPv6
;

171 
EFI_HTTPv4_ACCESS_POINT
 *
	mIPv4Node
;

176 
EFI_HTTPv6_ACCESS_POINT
 *
	mIPv6Node
;

177 } 
	mAc˚ssPoöt
;

178 } 
	tEFI_HTTP_CONFIG_DATA
;

187 
EFI_HTTP_METHOD
 
	mMëhod
;

194 
CHAR16
 *
	mUæ
;

195 } 
	tEFI_HTTP_REQUEST_DATA
;

204 
EFI_HTTP_STATUS_CODE
 
	mSètusCode
;

205 } 
	tEFI_HTTP_RESPONSE_DATA
;

215 
CHAR8
 *
	mFõldName
;

220 
CHAR8
 *
	mFõldVÆue
;

221 } 
	tEFI_HTTP_HEADER
;

235 
EFI_HTTP_REQUEST_DATA
 *
	mReque°
;

240 
EFI_HTTP_RESPONSE_DATA
 *
	mRe•⁄£
;

241 } 
	mD©a
;

246 
UINTN
 
	mHódîCou¡
;

253 
EFI_HTTP_HEADER
 *
	mHódîs
;

257 
UINTN
 
	mBodyLígth
;

262 
VOID
 *
	mBody
;

263 } 
	tEFI_HTTP_MESSAGE
;

275 
EFI_EVENT
 
	mEvít
;

287 
EFI_STATUS
 
	mSètus
;

291 
EFI_HTTP_MESSAGE
 *
	mMesßge
;

292 } 
	tEFI_HTTP_TOKEN
;

316 
	gEFI_STATUS


317 (
	tEFIAPI
 *
	tEFI_HTTP_GET_MODE_DATA
)(

318 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis
,

319 
	tOUT
 
	tEFI_HTTP_CONFIG_DATA
 *
	tHâpC⁄figD©a


354 
	gEFI_STATUS


355 (
	tEFIAPI
 *
	tEFI_HTTP_CONFIGURE
)(

356 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis
,

357 
	tIN
 
	tEFI_HTTP_CONFIG_DATA
 *
	tHâpC⁄figD©a
 
	tOPTIONAL


385 
	gEFI_STATUS


386 (
	tEFIAPI
 *
	tEFI_HTTP_REQUEST
) (

387 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis
,

388 
	tIN
 
	tEFI_HTTP_TOKEN
 *
	tTokí


413 
	gEFI_STATUS


414 (
	tEFIAPI
 *
	tEFI_HTTP_CANCEL
)(

415 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis
,

416 
	tIN
 
	tEFI_HTTP_TOKEN
 *
	tTokí


467 
	gEFI_STATUS


468 (
	tEFIAPI
 *
	tEFI_HTTP_RESPONSE
) (

469 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis
,

470 
	tIN
 
	tEFI_HTTP_TOKEN
 *
	tTokí


493 
	gEFI_STATUS


494 (
	tEFIAPI
 *
	tEFI_HTTP_POLL
) (

495 
	tIN
 
	tEFI_HTTP_PROTOCOL
 *
	tThis


504 
	s_EFI_HTTP_PROTOCOL
 {

505 
EFI_HTTP_GET_MODE_DATA
 
	mGëModeD©a
;

506 
EFI_HTTP_CONFIGURE
 
	mC⁄figuª
;

507 
EFI_HTTP_REQUEST
 
	mReque°
;

508 
EFI_HTTP_CANCEL
 
	mC™˚l
;

509 
EFI_HTTP_RESPONSE
 
	mRe•⁄£
;

510 
EFI_HTTP_POLL
 
	mPﬁl
;

513 
EFI_GUID
 
gEfiHâpSîvi˚BödögPrŸocﬁGuid
;

514 
EFI_GUID
 
gEfiHâpPrŸocﬁGuid
;

	@HttpBootCallback.h

12 #i‚de‡
__EFI_HTTP_BOOT_CALLBACK_H__


13 
	#__EFI_HTTP_BOOT_CALLBACK_H__


	)

15 
	#EFI_HTTP_BOOT_CALLBACK_PROTOCOL_GUID
 \

	)

20 
_EFI_HTTP_BOOT_CALLBACK_PROTOCOL
 
	tEFI_HTTP_BOOT_CALLBACK_PROTOCOL
;

29 
	mHâpBoŸDh˝4
,

33 
	mHâpBoŸDh˝6
,

38 
	mHâpBoŸHâpReque°
,

43 
	mHâpBoŸHâpRe•⁄£
,

48 
	mHâpBoŸHâpE¡ôyBody
,

49 
	mHâpBoŸTy≥Max


50 } 
	tEFI_HTTP_BOOT_CALLBACK_DATA_TYPE
;

74 
	gEFI_STATUS


75 (
	tEFIAPI
 * 
	tEFI_HTTP_BOOT_CALLBACK
) (

76 
	tIN
 
	tEFI_HTTP_BOOT_CALLBACK_PROTOCOL
 *
	tThis
,

77 
	tIN
 
	tEFI_HTTP_BOOT_CALLBACK_DATA_TYPE
 
	tD©aTy≥
,

78 
	tIN
 
	tBOOLEAN
 
	tRe˚ived
,

79 
	tIN
 
	tUINT32
 
	tD©aLígth
,

80 
	tIN
 
	tVOID
 *
	tD©a
 
	tOPTIONAL


88 
	s_EFI_HTTP_BOOT_CALLBACK_PROTOCOL
 {

89 
EFI_HTTP_BOOT_CALLBACK
 
	mCÆlback
;

92 
EFI_GUID
 
gEfiHâpBoŸCÆlbackPrŸocﬁGuid
;

	@HttpUtilities.h

13 #i‚de‡
__EFI_HTTP_UTILITIES_PROTOCOL_H__


14 
	#__EFI_HTTP_UTILITIES_PROTOCOL_H__


	)

16 
	~<PrŸocﬁ/Hâp.h
>

18 
	#EFI_HTTP_UTILITIES_PROTOCOL_GUID
 \

	)

23 
_EFI_HTTP_UTILITIES_PROTOCOL
 
	tEFI_HTTP_UTILITIES_PROTOCOL
;

59 
	gEFI_STATUS


60 (
	tEFIAPI
 *
	tEFI_HTTP_UTILS_BUILD
) (

61 
	tIN
 
	tEFI_HTTP_UTILITIES_PROTOCOL
 *
	tThis
,

62 
	tIN
 
	tUINTN
 
	tSìdMesßgeSize
,

63 
	tIN
 
	tVOID
 *
	tSìdMesßge
, 
	tOPTIONAL


64 
	tIN
 
	tUINTN
 
	tDñëeCou¡
,

65 
	tIN
 
	tCHAR8
 *
	tDñëeLi°
[], 
	tOPTIONAL


66 
	tIN
 
	tUINTN
 
	tAµídCou¡
,

67 
	tIN
 
	tEFI_HTTP_HEADER
 *
	tAµídLi°
[], 
	tOPTIONAL


68 
	tOUT
 
	tUINTN
 *
	tNewMesßgeSize
,

69 
	tOUT
 
	tVOID
 **
	tNewMesßge


94 
	gEFI_STATUS


95 (
	tEFIAPI
 *
	tEFI_HTTP_UTILS_PARSE
) (

96 
	tIN
 
	tEFI_HTTP_UTILITIES_PROTOCOL
 *
	tThis
,

97 
	tIN
 
	tCHAR8
 *
	tHâpMesßge
,

98 
	tIN
 
	tUINTN
 
	tHâpMesßgeSize
,

99 
	tOUT
 
	tEFI_HTTP_HEADER
 **
	tHódîFõlds
,

100 
	tOUT
 
	tUINTN
 *
	tFõldCou¡


111 
	s_EFI_HTTP_UTILITIES_PROTOCOL
 {

112 
EFI_HTTP_UTILS_BUILD
 
	mBuûd
;

113 
EFI_HTTP_UTILS_PARSE
 
	mP¨£
;

116 
EFI_GUID
 
gEfiHâpUtûôõsPrŸocﬁGuid
;

	@I2cBusConfigurationManagement.h

17 #i‚de‡
__I2C_BUS_CONFIGURATION_MANAGEMENT_H__


18 
	#__I2C_BUS_CONFIGURATION_MANAGEMENT_H__


	)

20 
	#EFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL_GUID
 \

	)

87 
_EFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL
 
	tEFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL
;

142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL_ENABLE_I2C_BUS_CONFIGURATION
) (

144 
	tIN
 
	tCONST
 
	tEFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL
 *
	tThis
,

145 
	tIN
 
	tUINTN
 
	tI2cBusC⁄figuøti⁄
,

146 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL
,

147 
	tIN
 
	tEFI_STATUS
 *
	tI2cSètus
 
	tOPTIONAL


153 
	s_EFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL
 {

157 
EFI_I2C_BUS_CONFIGURATION_MANAGEMENT_PROTOCOL_ENABLE_I2C_BUS_CONFIGURATION
 
	mE«bÀI2cBusC⁄figuøti⁄
;

163 
EFI_GUID
 
gEfiI2cBusC⁄figuøti⁄M™agemítPrŸocﬁGuid
;

	@I2cEnumerate.h

14 #i‚de‡
__I2C_ENUMERATE_H__


15 
	#__I2C_ENUMERATE_H__


	)

17 
	~<Pi/PiI2c.h
>

19 
	#EFI_I2C_ENUMERATE_PROTOCOL_GUID
 { 0xda8cd7c4, 0x1c00, 0x49e2, { 0x80, 0x3e, 0x52, 0x14, 0xe7, 0x01, 0x89, 0x4¯}}

	)

21 
_EFI_I2C_ENUMERATE_PROTOCOL
 
	tEFI_I2C_ENUMERATE_PROTOCOL
;

47 
	gEFI_STATUS


48 (
	tEFIAPI
 *
	tEFI_I2C_ENUMERATE_PROTOCOL_ENUMERATE
) (

49 
	tIN
 
	tCONST
 
	tEFI_I2C_ENUMERATE_PROTOCOL
 *
	tThis
,

50 
	tIN
 
	tOUT
 
	tCONST
 
	tEFI_I2C_DEVICE
 **
	tDevi˚


75 
	gEFI_STATUS


76 (
	tEFIAPI
 *
	tEFI_I2C_ENUMERATE_PROTOCOL_GET_BUS_FREQUENCY
) (

77 
	tIN
 
	tCONST
 
	tEFI_I2C_ENUMERATE_PROTOCOL
 *
	tThis
,

78 
	tIN
 
	tUINTN
 
	tI2cBusC⁄figuøti⁄
,

79 
	tOUT
 
	tUINTN
 *
	tBusClockHîtz


85 
	s_EFI_I2C_ENUMERATE_PROTOCOL
 {

90 
EFI_I2C_ENUMERATE_PROTOCOL_ENUMERATE
 
	mEnumî©e
;

96 
EFI_I2C_ENUMERATE_PROTOCOL_GET_BUS_FREQUENCY
 
	mGëBusFªquícy
;

102 
EFI_GUID
 
gEfiI2cEnumî©ePrŸocﬁGuid
;

	@I2cHost.h

15 #i‚de‡
__I2C_HOST_H__


16 
	#__I2C_HOST_H__


	)

18 
	~<Pi/PiI2c.h
>

20 
	#EFI_I2C_HOST_PROTOCOL_GUID
 { 0xa5Øb9e3, 0xc727, 0x48cd, { 0x8b, 0xbf, 0x42, 0x72, 0x33, 0x85, 0x49, 0x48 }}

	)

38 
_EFI_I2C_HOST_PROTOCOL
 
	tEFI_I2C_HOST_PROTOCOL
;

115 
	gEFI_STATUS


116 (
	tEFIAPI
 *
	tEFI_I2C_HOST_PROTOCOL_QUEUE_REQUEST
) (

117 
	tIN
 
	tCONST
 
	tEFI_I2C_HOST_PROTOCOL
 *
	tThis
,

118 
	tIN
 
	tUINTN
 
	tI2cBusC⁄figuøti⁄
,

119 
	tIN
 
	tUINTN
 
	tSœveAddªss
,

120 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL
,

121 
	tIN
 
	tEFI_I2C_REQUEST_PACKET
 *
	tReque°Packë
,

122 
	tOUT
 
	tEFI_STATUS
 *
	tI2cSètus
 
	tOPTIONAL


128 
	s_EFI_I2C_HOST_PROTOCOL
 {

132 
EFI_I2C_HOST_PROTOCOL_QUEUE_REQUEST
 
	mQueueReque°
;

138 
CONST
 
EFI_I2C_CONTROLLER_CAPABILITIES
 *
	mI2cC⁄åﬁÀrC≠abûôõs
;

144 
EFI_GUID
 
gEfiI2cHo°PrŸocﬁGuid
;

	@I2cIo.h

15 #i‚de‡
__I2C_IO_H__


16 
	#__I2C_IO_H__


	)

18 
	~<Pi/PiI2c.h
>

20 
	#EFI_I2C_IO_PROTOCOL_GUID
 { 0xb60a3e6b, 0x18c4, 0x46e5, { 0xa2, 0x9a, 0xc9, 0xa1, 0x06, 0x65, 0xa2, 0x8ê}}

	)

41 
_EFI_I2C_IO_PROTOCOL
 
	tEFI_I2C_IO_PROTOCOL
;

116 
	gEFI_STATUS


117 (
	tEFIAPI
 *
	tEFI_I2C_IO_PROTOCOL_QUEUE_REQUEST
) (

118 
	tIN
 
	tCONST
 
	tEFI_I2C_IO_PROTOCOL
 *
	tThis
,

119 
	tIN
 
	tUINTN
 
	tSœveAddªssIndex
,

120 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL
,

121 
	tIN
 
	tEFI_I2C_REQUEST_PACKET
 *
	tReque°Packë
,

122 
	tOUT
 
	tEFI_STATUS
 *
	tI2cSètus
 
	tOPTIONAL


128 
	s_EFI_I2C_IO_PROTOCOL
 {

132 
EFI_I2C_IO_PROTOCOL_QUEUE_REQUEST
 
	mQueueReque°
;

140 
CONST
 
EFI_GUID
 *
	mDevi˚Guid
;

145 
UINT32
 
	mDevi˚Index
;

152 
UINT32
 
	mH¨dw¨eRevisi⁄
;

158 
CONST
 
EFI_I2C_CONTROLLER_CAPABILITIES
 *
	mI2cC⁄åﬁÀrC≠abûôõs
;

164 
EFI_GUID
 
gEfiI2cIoPrŸocﬁGuid
;

	@I2cMaster.h

15 #i‚de‡
__I2C_MASTER_H__


16 
	#__I2C_MASTER_H__


	)

18 
	~<Pi/PiI2c.h
>

20 
	#EFI_I2C_MASTER_PROTOCOL_GUID
 { 0xcd72881f, 0x45b5, 0x4„b, { 0x98, 0xc8, 0x31, 0x3d, 0xa8, 0x11, 0x74, 0x62 }}

	)

22 
_EFI_I2C_MASTER_PROTOCOL
 
	tEFI_I2C_MASTER_PROTOCOL
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_I2C_MASTER_PROTOCOL_SET_BUS_FREQUENCY
) (

52 
	tIN
 
	tCONST
 
	tEFI_I2C_MASTER_PROTOCOL
 *
	tThis
,

53 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBusClockHîtz


72 
	gEFI_STATUS


73 (
	tEFIAPI
 *
	tEFI_I2C_MASTER_PROTOCOL_RESET
) (

74 
	tIN
 
	tCONST
 
	tEFI_I2C_MASTER_PROTOCOL
 *
	tThis


145 
	gEFI_STATUS


146 (
	tEFIAPI
 *
	tEFI_I2C_MASTER_PROTOCOL_START_REQUEST
) (

147 
	tIN
 
	tCONST
 
	tEFI_I2C_MASTER_PROTOCOL
 *
	tThis
,

148 
	tIN
 
	tUINTN
 
	tSœveAddªss
,

149 
	tIN
 
	tEFI_I2C_REQUEST_PACKET
 *
	tReque°Packë
,

150 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL
,

151 
	tOUT
 
	tEFI_STATUS
 *
	tI2cSètus
 
	tOPTIONAL


161 
	s_EFI_I2C_MASTER_PROTOCOL
 {

165 
EFI_I2C_MASTER_PROTOCOL_SET_BUS_FREQUENCY
 
	mSëBusFªquícy
;

170 
EFI_I2C_MASTER_PROTOCOL_RESET
 
	mRe£t
;

175 
EFI_I2C_MASTER_PROTOCOL_START_REQUEST
 
	mSèπReque°
;

181 
CONST
 
EFI_I2C_CONTROLLER_CAPABILITIES
 *
	mI2cC⁄åﬁÀrC≠abûôõs
;

184 
EFI_GUID
 
gEfiI2cMa°îPrŸocﬁGuid
;

	@IScsiInitiatorName.h

10 #i‚de‡
__ISCSI_INITIATOR_NAME_H__


11 
	#__ISCSI_INITIATOR_NAME_H__


	)

13 
	#EFI_ISCSI_INITIATOR_NAME_PROTOCOL_GUID
 \

	)

18 
_EFI_ISCSI_INITIATOR_NAME_PROTOCOL
 
	tEFI_ISCSI_INITIATOR_NAME_PROTOCOL
;

37 
	gEFI_STATUS


38 (
	tEFIAPI
 *
	tEFI_ISCSI_INITIATOR_NAME_GET
)(

39 
	tIN
 
	tEFI_ISCSI_INITIATOR_NAME_PROTOCOL
 *
	tThis
,

40 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

41 
	tOUT
 
	tVOID
 *
	tBuf„r


63 
	gEFI_STATUS


64 (
	tEFIAPI
 *
	tEFI_ISCSI_INITIATOR_NAME_SET
)(

65 
	tIN
 
	tEFI_ISCSI_INITIATOR_NAME_PROTOCOL
 *
	tThis
,

66 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

67 
	tIN
 
	tVOID
 *
	tBuf„r


73 
	s_EFI_ISCSI_INITIATOR_NAME_PROTOCOL
 {

74 
EFI_ISCSI_INITIATOR_NAME_GET
 
	mGë
;

75 
EFI_ISCSI_INITIATOR_NAME_SET
 
	mSë
;

78 
EFI_GUID
 
gEfiIScsiInôüt‹NamePrŸocﬁGuid
;

	@IdeControllerInit.h

25 #i‚de‡
_EFI_IDE_CONTROLLER_INIT_PROTOCOL_H_


26 
	#_EFI_IDE_CONTROLLER_INIT_PROTOCOL_H_


	)

28 
	~<Indu°rySènd¨d/Aèpi.h
>

33 
	#EFI_IDE_CONTROLLER_INIT_PROTOCOL_GUID
 \

	)

41 
_EFI_IDE_CONTROLLER_INIT_PROTOCOL
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
;

52 
	mEfiIdeBef‹eCh™√lEnumî©i⁄
,

58 
	mEfiIdeA·îCh™√lEnumî©i⁄
,

64 
	mEfiIdeBef‹eCh™√lRe£t
,

70 
	mEfiIdeA·îCh™√lRe£t
,

77 
	mEfiIdeBusBef‹eDevi˚Pª£n˚Dëe˘i⁄
,

83 
	mEfiIdeBusA·îDevi˚Pª£n˚Dëe˘i⁄
,

89 
	mEfiIdeRe£tMode
,

90 
	mEfiIdeBusPha£Maximum


91 } 
	tEFI_IDE_CONTROLLER_ENUM_PHASE
;

100 
	mEfiAèS©aTøns„rPrŸocﬁ


101 } 
	tEFI_ATA_EXT_TRANSFER_PROTOCOL
;

106 
	#EFI_SATA_AUTO_SPEED
 0

	)

111 
	#EFI_SATA_GEN1_SPEED
 1

	)

116 
	#EFI_SATA_GEN2_SPEED
 2

	)

122 
BOOLEAN
 
	mVÆid
;

123 
UINT32
 
	mMode
;

124 } 
	tEFI_ATA_MODE
;

139 
EFI_ATA_EXT_TRANSFER_PROTOCOL
 
	mTøns„rPrŸocﬁ
;

143 
UINT32
 
	mMode
;

144 } 
	tEFI_ATA_EXTENDED_MODE
;

157 
EFI_ATA_MODE
 
	mPioMode
;

167 
EFI_ATA_MODE
 
	mSögÀW‹dDmaMode
;

174 
EFI_ATA_MODE
 
	mMu…iW‹dDmaMode
;

180 
EFI_ATA_MODE
 
	mUdmaMode
;

186 
UINT32
 
	mExtModeCou¡
;

194 
EFI_ATA_EXTENDED_MODE
 
	mExtMode
[1];

195 } 
	tEFI_ATA_COLLECTIVE_MODE
;

204 
ATA_IDENTIFY_DATA
 
	tEFI_ATA_IDENTIFY_DATA
;

205 
ATAPI_IDENTIFY_DATA
 
	tEFI_ATAPI_IDENTIFY_DATA
;

215 
	#EFI_ATAPI_DEVICE_IDENTIFY_DATA
 0x8000

	)

225 
EFI_ATA_IDENTIFY_DATA
 
	mAèD©a
;

230 
EFI_ATAPI_IDENTIFY_DATA
 
	mAèpiD©a
;

231 } 
	tEFI_IDENTIFY_DATA
;

270 
	gEFI_STATUS


271 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_GET_CHANNEL_INFO
)(

272 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

273 
	tIN
 
	tUINT8
 
	tCh™√l
,

274 
	tOUT
 
	tBOOLEAN
 *
	tE«bÀd
,

275 
	tOUT
 
	tUINT8
 *
	tMaxDevi˚s


303 
	gEFI_STATUS


304 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_NOTIFY_PHASE
)(

305 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

306 
	tIN
 
	tEFI_IDE_CONTROLLER_ENUM_PHASE
 
	tPha£
,

307 
	tIN
 
	tUINT8
 
	tCh™√l


350 
	gEFI_STATUS


351 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_SUBMIT_DATA
)(

352 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

353 
	tIN
 
	tUINT8
 
	tCh™√l
,

354 
	tIN
 
	tUINT8
 
	tDevi˚
,

355 
	tIN
 
	tEFI_IDENTIFY_DATA
 *
	tIdítifyD©a


399 
	gEFI_STATUS


400 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_DISQUALIFY_MODE
)(

401 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

402 
	tIN
 
	tUINT8
 
	tCh™√l
,

403 
	tIN
 
	tUINT8
 
	tDevi˚
,

404 
	tIN
 
	tEFI_ATA_COLLECTIVE_MODE
 *
	tBadModes


462 
	gEFI_STATUS


463 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_CALCULATE_MODE
)(

464 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

465 
	tIN
 
	tUINT8
 
	tCh™√l
,

466 
	tIN
 
	tUINT8
 
	tDevi˚
,

467 
	tOUT
 
	tEFI_ATA_COLLECTIVE_MODE
 **
	tSuµ‹ãdModes


494 
	gEFI_STATUS


495 (
	tEFIAPI
 *
	tEFI_IDE_CONTROLLER_SET_TIMING
)(

496 
	tIN
 
	tEFI_IDE_CONTROLLER_INIT_PROTOCOL
 *
	tThis
,

497 
	tIN
 
	tUINT8
 
	tCh™√l
,

498 
	tIN
 
	tUINT8
 
	tDevi˚
,

499 
	tIN
 
	tEFI_ATA_COLLECTIVE_MODE
 *
	tModes


505 
	s_EFI_IDE_CONTROLLER_INIT_PROTOCOL
 {

509 
EFI_IDE_CONTROLLER_GET_CHANNEL_INFO
 
	mGëCh™√lInfo
;

515 
EFI_IDE_CONTROLLER_NOTIFY_PHASE
 
	mNŸifyPha£
;

520 
EFI_IDE_CONTROLLER_SUBMIT_DATA
 
	mSubmôD©a
;

527 
EFI_IDE_CONTROLLER_DISQUALIFY_MODE
 
	mDisquÆifyMode
;

532 
EFI_IDE_CONTROLLER_CALCULATE_MODE
 
	mCÆcuœãMode
;

538 
EFI_IDE_CONTROLLER_SET_TIMING
 
	mSëTimög
;

545 
BOOLEAN
 
	mEnumAŒ
;

554 
UINT8
 
	mCh™√lCou¡
;

557 
EFI_GUID
 
gEfiIdeC⁄åﬁÀrInôPrŸocﬁGuid
;

	@IncompatiblePciDeviceSupport.h

70 #i‚de‡
_INCOMPATIBLE_PCI_DEVICE_SUPPORT_H_


71 
	#_INCOMPATIBLE_PCI_DEVICE_SUPPORT_H_


	)

76 
	#EFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_PROTOCOL_GUID
 \

	)

84 
_EFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_PROTOCOL
 
	tEFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_PROTOCOL
;

142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_CHECK_DEVICE
)(

144 
	tIN
 
	tEFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_PROTOCOL
 *
	tThis
,

145 
	tIN
 
	tUINTN
 
	tVíd‹Id
,

146 
	tIN
 
	tUINTN
 
	tDevi˚Id
,

147 
	tIN
 
	tUINTN
 
	tRevisi⁄Id
,

148 
	tIN
 
	tUINTN
 
	tSubsy°emVíd‹Id
,

149 
	tIN
 
	tUINTN
 
	tSubsy°emDevi˚Id
,

150 
	tOUT
 
	tVOID
 **
	tC⁄figuøti⁄


156 
	s_EFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_PROTOCOL
 {

162 
EFI_INCOMPATIBLE_PCI_DEVICE_SUPPORT_CHECK_DEVICE
 
	mCheckDevi˚
;

165 
EFI_GUID
 
gEfiIncom∑tibÀPciDevi˚Suµ‹tPrŸocﬁGuid
;

	@Ip4.h

21 #i‚de‡
__EFI_IP4_PROTOCOL_H__


22 
	#__EFI_IP4_PROTOCOL_H__


	)

24 
	~<PrŸocﬁ/M™agedNëw‹k.h
>

26 
	#EFI_IP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

31 
	#EFI_IP4_PROTOCOL_GUID
 \

	)

36 
_EFI_IP4_PROTOCOL
 
	tEFI_IP4_PROTOCOL
;

43 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

44 
EFI_IPv4_ADDRESS
 
	mIp4Addªss
;

45 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

46 } 
	tEFI_IP4_ADDRESS_PAIR
;

53 
EFI_HANDLE
 
	mDrivîH™dÀ
;

54 
UINT32
 
	mAddªssCou¡
;

55 
EFI_IP4_ADDRESS_PAIR
 
	mAddªssPaús
[1];

56 } 
	tEFI_IP4_VARIABLE_DATA
;

63 
UINT8
 
	mDeÁu…PrŸocﬁ
;

69 
BOOLEAN
 
	mAc˚±AnyPrŸocﬁ
;

74 
BOOLEAN
 
	mAc˚±IcmpEº‹s
;

80 
BOOLEAN
 
	mAc˚±Brﬂdˇ°
;

86 
BOOLEAN
 
	mAc˚±Promiscuous
;

90 
BOOLEAN
 
	mU£DeÁu…Addªss
;

94 
EFI_IPv4_ADDRESS
 
	mSèti⁄Addªss
;

98 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

102 
UINT8
 
	mTy≥OfSîvi˚
;

106 
UINT8
 
	mTimeToLive
;

110 
BOOLEAN
 
	mDoNŸFøgmít
;

115 
BOOLEAN
 
	mRawD©a
;

121 
UINT32
 
	mRe˚iveTimeout
;

127 
UINT32
 
	mTønsmôTimeout
;

128 } 
	tEFI_IP4_CONFIG_DATA
;

132 
EFI_IPv4_ADDRESS
 
	mSub√tAddªss
;

133 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

134 
EFI_IPv4_ADDRESS
 
	mG©ewayAddªss
;

135 } 
	tEFI_IP4_ROUTE_TABLE
;

138 
UINT8
 
	mTy≥
;

139 
UINT8
 
	mCode
;

140 } 
	tEFI_IP4_ICMP_TYPE
;

146 
BOOLEAN
 
	mIsSèπed
;

150 
UINT32
 
	mMaxPackëSize
;

154 
EFI_IP4_CONFIG_DATA
 
	mC⁄figD©a
;

158 
BOOLEAN
 
	mIsC⁄figuªd
;

162 
UINT32
 
	mGroupCou¡
;

166 
EFI_IPv4_ADDRESS
 *
	mGroupTabÀ
;

170 
UINT32
 
	mRouãCou¡
;

174 
EFI_IP4_ROUTE_TABLE
 *
	mRouãTabÀ
;

178 
UINT32
 
	mIcmpTy≥Cou¡
;

182 
EFI_IP4_ICMP_TYPE
 *
	mIcmpTy≥Li°
;

183 } 
	tEFI_IP4_MODE_DATA
;

185 #¥agm®
∑ck
(1)

188 
UINT8
 
	mHódîLígth
:4;

189 
UINT8
 
	mVîsi⁄
:4;

190 
UINT8
 
	mTy≥OfSîvi˚
;

191 
UINT16
 
	mTŸÆLígth
;

192 
UINT16
 
	mIdítifiˇti⁄
;

193 
UINT16
 
	mFøgmíèti⁄
;

194 
UINT8
 
	mTimeToLive
;

195 
UINT8
 
	mPrŸocﬁ
;

196 
UINT16
 
	mChecksum
;

197 
EFI_IPv4_ADDRESS
 
	mSour˚Addªss
;

198 
EFI_IPv4_ADDRESS
 
	mDe°ö©i⁄Addªss
;

199 } 
	tEFI_IP4_HEADER
;

200 #¥agm®
∑ck
()

204 
UINT32
 
	mFøgmítLígth
;

205 
VOID
 *
	mFøgmítBuf„r
;

206 } 
	tEFI_IP4_FRAGMENT_DATA
;

210 
EFI_TIME
 
	mTimeSèmp
;

211 
EFI_EVENT
 
	mRecy˛eSig«l
;

212 
UINT32
 
	mHódîLígth
;

213 
EFI_IP4_HEADER
 *
	mHódî
;

214 
UINT32
 
	mO±i⁄sLígth
;

215 
VOID
 *
	mO±i⁄s
;

216 
UINT32
 
	mD©aLígth
;

217 
UINT32
 
	mFøgmítCou¡
;

218 
EFI_IP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

219 } 
	tEFI_IP4_RECEIVE_DATA
;

223 
EFI_IPv4_ADDRESS
 
	mSour˚Addªss
;

224 
EFI_IPv4_ADDRESS
 
	mG©ewayAddªss
;

225 
UINT8
 
	mPrŸocﬁ
;

226 
UINT8
 
	mTy≥OfSîvi˚
;

227 
UINT8
 
	mTimeToLive
;

228 
BOOLEAN
 
	mDoNŸFøgmít
;

229 } 
	tEFI_IP4_OVERRIDE_DATA
;

232 
EFI_IPv4_ADDRESS
 
	mDe°ö©i⁄Addªss
;

233 
EFI_IP4_OVERRIDE_DATA
 *
	mOvîrideD©a
;

234 
UINT32
 
	mO±i⁄sLígth
;

235 
VOID
 *
	mO±i⁄sBuf„r
;

236 
UINT32
 
	mTŸÆD©aLígth
;

237 
UINT32
 
	mFøgmítCou¡
;

238 
EFI_IP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

239 } 
	tEFI_IP4_TRANSMIT_DATA
;

248 
EFI_EVENT
 
	mEvít
;

253 
EFI_STATUS
 
	mSètus
;

258 
EFI_IP4_RECEIVE_DATA
 *
	mRxD©a
;

262 
EFI_IP4_TRANSMIT_DATA
 *
	mTxD©a
;

263 } 
	mPackë
;

264 } 
	tEFI_IP4_COMPLETION_TOKEN
;

285 
	gEFI_STATUS


286 (
	tEFIAPI
 *
	tEFI_IP4_GET_MODE_DATA
)(

287 
	tIN
 
	tCONST
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

288 
	tOUT
 
	tEFI_IP4_MODE_DATA
 *
	tIp4ModeD©a
 
	tOPTIONAL
,

289 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

290 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


340 
	gEFI_STATUS


341 (
	tEFIAPI
 *
	tEFI_IP4_CONFIGURE
)(

342 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

343 
	tIN
 
	tEFI_IP4_CONFIG_DATA
 *
	tIpC⁄figD©a
 
	tOPTIONAL


377 
	gEFI_STATUS


378 (
	tEFIAPI
 *
	tEFI_IP4_GROUPS
)(

379 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

380 
	tIN
 
	tBOOLEAN
 
	tJoöFœg
,

381 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tGroupAddªss
 
	tOPTIONAL


435 
	gEFI_STATUS


436 (
	tEFIAPI
 *
	tEFI_IP4_ROUTES
)(

437 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

438 
	tIN
 
	tBOOLEAN
 
	tDñëeRouã
,

439 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tAddªss
,

440 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tMask
,

441 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tG©ewayAddªss


474 
	gEFI_STATUS


475 (
	tEFIAPI
 *
	tEFI_IP4_TRANSMIT
)(

476 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

477 
	tIN
 
	tEFI_IP4_COMPLETION_TOKEN
 *
	tTokí


513 
	gEFI_STATUS


514 (
	tEFIAPI
 *
	tEFI_IP4_RECEIVE
)(

515 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

516 
	tIN
 
	tEFI_IP4_COMPLETION_TOKEN
 *
	tTokí


549 
	gEFI_STATUS


550 (
	tEFIAPI
 *
	tEFI_IP4_CANCEL
)(

551 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis
,

552 
	tIN
 
	tEFI_IP4_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


583 
	gEFI_STATUS


584 (
	tEFIAPI
 *
	tEFI_IP4_POLL
)(

585 
	tIN
 
	tEFI_IP4_PROTOCOL
 *
	tThis


592 
	s_EFI_IP4_PROTOCOL
 {

593 
EFI_IP4_GET_MODE_DATA
 
	mGëModeD©a
;

594 
EFI_IP4_CONFIGURE
 
	mC⁄figuª
;

595 
EFI_IP4_GROUPS
 
	mGroups
;

596 
EFI_IP4_ROUTES
 
	mRouãs
;

597 
EFI_IP4_TRANSMIT
 
	mTønsmô
;

598 
EFI_IP4_RECEIVE
 
	mRe˚ive
;

599 
EFI_IP4_CANCEL
 
	mC™˚l
;

600 
EFI_IP4_POLL
 
	mPﬁl
;

603 
EFI_GUID
 
gEfiIp4Sîvi˚BödögPrŸocﬁGuid
;

604 
EFI_GUID
 
gEfiIp4PrŸocﬁGuid
;

	@Ip4Config.h

12 #i‚de‡
__EFI_IP4CONFIG_PROTOCOL_H__


13 
	#__EFI_IP4CONFIG_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/Ip4.h
>

17 
	#EFI_IP4_CONFIG_PROTOCOL_GUID
 \

	)

22 
_EFI_IP4_CONFIG_PROTOCOL
 
	tEFI_IP4_CONFIG_PROTOCOL
;

24 
	#IP4_CONFIG_VARIABLE_ATTRIBUTES
 \

	)

25 (
	gEFI_VARIABLE_NON_VOLATILE
 | 
	gEFI_VARIABLE_BOOTSERVICE_ACCESS
)

39 
EFI_IPv4_ADDRESS
 
	mSèti⁄Addªss
;

43 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

47 
UINT32
 
	mRouãTabÀSize
;

52 
EFI_IP4_ROUTE_TABLE
 *
	mRouãTabÀ
;

53 } 
	tEFI_IP4_IPCONFIG_DATA
;

103 
	gEFI_STATUS


104 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG_START
)(

105 
	tIN
 
	tEFI_IP4_CONFIG_PROTOCOL
 *
	tThis
,

106 
	tIN
 
	tEFI_EVENT
 
	tD⁄eEvít
,

107 
	tIN
 
	tEFI_EVENT
 
	tRec⁄figEvít


126 
	gEFI_STATUS


127 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG_STOP
)(

128 
	tIN
 
	tEFI_IP4_CONFIG_PROTOCOL
 *
	tThis


157 
	gEFI_STATUS


158 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG_GET_DATA
)(

159 
	tIN
 
	tEFI_IP4_CONFIG_PROTOCOL
 *
	tThis
,

160 
	tIN
 
	tOUT
 
	tUINTN
 *
	tIpC⁄figD©aSize
,

161 
	tOUT
 
	tEFI_IP4_IPCONFIG_DATA
 *
	tIpC⁄figD©a
 
	tOPTIONAL


168 
	s_EFI_IP4_CONFIG_PROTOCOL
 {

169 
EFI_IP4_CONFIG_START
 
	mSèπ
;

170 
EFI_IP4_CONFIG_STOP
 
	mSt›
;

171 
EFI_IP4_CONFIG_GET_DATA
 
	mGëD©a
;

174 
EFI_GUID
 
gEfiIp4C⁄figPrŸocﬁGuid
;

	@Ip4Config2.h

12 #i‚de‡
__EFI_IP4CONFIG2_PROTOCOL_H__


13 
	#__EFI_IP4CONFIG2_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/Ip4.h
>

17 
	#EFI_IP4_CONFIG2_PROTOCOL_GUID
 \

	)

22 
_EFI_IP4_CONFIG2_PROTOCOL
 
	tEFI_IP4_CONFIG2_PROTOCOL
;

35 
	mIp4C⁄fig2D©aTy≥I¡îÁ˚Info
,

43 
	mIp4C⁄fig2D©aTy≥Pﬁicy
,

52 
	mIp4C⁄fig2D©aTy≥M™uÆAddªss
,

63 
	mIp4C⁄fig2D©aTy≥G©eway
,

74 
	mIp4C⁄fig2D©aTy≥DnsSîvî
,

75 
	mIp4C⁄fig2D©aTy≥Maximum


76 } 
	tEFI_IP4_CONFIG2_DATA_TYPE
;

81 
	#EFI_IP4_CONFIG2_INTERFACE_INFO_NAME_SIZE
 32

	)

90 
CHAR16
 
	mName
[
EFI_IP4_CONFIG2_INTERFACE_INFO_NAME_SIZE
];

95 
UINT8
 
	mIfTy≥
;

99 
UINT32
 
	mHwAddªssSize
;

103 
EFI_MAC_ADDRESS
 
	mHwAddªss
;

107 
EFI_IPv4_ADDRESS
 
	mSèti⁄Addªss
;

111 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

115 
UINT32
 
	mRouãTabÀSize
;

121 
EFI_IP4_ROUTE_TABLE
 *
RouãTabÀ
 
	mOPTIONAL
;

122 } 
	tEFI_IP4_CONFIG2_INTERFACE_INFO
;

135 
	mIp4C⁄fig2PﬁicySètic
,

142 
	mIp4C⁄fig2PﬁicyDh˝
,

143 
	mIp4C⁄fig2PﬁicyMax


144 } 
	tEFI_IP4_CONFIG2_POLICY
;

153 
EFI_IPv4_ADDRESS
 
	mAddªss
;

157 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

158 } 
	tEFI_IP4_CONFIG2_MANUAL_ADDRESS
;

202 
	gEFI_STATUS


203 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG2_SET_DATA
) (

204 
	tIN
 
	tEFI_IP4_CONFIG2_PROTOCOL
 *
	tThis
,

205 
	tIN
 
	tEFI_IP4_CONFIG2_DATA_TYPE
 
	tD©aTy≥
,

206 
	tIN
 
	tUINTN
 
	tD©aSize
,

207 
	tIN
 
	tVOID
 *
	tD©a


244 
	gEFI_STATUS


245 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG2_GET_DATA
) (

246 
	tIN
 
	tEFI_IP4_CONFIG2_PROTOCOL
 *
	tThis
,

247 
	tIN
 
	tEFI_IP4_CONFIG2_DATA_TYPE
 
	tD©aTy≥
,

248 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

249 
	tIN
 
	tVOID
 *
	tD©a
 
	tOPTIONAL


273 
	gEFI_STATUS


274 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG2_REGISTER_NOTIFY
) (

275 
	tIN
 
	tEFI_IP4_CONFIG2_PROTOCOL
 *
	tThis
,

276 
	tIN
 
	tEFI_IP4_CONFIG2_DATA_TYPE
 
	tD©aTy≥
,

277 
	tIN
 
	tEFI_EVENT
 
	tEvít


294 
	gEFI_STATUS


295 (
	tEFIAPI
 *
	tEFI_IP4_CONFIG2_UNREGISTER_NOTIFY
) (

296 
	tIN
 
	tEFI_IP4_CONFIG2_PROTOCOL
 *
	tThis
,

297 
	tIN
 
	tEFI_IP4_CONFIG2_DATA_TYPE
 
	tD©aTy≥
,

298 
	tIN
 
	tEFI_EVENT
 
	tEvít


307 
	s_EFI_IP4_CONFIG2_PROTOCOL
 {

308 
EFI_IP4_CONFIG2_SET_DATA
 
	mSëD©a
;

309 
EFI_IP4_CONFIG2_GET_DATA
 
	mGëD©a
;

310 
EFI_IP4_CONFIG2_REGISTER_NOTIFY
 
	mRegi°îD©aNŸify
;

311 
EFI_IP4_CONFIG2_UNREGISTER_NOTIFY
 
	mUƒegi°îD©aNŸify
;

314 
EFI_GUID
 
gEfiIp4C⁄fig2PrŸocﬁGuid
;

	@Ip6.h

21 #i‚de‡
__EFI_IP6_PROTOCOL_H__


22 
	#__EFI_IP6_PROTOCOL_H__


	)

24 
	~<PrŸocﬁ/M™agedNëw‹k.h
>

27 
	#EFI_IP6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

32 
	#EFI_IP6_PROTOCOL_GUID
 \

	)

37 
_EFI_IP6_PROTOCOL
 
	tEFI_IP6_PROTOCOL
;

47 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

51 
EFI_IPv6_ADDRESS
 
	mIp6Addªss
;

55 
UINT8
 
	mPªfixLígth
;

56 } 
	tEFI_IP6_ADDRESS_PAIR
;

66 
EFI_HANDLE
 
	mDrivîH™dÀ
;

70 
UINT32
 
	mAddªssCou¡
;

74 
EFI_IP6_ADDRESS_PAIR
 
	mAddªssPaús
[1];

75 } 
	tEFI_IP6_VARIABLE_DATA
;

81 
	#ICMP_V6_DEST_UNREACHABLE
 0x1

	)

82 
	#ICMP_V6_PACKET_TOO_BIG
 0x2

	)

83 
	#ICMP_V6_TIME_EXCEEDED
 0x3

	)

84 
	#ICMP_V6_PARAMETER_PROBLEM
 0x4

	)

91 
	#ICMP_V6_ECHO_REQUEST
 0x80

	)

92 
	#ICMP_V6_ECHO_REPLY
 0x81

	)

93 
	#ICMP_V6_LISTENER_QUERY
 0x82

	)

94 
	#ICMP_V6_LISTENER_REPORT
 0x83

	)

95 
	#ICMP_V6_LISTENER_DONE
 0x84

	)

96 
	#ICMP_V6_ROUTER_SOLICIT
 0x85

	)

97 
	#ICMP_V6_ROUTER_ADVERTISE
 0x86

	)

98 
	#ICMP_V6_NEIGHBOR_SOLICIT
 0x87

	)

99 
	#ICMP_V6_NEIGHBOR_ADVERTISE
 0x88

	)

100 
	#ICMP_V6_REDIRECT
 0x89

	)

101 
	#ICMP_V6_LISTENER_REPORT_2
 0x8F

	)

108 
	#ICMP_V6_NO_ROUTE_TO_DEST
 0x0

	)

109 
	#ICMP_V6_COMM_PROHIBITED
 0x1

	)

110 
	#ICMP_V6_BEYOND_SCOPE
 0x2

	)

111 
	#ICMP_V6_ADDR_UNREACHABLE
 0x3

	)

112 
	#ICMP_V6_PORT_UNREACHABLE
 0x4

	)

113 
	#ICMP_V6_SOURCE_ADDR_FAILED
 0x5

	)

114 
	#ICMP_V6_ROUTE_REJECTED
 0x6

	)

121 
	#ICMP_V6_TIMEOUT_HOP_LIMIT
 0x0

	)

122 
	#ICMP_V6_TIMEOUT_REASSEMBLE
 0x1

	)

129 
	#ICMP_V6_ERRONEOUS_HEADER
 0x0

	)

130 
	#ICMP_V6_UNRECOGNIZE_NEXT_HDR
 0x1

	)

131 
	#ICMP_V6_UNRECOGNIZE_OPTION
 0x2

	)

145 
UINT8
 
	mDeÁu…PrŸocﬁ
;

153 
BOOLEAN
 
	mAc˚±AnyPrŸocﬁ
;

158 
BOOLEAN
 
	mAc˚±IcmpEº‹s
;

164 
BOOLEAN
 
	mAc˚±Promiscuous
;

169 
EFI_IPv6_ADDRESS
 
	mDe°ö©i⁄Addªss
;

189 
EFI_IPv6_ADDRESS
 
	mSèti⁄Addªss
;

194 
UINT8
 
	mTøfficCœss
;

198 
UINT8
 
	mH›Limô
;

203 
UINT32
 
	mFlowLabñ
;

209 
UINT32
 
	mRe˚iveTimeout
;

215 
UINT32
 
	mTønsmôTimeout
;

216 } 
	tEFI_IP6_CONFIG_DATA
;

222 
EFI_IPv6_ADDRESS
 
	mAddªss
;

223 
UINT8
 
	mPªfixLígth
;

224 } 
	tEFI_IP6_ADDRESS_INFO
;

236 
EFI_IPv6_ADDRESS
 
	mG©eway
;

240 
EFI_IPv6_ADDRESS
 
	mDe°ö©i⁄
;

244 
UINT8
 
	mPªfixLígth
;

245 } 
	tEFI_IP6_ROUTE_TABLE
;

257 
	mEfiNeighb‹InCom∂ëe
,

262 
	mEfiNeighb‹RóchabÀ
,

268 
	mEfiNeighb‹SèÀ
,

273 
	mEfiNeighb‹Dñay
,

279 
	mEfiNeighb‹Probe


280 } 
	tEFI_IP6_NEIGHBOR_STATE
;

288 
EFI_IPv6_ADDRESS
 
	mNeighb‹
;

289 
EFI_MAC_ADDRESS
 
	mLökAddªss
;

290 
EFI_IP6_NEIGHBOR_STATE
 
	mSèã
;

291 } 
	tEFI_IP6_NEIGHBOR_CACHE
;

299 
UINT8
 
	mTy≥
;

300 
UINT8
 
	mCode
;

301 } 
	tEFI_IP6_ICMP_TYPE
;

312 
BOOLEAN
 
	mIsSèπed
;

316 
UINT32
 
	mMaxPackëSize
;

320 
EFI_IP6_CONFIG_DATA
 
	mC⁄figD©a
;

327 
BOOLEAN
 
	mIsC⁄figuªd
;

331 
UINT32
 
	mAddªssCou¡
;

337 
EFI_IP6_ADDRESS_INFO
 *
	mAddªssLi°
;

342 
UINT32
 
	mGroupCou¡
;

348 
EFI_IPv6_ADDRESS
 *
	mGroupTabÀ
;

353 
UINT32
 
	mRouãCou¡
;

357 
EFI_IP6_ROUTE_TABLE
 *
	mRouãTabÀ
;

362 
UINT32
 
	mNeighb‹Cou¡
;

367 
EFI_IP6_NEIGHBOR_CACHE
 *
	mNeighb‹Cache
;

372 
UINT32
 
	mPªfixCou¡
;

377 
EFI_IP6_ADDRESS_INFO
 *
	mPªfixTabÀ
;

381 
UINT32
 
	mIcmpTy≥Cou¡
;

387 
EFI_IP6_ICMP_TYPE
 *
	mIcmpTy≥Li°
;

388 } 
	tEFI_IP6_MODE_DATA
;

395 #¥agm®
∑ck
(1)

396 
	s_EFI_IP6_HEADER
 {

397 
UINT8
 
	mTøfficCœssH
:4;

398 
UINT8
 
	mVîsi⁄
:4;

399 
UINT8
 
	mFlowLabñH
:4;

400 
UINT8
 
	mTøfficCœssL
:4;

401 
UINT16
 
	mFlowLabñL
;

402 
UINT16
 
	mPaylﬂdLígth
;

403 
UINT8
 
	mNextHódî
;

404 
UINT8
 
	mH›Limô
;

405 
EFI_IPv6_ADDRESS
 
	mSour˚Addªss
;

406 
EFI_IPv6_ADDRESS
 
	mDe°ö©i⁄Addªss
;

407 } 
	tEFI_IP6_HEADER
;

408 #¥agm®
∑ck
()

415 
	s_EFI_IP6_FRAGMENT_DATA
 {

416 
UINT32
 
	mFøgmítLígth
;

417 
VOID
 *
	mFøgmítBuf„r
;

418 } 
	tEFI_IP6_FRAGMENT_DATA
;

423 
	s_EFI_IP6_RECEIVE_DATA
 {

428 
EFI_TIME
 
	mTimeSèmp
;

433 
EFI_EVENT
 
	mRecy˛eSig«l
;

438 
UINT32
 
	mHódîLígth
;

444 
EFI_IP6_HEADER
 *
	mHódî
;

449 
UINT32
 
	mD©aLígth
;

453 
UINT32
 
	mFøgmítCou¡
;

457 
EFI_IP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

458 } 
	tEFI_IP6_RECEIVE_DATA
;

465 
	s_EFI_IP6_OVERRIDE_DATA
 {

466 
UINT8
 
	mPrŸocﬁ
;

467 
UINT8
 
	mH›Limô
;

468 
UINT32
 
	mFlowLabñ
;

469 } 
	tEFI_IP6_OVERRIDE_DATA
;

474 
	s_EFI_IP6_TRANSMIT_DATA
 {

479 
EFI_IPv6_ADDRESS
 
	mDe°ö©i⁄Addªss
;

483 
EFI_IP6_OVERRIDE_DATA
 *
	mOvîrideD©a
;

488 
UINT32
 
	mExtHdrsLígth
;

494 
VOID
 *
	mExtHdrs
;

499 
UINT8
 
	mNextHódî
;

503 
UINT32
 
	mD©aLígth
;

507 
UINT32
 
	mFøgmítCou¡
;

511 
EFI_IP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

512 } 
	tEFI_IP6_TRANSMIT_DATA
;

523 
EFI_EVENT
 
	mEvít
;

537 
EFI_STATUS
 
	mSètus
;

542 
EFI_IP6_RECEIVE_DATA
 *
	mRxD©a
;

546 
EFI_IP6_TRANSMIT_DATA
 *
	mTxD©a
;

547 } 
	mPackë
;

548 } 
	tEFI_IP6_COMPLETION_TOKEN
;

568 
	gEFI_STATUS


569 (
	tEFIAPI
 *
	tEFI_IP6_GET_MODE_DATA
)(

570 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

571 
	tOUT
 
	tEFI_IP6_MODE_DATA
 *
	tIp6ModeD©a
 
	tOPTIONAL
,

572 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

573 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


623 
	gEFI_STATUS


624 (
	tEFIAPI
 *
	tEFI_IP6_CONFIGURE
)(

625 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

626 
	tIN
 
	tEFI_IP6_CONFIG_DATA
 *
	tIp6C⁄figD©a
 
	tOPTIONAL


660 
	gEFI_STATUS


661 (
	tEFIAPI
 *
	tEFI_IP6_GROUPS
)(

662 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

663 
	tIN
 
	tBOOLEAN
 
	tJoöFœg
,

664 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tGroupAddªss
 
	tOPTIONAL


709 
	gEFI_STATUS


710 (
	tEFIAPI
 *
	tEFI_IP6_ROUTES
)(

711 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

712 
	tIN
 
	tBOOLEAN
 
	tDñëeRouã
,

713 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tDe°ö©i⁄
 
	tOPTIONAL
,

714 
	tIN
 
	tUINT8
 
	tPªfixLígth
,

715 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tG©ewayAddªss
 
	tOPTIONAL


765 
	gEFI_STATUS


766 (
	tEFIAPI
 *
	tEFI_IP6_NEIGHBORS
)(

767 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

768 
	tIN
 
	tBOOLEAN
 
	tDñëeFœg
,

769 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tT¨gëIp6Addªss
,

770 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tT¨gëLökAddªss
,

771 
	tIN
 
	tUINT32
 
	tTimeout
,

772 
	tIN
 
	tBOOLEAN
 
	tOvîride


818 
	gEFI_STATUS


819 (
	tEFIAPI
 *
	tEFI_IP6_TRANSMIT
)(

820 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

821 
	tIN
 
	tEFI_IP6_COMPLETION_TOKEN
 *
	tTokí


856 
	gEFI_STATUS


857 (
	tEFIAPI
 *
	tEFI_IP6_RECEIVE
)(

858 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

859 
	tIN
 
	tEFI_IP6_COMPLETION_TOKEN
 *
	tTokí


891 
	gEFI_STATUS


892 (
	tEFIAPI
 *
	tEFI_IP6_CANCEL
)(

893 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis
,

894 
	tIN
 
	tEFI_IP6_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


923 
	gEFI_STATUS


924 (
	tEFIAPI
 *
	tEFI_IP6_POLL
)(

925 
	tIN
 
	tEFI_IP6_PROTOCOL
 *
	tThis


932 
	s_EFI_IP6_PROTOCOL
 {

933 
EFI_IP6_GET_MODE_DATA
 
	mGëModeD©a
;

934 
EFI_IP6_CONFIGURE
 
	mC⁄figuª
;

935 
EFI_IP6_GROUPS
 
	mGroups
;

936 
EFI_IP6_ROUTES
 
	mRouãs
;

937 
EFI_IP6_NEIGHBORS
 
	mNeighb‹s
;

938 
EFI_IP6_TRANSMIT
 
	mTønsmô
;

939 
EFI_IP6_RECEIVE
 
	mRe˚ive
;

940 
EFI_IP6_CANCEL
 
	mC™˚l
;

941 
EFI_IP6_POLL
 
	mPﬁl
;

944 
EFI_GUID
 
gEfiIp6Sîvi˚BödögPrŸocﬁGuid
;

945 
EFI_GUID
 
gEfiIp6PrŸocﬁGuid
;

	@Ip6Config.h

9 #i‚de‡
__EFI_IP6CONFIG_PROTOCOL_H__


10 
	#__EFI_IP6CONFIG_PROTOCOL_H__


	)

12 
	~<PrŸocﬁ/Ip6.h
>

14 
	#EFI_IP6_CONFIG_PROTOCOL_GUID
 \

	)

19 
_EFI_IP6_CONFIG_PROTOCOL
 
	tEFI_IP6_CONFIG_PROTOCOL
;

31 
	mIp6C⁄figD©aTy≥I¡îÁ˚Info
,

41 
	mIp6C⁄figD©aTy≥A…I¡îÁ˚Id
,

49 
	mIp6C⁄figD©aTy≥Pﬁicy
,

58 
	mIp6C⁄figD©aTy≥DupAddrDëe˘Tønsmôs
,

67 
	mIp6C⁄figD©aTy≥M™uÆAddªss
,

78 
	mIp6C⁄figD©aTy≥G©eway
,

89 
	mIp6C⁄figD©aTy≥DnsSîvî
,

93 
	mIp6C⁄figD©aTy≥Maximum


94 } 
	tEFI_IP6_CONFIG_DATA_TYPE
;

105 
CHAR16
 
	mName
[32];

109 
UINT8
 
	mIfTy≥
;

113 
UINT32
 
	mHwAddªssSize
;

117 
EFI_MAC_ADDRESS
 
	mHwAddªss
;

121 
UINT32
 
	mAddªssInfoCou¡
;

128 
EFI_IP6_ADDRESS_INFO
 *
	mAddªssInfo
;

132 
UINT32
 
	mRouãCou¡
;

137 
EFI_IP6_ROUTE_TABLE
 *
	mRouãTabÀ
;

138 } 
	tEFI_IP6_CONFIG_INTERFACE_INFO
;

145 
UINT8
 
	mId
[8];

146 } 
	tEFI_IP6_CONFIG_INTERFACE_ID
;

162 
	mIp6C⁄figPﬁicyM™uÆ
,

174 
	mIp6C⁄figPﬁicyAutom©ic


175 } 
	tEFI_IP6_CONFIG_POLICY
;

184 
UINT32
 
	mDupAddrDëe˘Tønsmôs
;

185 } 
	tEFI_IP6_CONFIG_DUP_ADDR_DETECT_TRANSMITS
;

193 
EFI_IPv6_ADDRESS
 
	mAddªss
;

194 
BOOLEAN
 
	mIsAnyˇ°
;

195 
UINT8
 
	mPªfixLígth
;

196 } 
	tEFI_IP6_CONFIG_MANUAL_ADDRESS
;

247 
	gEFI_STATUS


248 (
	tEFIAPI
 *
	tEFI_IP6_CONFIG_SET_DATA
)(

249 
	tIN
 
	tEFI_IP6_CONFIG_PROTOCOL
 *
	tThis
,

250 
	tIN
 
	tEFI_IP6_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

251 
	tIN
 
	tUINTN
 
	tD©aSize
,

252 
	tIN
 
	tVOID
 *
	tD©a


293 
	gEFI_STATUS


294 (
	tEFIAPI
 *
	tEFI_IP6_CONFIG_GET_DATA
)(

295 
	tIN
 
	tEFI_IP6_CONFIG_PROTOCOL
 *
	tThis
,

296 
	tIN
 
	tEFI_IP6_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

297 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

298 
	tIN
 
	tVOID
 *
	tD©a
 
	tOPTIONAL


324 
	gEFI_STATUS


325 (
	tEFIAPI
 *
	tEFI_IP6_CONFIG_REGISTER_NOTIFY
)(

326 
	tIN
 
	tEFI_IP6_CONFIG_PROTOCOL
 *
	tThis
,

327 
	tIN
 
	tEFI_IP6_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

328 
	tIN
 
	tEFI_EVENT
 
	tEvít


347 
	gEFI_STATUS


348 (
	tEFIAPI
 *
	tEFI_IP6_CONFIG_UNREGISTER_NOTIFY
)(

349 
	tIN
 
	tEFI_IP6_CONFIG_PROTOCOL
 *
	tThis
,

350 
	tIN
 
	tEFI_IP6_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

351 
	tIN
 
	tEFI_EVENT
 
	tEvít


358 
	s_EFI_IP6_CONFIG_PROTOCOL
 {

359 
EFI_IP6_CONFIG_SET_DATA
 
	mSëD©a
;

360 
EFI_IP6_CONFIG_GET_DATA
 
	mGëD©a
;

361 
EFI_IP6_CONFIG_REGISTER_NOTIFY
 
	mRegi°îD©aNŸify
;

362 
EFI_IP6_CONFIG_UNREGISTER_NOTIFY
 
	mUƒegi°îD©aNŸify
;

365 
EFI_GUID
 
gEfiIp6C⁄figPrŸocﬁGuid
;

	@IpSec.h

21 #i‚de‡
__EFI_IPSEC_PROTOCOL_H__


22 
	#__EFI_IPSEC_PROTOCOL_H__


	)

24 
	~<PrŸocﬁ/IpSecC⁄fig.h
>

26 
	#EFI_IPSEC_PROTOCOL_GUID
 \

	)

31 
	#EFI_IPSEC2_PROTOCOL_GUID
 \

	)

36 
_EFI_IPSEC_PROTOCOL
 
	tEFI_IPSEC_PROTOCOL
;

37 
_EFI_IPSEC2_PROTOCOL
 
	tEFI_IPSEC2_PROTOCOL
;

43 
	s_EFI_IPSEC_FRAGMENT_DATA
 {

44 
UINT32
 
	mFøgmítLígth
;

45 
VOID
 *
	mFøgmítBuf„r
;

46 } 
	tEFI_IPSEC_FRAGMENT_DATA
;

74 
	gEFI_STATUS


75 (
	tEFIAPI
 *
	tEFI_IPSEC_PROCESS
)(

76 
	tIN
 
	tEFI_IPSEC_PROTOCOL
 *
	tThis
,

77 
	tIN
 
	tEFI_HANDLE
 
	tNicH™dÀ
,

78 
	tIN
 
	tUINT8
 
	tIpVî
,

79 
	tIN
 
	tOUT
 
	tVOID
 *
	tIpHód
,

80 
	tIN
 
	tUINT8
 *
	tLa°Hód
,

81 
	tIN
 
	tVOID
 *
	tO±i⁄sBuf„r
,

82 
	tIN
 
	tUINT32
 
	tO±i⁄sLígth
,

83 
	tIN
 
	tOUT
 
	tEFI_IPSEC_FRAGMENT_DATA
 **
	tFøgmítTabÀ
,

84 
	tIN
 
	tUINT32
 *
	tFøgmítCou¡
,

85 
	tIN
 
	tEFI_IPSEC_TRAFFIC_DIR
 
	tTøfficDúe˘i⁄
,

86 
	tOUT
 
	tEFI_EVENT
 *
	tRecy˛eSig«l


97 
	s_EFI_IPSEC_PROTOCOL
 {

98 
EFI_IPSEC_PROCESS
 
	mPro˚ss
;

99 
EFI_EVENT
 
	mDißbÀdEvít
;

100 
BOOLEAN
 
	mDißbÀdFœg
;

187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_IPSEC_PROCESSEXT
) (

189 
	tIN
 
	tEFI_IPSEC2_PROTOCOL
 *
	tThis
,

190 
	tIN
 
	tEFI_HANDLE
 
	tNicH™dÀ
,

191 
	tIN
 
	tUINT8
 
	tIpVî
,

192 
	tIN
 
	tOUT
 
	tVOID
 *
	tIpHód
,

193 
	tIN
 
	tOUT
 
	tUINT8
 *
	tLa°Hód
,

194 
	tIN
 
	tOUT
 
	tVOID
 **
	tO±i⁄sBuf„r
,

195 
	tIN
 
	tOUT
 
	tUINT32
 *
	tO±i⁄sLígth
,

196 
	tIN
 
	tOUT
 
	tEFI_IPSEC_FRAGMENT_DATA
 **
	tFøgmítTabÀ
,

197 
	tIN
 
	tOUT
 
	tUINT32
 *
	tFøgmítCou¡
,

198 
	tIN
 
	tEFI_IPSEC_TRAFFIC_DIR
 
	tTøfficDúe˘i⁄
,

199 
	tOUT
 
	tEFI_EVENT
 *
	tRecy˛eSig«l


210 
	s_EFI_IPSEC2_PROTOCOL
 {

211 
EFI_IPSEC_PROCESSEXT
 
	mPro˚ssExt
;

212 
EFI_EVENT
 
	mDißbÀdEvít
;

213 
BOOLEAN
 
	mDißbÀdFœg
;

216 
EFI_GUID
 
gEfiIpSecPrŸocﬁGuid
;

217 
EFI_GUID
 
gEfiIpSec2PrŸocﬁGuid
;

	@IpSecConfig.h

14 #i‚de‡
__EFI_IPSE_CCONFIG_PROTOCOL_H__


15 
	#__EFI_IPSE_CCONFIG_PROTOCOL_H__


	)

18 
	#EFI_IPSEC_CONFIG_PROTOCOL_GUID
 \

	)

23 
_EFI_IPSEC_CONFIG_PROTOCOL
 
	tEFI_IPSEC_CONFIG_PROTOCOL
;

42 
	mIP£cC⁄figD©aTy≥Spd
,

50 
	mIP£cC⁄figD©aTy≥Sad
,

59 
	mIP£cC⁄figD©aTy≥Pad
,

60 
	mIP£cC⁄figD©aTy≥Maximum


61 } 
	tEFI_IPSEC_CONFIG_DATA_TYPE
;

66 
	s_EFI_IP_ADDRESS_INFO
 {

67 
EFI_IP_ADDRESS
 
	mAddªss
;

68 
UINT8
 
	mPªfixLígth
;

69 } 
	tEFI_IP_ADDRESS_INFO
;

75 
	s_EFI_IPSEC_SPD_SELECTOR
 {

79 
UINT32
 
	mLoˇlAddªssCou¡
;

84 
EFI_IP_ADDRESS_INFO
 *
	mLoˇlAddªss
;

88 
UINT32
 
	mRemŸeAddªssCou¡
;

93 
EFI_IP_ADDRESS_INFO
 *
	mRemŸeAddªss
;

100 
UINT16
 
	mNextLayîPrŸocﬁ
;

106 
UINT16
 
	mLoˇlP‹t
;

113 
UINT16
 
	mLoˇlP‹tR™ge
;

118 
UINT16
 
	mRemŸeP‹t
;

124 
UINT16
 
	mRemŸeP‹tR™ge
;

125 } 
	tEFI_IPSEC_SPD_SELECTOR
;

137 
	mEfiIP£cInBound
,

143 
	mEfiIP£cOutBound


144 } 
	tEFI_IPSEC_TRAFFIC_DIR
;

154 
	mEfiIP£cA˘i⁄Disˇrd
,

159 
	mEfiIP£cA˘i⁄By∑ss
,

166 
	mEfiIP£cA˘i⁄PrŸe˘


167 } 
	tEFI_IPSEC_ACTION
;

175 
	s_EFI_IPSEC_SA_LIFETIME
 {

182 
UINT64
 
	mByãCou¡
;

187 
UINT64
 
	mSo·Li„time
;

192 
UINT64
 
	mH¨dLi„time
;

193 } 
	tEFI_IPSEC_SA_LIFETIME
;

202 
	mEfiIP£cTøn•‹t
,

203 
	mEfiIP£cTu¬ñ


204 } 
	tEFI_IPSEC_MODE
;

214 
	mEfiIP£cTu¬ñCÀ¨Df
,

215 
	mEfiIP£cTu¬ñSëDf
,

216 
	mEfiIP£cTu¬ñC›yDf


217 } 
	tEFI_IPSEC_TUNNEL_DF_OPTION
;

222 
	s_EFI_IPSEC_TUNNEL_OPTION
 {

226 
EFI_IP_ADDRESS
 
	mLoˇlTu¬ñAddªss
;

230 
EFI_IP_ADDRESS
 
	mRemŸeTu¬ñAddªss
;

236 
EFI_IPSEC_TUNNEL_DF_OPTION
 
	mDF
;

237 } 
	tEFI_IPSEC_TUNNEL_OPTION
;

243 
	mEfiIP£cAH
,

244 
	mEfiIP£cESP


245 } 
	tEFI_IPSEC_PROTOCOL_TYPE
;

251 
	s_EFI_IPSEC_PROCESS_POLICY
 {

256 
BOOLEAN
 
	mExtSeqNum
;

263 
BOOLEAN
 
	mSeqOvîÊow
;

268 
BOOLEAN
 
	mFøgCheck
;

273 
EFI_IPSEC_SA_LIFETIME
 
	mSaLi„time
;

277 
EFI_IPSEC_MODE
 
	mMode
;

281 
EFI_IPSEC_TUNNEL_OPTION
 *
	mTu¬ñO±i⁄
;

285 
EFI_IPSEC_PROTOCOL_TYPE
 
	mPrŸo
;

289 
UINT8
 
	mAuthAlgoId
;

296 
UINT8
 
	mEncAlgoId
;

297 } 
	tEFI_IPSEC_PROCESS_POLICY
;

303 
	s_EFI_IPSEC_SA_ID
 {

309 
UINT32
 
	mSpi
;

313 
EFI_IPSEC_PROTOCOL_TYPE
 
	mPrŸo
;

317 
EFI_IP_ADDRESS
 
	mDe°Addªss
;

318 } 
	tEFI_IPSEC_SA_ID
;

321 
	#MAX_PEERID_LEN
 128

	)

326 
	s_EFI_IPSEC_SPD_DATA
 {

331 
UINT8
 
	mName
[
MAX_PEERID_LEN
];

347 
UINT32
 
	mPackageFœg
;

351 
EFI_IPSEC_TRAFFIC_DIR
 
	mTøfficDúe˘i⁄
;

356 
EFI_IPSEC_ACTION
 
	mA˘i⁄
;

360 
EFI_IPSEC_PROCESS_POLICY
 *
	mPro˚ssögPﬁicy
;

364 
UINTN
 
	mSaIdCou¡
;

369 
EFI_IPSEC_SA_ID
 
	mSaId
[1];

370 } 
	tEFI_IPSEC_SPD_DATA
;

377 
	s_EFI_IPSEC_AH_ALGO_INFO
 {

378 
UINT8
 
	mAuthAlgoId
;

379 
UINTN
 
	mAuthKeyLígth
;

380 
VOID
 *
	mAuthKey
;

381 } 
	tEFI_IPSEC_AH_ALGO_INFO
;

391 
	s_EFI_IPSEC_ESP_ALGO_INFO
 {

392 
UINT8
 
	mEncAlgoId
;

393 
UINTN
 
	mEncKeyLígth
;

394 
VOID
 *
	mEncKey
;

395 
UINT8
 
	mAuthAlgoId
;

396 
UINTN
 
	mAuthKeyLígth
;

397 
VOID
 *
	mAuthKey
;

398 } 
	tEFI_IPSEC_ESP_ALGO_INFO
;

404 
EFI_IPSEC_AH_ALGO_INFO
 
	mAhAlgoInfo
;

405 
EFI_IPSEC_ESP_ALGO_INFO
 
	mE•AlgoInfo
;

406 } 
	tEFI_IPSEC_ALGO_INFO
;

411 
	s_EFI_IPSEC_SA_DATA
 {

415 
EFI_IPSEC_MODE
 
	mMode
;

420 
UINT64
 
	mSNCou¡
;

425 
UINT8
 
	mA¡iRïœyWödows
;

429 
EFI_IPSEC_ALGO_INFO
 
	mAlgoInfo
;

433 
EFI_IPSEC_SA_LIFETIME
 
	mSaLi„time
;

438 
UINT32
 
	mP©hMTU
;

442 
EFI_IPSEC_SPD_SELECTOR
 *
	mSpdSñe˘‹
;

448 
BOOLEAN
 
	mM™uÆSë
;

449 } 
	tEFI_IPSEC_SA_DATA
;

454 
	s_EFI_IPSEC_SA_DATA2
 {

458 
EFI_IPSEC_MODE
 
	mMode
;

463 
UINT64
 
	mSNCou¡
;

468 
UINT8
 
	mA¡iRïœyWödows
;

472 
EFI_IPSEC_ALGO_INFO
 
	mAlgoInfo
;

476 
EFI_IPSEC_SA_LIFETIME
 
	mSaLi„time
;

481 
UINT32
 
	mP©hMTU
;

485 
EFI_IPSEC_SPD_SELECTOR
 *
	mSpdSñe˘‹
;

491 
BOOLEAN
 
	mM™uÆSë
;

495 
EFI_IP_ADDRESS
 
	mTu¬ñSour˚Addªss
;

499 
EFI_IP_ADDRESS
 
	mTu¬ñDe°ö©i⁄Addªss
;

500 } 
	tEFI_IPSEC_SA_DATA2
;

508 
	s_EFI_IPSEC_PAD_ID
 {

512 
BOOLEAN
 
	mPìrIdVÆid
;

517 
EFI_IP_ADDRESS_INFO
 
	mIpAddªss
;

524 
UINT8
 
	mPìrId
[
MAX_PEERID_LEN
];

525 } 
	mId
;

526 } 
	tEFI_IPSEC_PAD_ID
;

534 
EFI_IPSEC_SPD_SELECTOR
 
	mSpdSñe˘‹
;

535 
EFI_IPSEC_SA_ID
 
	mSaId
;

536 
EFI_IPSEC_PAD_ID
 
	mPadId
;

537 } 
	tEFI_IPSEC_CONFIG_SELECTOR
;

545 
	mEfiIP£cAuthPrŸocﬁIKEv1
,

546 
	mEfiIP£cAuthPrŸocﬁIKEv2
,

547 
	mEfiIP£cAuthPrŸocﬁMaximum


548 } 
	tEFI_IPSEC_AUTH_PROTOCOL_TYPE
;

557 
	mEfiIP£cAuthMëhodPªSh¨edSe¸ë
,

561 
	mEfiIP£cAuthMëhodCîtifiˇãs
,

562 
	mEfiIP£cAuthMëhodMaximum


563 } 
	tEFI_IPSEC_AUTH_METHOD
;

568 
	s_EFI_IPSEC_PAD_DATA
 {

572 
EFI_IPSEC_AUTH_PROTOCOL_TYPE
 
	mAuthPrŸocﬁ
;

576 
EFI_IPSEC_AUTH_METHOD
 
	mAuthMëhod
;

582 
BOOLEAN
 
	mIkeIdFœg
;

586 
UINTN
 
	mAuthD©aSize
;

592 
VOID
 *
	mAuthD©a
;

596 
UINTN
 
	mRevoˇti⁄D©aSize
;

601 
VOID
 *
	mRevoˇti⁄D©a
;

602 } 
	tEFI_IPSEC_PAD_DATA
;

635 
	gEFI_STATUS


636 (
	tEFIAPI
 *
	tEFI_IPSEC_CONFIG_SET_DATA
)(

637 
	tIN
 
	tEFI_IPSEC_CONFIG_PROTOCOL
 *
	tThis
,

638 
	tIN
 
	tEFI_IPSEC_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

639 
	tIN
 
	tEFI_IPSEC_CONFIG_SELECTOR
 *
	tSñe˘‹
,

640 
	tIN
 
	tVOID
 *
	tD©a
,

641 
	tIN
 
	tEFI_IPSEC_CONFIG_SELECTOR
 *
	tIn£πBef‹e
 
	tOPTIONAL


672 
	gEFI_STATUS


673 (
	tEFIAPI
 *
	tEFI_IPSEC_CONFIG_GET_DATA
)(

674 
	tIN
 
	tEFI_IPSEC_CONFIG_PROTOCOL
 *
	tThis
,

675 
	tIN
 
	tEFI_IPSEC_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

676 
	tIN
 
	tEFI_IPSEC_CONFIG_SELECTOR
 *
	tSñe˘‹
,

677 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

678 
	tOUT
 
	tVOID
 *
	tD©a


719 
	gEFI_STATUS


720 (
	tEFIAPI
 *
	tEFI_IPSEC_CONFIG_GET_NEXT_SELECTOR
)(

721 
	tIN
 
	tEFI_IPSEC_CONFIG_PROTOCOL
 *
	tThis
,

722 
	tIN
 
	tEFI_IPSEC_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

723 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSñe˘‹Size
,

724 
	tIN
 
	tOUT
 
	tEFI_IPSEC_CONFIG_SELECTOR
 *
	tSñe˘‹


749 
	gEFI_STATUS


750 (
	tEFIAPI
 *
	tEFI_IPSEC_CONFIG_REGISTER_NOTIFY
)(

751 
	tIN
 
	tEFI_IPSEC_CONFIG_PROTOCOL
 *
	tThis
,

752 
	tIN
 
	tEFI_IPSEC_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

753 
	tIN
 
	tEFI_EVENT
 
	tEvít


775 
	gEFI_STATUS


776 (
	tEFIAPI
 *
	tEFI_IPSEC_CONFIG_UNREGISTER_NOTIFY
)(

777 
	tIN
 
	tEFI_IPSEC_CONFIG_PROTOCOL
 *
	tThis
,

778 
	tIN
 
	tEFI_IPSEC_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

779 
	tIN
 
	tEFI_EVENT
 
	tEvít


791 
	s_EFI_IPSEC_CONFIG_PROTOCOL
 {

792 
EFI_IPSEC_CONFIG_SET_DATA
 
	mSëD©a
;

793 
EFI_IPSEC_CONFIG_GET_DATA
 
	mGëD©a
;

794 
EFI_IPSEC_CONFIG_GET_NEXT_SELECTOR
 
	mGëNextSñe˘‹
;

795 
EFI_IPSEC_CONFIG_REGISTER_NOTIFY
 
	mRegi°îD©aNŸify
;

796 
EFI_IPSEC_CONFIG_UNREGISTER_NOTIFY
 
	mUƒegi°îD©aNŸify
;

799 
EFI_GUID
 
gEfiIpSecC⁄figPrŸocﬁGuid
;

	@IsaHc.h

16 #i‚de‡
__ISA_HC_PROTOCOL_H__


17 
	#__ISA_HC_PROTOCOL_H__


	)

19 
	#EFI_ISA_HC_PROTOCOL_GUID
 \

	)

24 
	#EFI_ISA_HC_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

29 
_EFI_ISA_HC_PROTOCOL
 
	tEFI_ISA_HC_PROTOCOL
;

30 
_EFI_ISA_HC_PROTOCOL
 *
	tPEFI_ISA_HC_PROTOCOL
;

54 
	gEFI_STATUS


55 (
	tEFIAPI
 *
	tEFI_ISA_HC_OPEN_IO
) (

56 
	tIN
 
	tCONST
 
	tEFI_ISA_HC_PROTOCOL
 *
	tThis
,

57 
	tIN
 
	tUINT16
 
	tIoAddªss
,

58 
	tIN
 
	tUINT16
 
	tIoLígth
,

59 
	tOUT
 
	tUINT64
 *
	tIoA≥πuªH™dÀ


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_ISA_HC_CLOSE_IO
) (

81 
	tIN
 
	tCONST
 
	tEFI_ISA_HC_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tUINT64
 
	tIoA≥πuªH™dÀ


88 
	s_EFI_ISA_HC_PROTOCOL
 {

93 
UINT32
 
	mVîsi⁄
;

97 
EFI_ISA_HC_OPEN_IO
 
	mO≥nIoA≥πuª
;

101 
EFI_ISA_HC_CLOSE_IO
 
	mClo£IoA≥πuª
;

107 
EFI_GUID
 
gEfiIßHcPrŸocﬁGuid
;

108 
EFI_GUID
 
gEfiIßHcSîvi˚BödögPrŸocﬁGuid
;

	@Kms.h

16 #i‚de‡
__KMS_H__


17 
	#__KMS_H__


	)

19 
	#EFI_KMS_PROTOCOL_GUID
 \

	)

24 
_EFI_KMS_PROTOCOL
 
	tEFI_KMS_PROTOCOL
;

30 
	#EFI_KMS_DATA_TYPE_NONE
 0

	)

31 
	#EFI_KMS_DATA_TYPE_BINARY
 1

	)

32 
	#EFI_KMS_DATA_TYPE_ASCII
 2

	)

33 
	#EFI_KMS_DATA_TYPE_UNICODE
 4

	)

34 
	#EFI_KMS_DATA_TYPE_UTF8
 8

	)

49 
	#EFI_KMS_FORMAT_GENERIC_128_GUID
 \

	)

53 
	#EFI_KMS_FORMAT_GENERIC_160_GUID
 \

	)

57 
	#EFI_KMS_FORMAT_GENERIC_256_GUID
 \

	)

61 
	#EFI_KMS_FORMAT_GENERIC_512_GUID
 \

	)

65 
	#EFI_KMS_FORMAT_GENERIC_1024_GUID
 \

	)

69 
	#EFI_KMS_FORMAT_GENERIC_2048_GUID
 \

	)

73 
	#EFI_KMS_FORMAT_GENERIC_3072_GUID
 \

	)

77 
	#EFI_KMS_FORMAT_GENERIC_DYNAMIC_GUID
 \

	)

87 
	#EFI_KMS_FORMAT_MD2_128_GUID
 \

	)

91 
	#EFI_KMS_FORMAT_MDC2_128_GUID
 \

	)

95 
	#EFI_KMS_FORMAT_MD4_128_GUID
 \

	)

99 
	#EFI_KMS_FORMAT_MDC4_128_GUID
 \

	)

103 
	#EFI_KMS_FORMAT_MD5_128_GUID
 \

	)

107 
	#EFI_KMS_FORMAT_MD5SHA_128_GUID
 \

	)

111 
	#EFI_KMS_FORMAT_SHA1_160_GUID
 \

	)

115 
	#EFI_KMS_FORMAT_SHA256_256_GUID
 \

	)

119 
	#EFI_KMS_FORMAT_SHA512_512_GUID
 \

	)

129 
	#EFI_KMS_FORMAT_AESXTS_128_GUID
 \

	)

133 
	#EFI_KMS_FORMAT_AESXTS_256_GUID
 \

	)

137 
	#EFI_KMS_FORMAT_AESCBC_128_GUID
 \

	)

141 
	#EFI_KMS_FORMAT_AESCBC_256_GUID
 \

	)

145 
	#EFI_KMS_FORMAT_RSASHA1_1024_GUID
 \

	)

149 
	#EFI_KMS_FORMAT_RSASHA1_2048_GUID
 \

	)

153 
	#EFI_KMS_FORMAT_RSASHA256_2048_GUID
 \

	)

157 
	#EFI_KMS_FORMAT_RSASHA256_3072_GUID
 \

	)

163 
	#EFI_KMS_ATTRIBUTE_TYPE_NONE
 0x00

	)

164 
	#EFI_KMS_ATTRIBUTE_TYPE_INTEGER
 0x01

	)

165 
	#EFI_KMS_ATTRIBUTE_TYPE_LONG_INTEGER
 0x02

	)

166 
	#EFI_KMS_ATTRIBUTE_TYPE_BIG_INTEGER
 0x03

	)

167 
	#EFI_KMS_ATTRIBUTE_TYPE_ENUMERATION
 0x04

	)

168 
	#EFI_KMS_ATTRIBUTE_TYPE_BOOLEAN
 0x05

	)

169 
	#EFI_KMS_ATTRIBUTE_TYPE_BYTE_STRING
 0x06

	)

170 
	#EFI_KMS_ATTRIBUTE_TYPE_TEXT_STRING
 0x07

	)

171 
	#EFI_KMS_ATTRIBUTE_TYPE_DATE_TIME
 0x08

	)

172 
	#EFI_KMS_ATTRIBUTE_TYPE_INTERVAL
 0x09

	)

173 
	#EFI_KMS_ATTRIBUTE_TYPE_STRUCTURE
 0x0A

	)

174 
	#EFI_KMS_ATTRIBUTE_TYPE_DYNAMIC
 0x0B

	)

180 
UINT32
 
	mKeySize
;

184 
UINT8
 
	mKeyD©a
[1];

185 } 
	tEFI_KMS_FORMAT_GENERIC_DYNAMIC
;

191 
UINT16
 
	mClõ¡IdSize
;

195 
VOID
 *
	mClõ¡Id
;

201 
UINT8
 
	mClõ¡NameTy≥
;

207 
UINT8
 
	mClõ¡NameCou¡
;

212 
VOID
 *
	mClõ¡Name
;

213 } 
	tEFI_KMS_CLIENT_INFO
;

219 
UINT8
 
	mKeyIdítifõrSize
;

223 
VOID
 *
	mKeyIdítifõr
;

227 
EFI_GUID
 
	mKeyF‹m©
;

232 
VOID
 *
	mKeyVÆue
;

250 
EFI_STATUS
 
	mKeySètus
;

251 } 
	tEFI_KMS_KEY_DESCRIPTOR
;

258 
UINT16
 
	mTag
;

263 
UINT16
 
	mTy≥
;

267 
UINT32
 
	mLígth
;

271 
UINT8
 
	mKeyAâribuãD©a
[1];

272 } 
	tEFI_KMS_DYNAMIC_FIELD
;

278 
UINT32
 
	mFõldCou¡
;

282 
EFI_KMS_DYNAMIC_FIELD
 
	mFõld
[1];

283 } 
	tEFI_KMS_DYNAMIC_ATTRIBUTE
;

291 
UINT8
 
	mKeyAâribuãIdítifõrTy≥
;

296 
UINT8
 
	mKeyAâribuãIdítifõrCou¡
;

301 
VOID
 *
	mKeyAâribuãIdítifõr
;

310 
UINT16
 
	mKeyAâribuãIn°™˚
;

315 
UINT16
 
	mKeyAâribuãTy≥
;

320 
UINT16
 
	mKeyAâribuãVÆueSize
;

325 
VOID
 *
	mKeyAâribuãVÆue
;

343 
EFI_STATUS
 
	mKeyAâribuãSètus
;

344 } 
	tEFI_KMS_KEY_ATTRIBUTE
;

360 
	gEFI_STATUS


361 (
	tEFIAPI
 *
	tEFI_KMS_GET_SERVICE_STATUS
) (

362 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis


409 
	gEFI_STATUS


410 (
	tEFIAPI
 *
	tEFI_KMS_REGISTER_CLIENT
) (

411 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

412 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

413 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

414 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


503 
	gEFI_STATUS


504 (
	tEFIAPI
 *
	tEFI_KMS_CREATE_KEY
) (

505 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

506 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

507 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyDes¸ùt‹Cou¡
,

508 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_DESCRIPTOR
 *
	tKeyDes¸ùt‹s
,

509 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

510 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


591 
	gEFI_STATUS


592 (
	tEFIAPI
 *
	tEFI_KMS_GET_KEY
) (

593 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

594 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

595 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyDes¸ùt‹Cou¡
,

596 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_DESCRIPTOR
 *
	tKeyDes¸ùt‹s
,

597 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

598 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


677 
	gEFI_STATUS


678 (
	tEFIAPI
 *
	tEFI_KMS_ADD_KEY
) (

679 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

680 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

681 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyDes¸ùt‹Cou¡
,

682 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_DESCRIPTOR
 *
	tKeyDes¸ùt‹s
,

683 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

684 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


756 
	gEFI_STATUS


757 (
	tEFIAPI
 *
	tEFI_KMS_DELETE_KEY
) (

758 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

759 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

760 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyDes¸ùt‹Cou¡
,

761 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_DESCRIPTOR
 *
	tKeyDes¸ùt‹s
,

762 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

763 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


843 
	gEFI_STATUS


844 (
	tEFIAPI
 *
	tEFI_KMS_GET_KEY_ATTRIBUTES
) (

845 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

846 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

847 
	tIN
 
	tUINT8
 *
	tKeyIdítifõrSize
,

848 
	tIN
 
	tCONST
 
	tVOID
 *
	tKeyIdítifõr
,

849 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyAâribuãsCou¡
,

850 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_ATTRIBUTE
 *
	tKeyAâribuãs
,

851 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

852 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


933 
	gEFI_STATUS


934 (
	tEFIAPI
 *
	tEFI_KMS_ADD_KEY_ATTRIBUTES
) (

935 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

936 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

937 
	tIN
 
	tUINT8
 *
	tKeyIdítifõrSize
,

938 
	tIN
 
	tCONST
 
	tVOID
 *
	tKeyIdítifõr
,

939 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyAâribuãsCou¡
,

940 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_ATTRIBUTE
 *
	tKeyAâribuãs
,

941 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

942 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


1016 
	gEFI_STATUS


1017 (
	tEFIAPI
 *
	tEFI_KMS_DELETE_KEY_ATTRIBUTES
) (

1018 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

1019 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

1020 
	tIN
 
	tUINT8
 *
	tKeyIdítifõrSize
,

1021 
	tIN
 
	tCONST
 
	tVOID
 *
	tKeyIdítifõr
,

1022 
	tIN
 
	tOUT
 
	tUINT16
 *
	tKeyAâribuãsCou¡
,

1023 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_ATTRIBUTE
 *
	tKeyAâribuãs
,

1024 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

1025 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


1119 
	gEFI_STATUS


1120 (
	tEFIAPI
 *
	tEFI_KMS_GET_KEY_BY_ATTRIBUTES
) (

1121 
	tIN
 
	tEFI_KMS_PROTOCOL
 *
	tThis
,

1122 
	tIN
 
	tEFI_KMS_CLIENT_INFO
 *
	tClõ¡
,

1123 
	tIN
 
	tOUT
 
	tUINTN
 *
	tKeyAâribuãCou¡
,

1124 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_ATTRIBUTE
 *
	tKeyAâribuãs
,

1125 
	tIN
 
	tOUT
 
	tUINTN
 *
	tKeyDes¸ùt‹Cou¡
,

1126 
	tIN
 
	tOUT
 
	tEFI_KMS_KEY_DESCRIPTOR
 *
	tKeyDes¸ùt‹s
,

1127 
	tIN
 
	tOUT
 
	tUINTN
 *
	tClõ¡D©aSize
 
	tOPTIONAL
,

1128 
	tIN
 
	tOUT
 
	tVOID
 **
	tClõ¡D©a
 
	tOPTIONAL


1135 
	s_EFI_KMS_PROTOCOL
 {

1141 
EFI_KMS_GET_SERVICE_STATUS
 
	mGëSîvi˚Sètus
;

1145 
EFI_KMS_REGISTER_CLIENT
 
	mRegi°îClõ¡
;

1149 
EFI_KMS_CREATE_KEY
 
	mCª©eKey
;

1153 
EFI_KMS_GET_KEY
 
	mGëKey
;

1158 
EFI_KMS_ADD_KEY
 
	mAddKey
;

1162 
EFI_KMS_DELETE_KEY
 
	mDñëeKey
;

1166 
EFI_KMS_GET_KEY_ATTRIBUTES
 
	mGëKeyAâribuãs
;

1170 
EFI_KMS_ADD_KEY_ATTRIBUTES
 
	mAddKeyAâribuãs
;

1174 
EFI_KMS_DELETE_KEY_ATTRIBUTES
 
	mDñëeKeyAâribuãs
;

1178 
EFI_KMS_GET_KEY_BY_ATTRIBUTES
 
	mGëKeyByAâribuãs
;

1183 
UINT32
 
	mPrŸocﬁVîsi⁄
;

1188 
EFI_GUID
 
	mSîvi˚Id
;

1193 
CHAR16
 *
	mSîvi˚Name
;

1198 
UINT32
 
	mSîvi˚Vîsi⁄
;

1207 
BOOLEAN
 
	mSîvi˚AvaûabÀ
;

1212 
BOOLEAN
 
	mClõ¡IdSuµ‹ãd
;

1217 
BOOLEAN
 
	mClõ¡IdRequúed
;

1221 
UINT16
 
	mClõ¡IdMaxSize
;

1228 
UINT8
 
	mClõ¡NameSåögTy≥s
;

1233 
BOOLEAN
 
	mClõ¡NameRequúed
;

1237 
UINT16
 
	mClõ¡NameMaxCou¡
;

1244 
BOOLEAN
 
	mClõ¡D©aSuµ‹ãd
;

1249 
UINTN
 
	mClõ¡D©aMaxSize
;

1254 
BOOLEAN
 
	mKeyIdV¨übÀLíSuµ‹ãd
;

1260 
UINTN
 
	mKeyIdMaxSize
;

1264 
UINTN
 
	mKeyF‹m©sCou¡
;

1276 
EFI_GUID
 *
	mKeyF‹m©s
;

1281 
BOOLEAN
 
	mKeyAâribuãsSuµ‹ãd
;

1288 
UINT8
 
	mKeyAâribuãIdSåögTy≥s
;

1289 
UINT16
 
	mKeyAâribuãIdMaxCou¡
;

1295 
UINTN
 
	mKeyAâribuãsCou¡
;

1308 
EFI_KMS_KEY_ATTRIBUTE
 *
	mKeyAâribuãs
;

1311 
EFI_GUID
 
gEfiKmsF‹m©Gíîic128Guid
;

1312 
EFI_GUID
 
gEfiKmsF‹m©Gíîic160Guid
;

1313 
EFI_GUID
 
gEfiKmsF‹m©Gíîic256Guid
;

1314 
EFI_GUID
 
gEfiKmsF‹m©Gíîic512Guid
;

1315 
EFI_GUID
 
gEfiKmsF‹m©Gíîic1024Guid
;

1316 
EFI_GUID
 
gEfiKmsF‹m©Gíîic2048Guid
;

1317 
EFI_GUID
 
gEfiKmsF‹m©Gíîic3072Guid
;

1318 
EFI_GUID
 
gEfiKmsF‹m©Md2128Guid
;

1319 
EFI_GUID
 
gEfiKmsF‹m©Mdc2128Guid
;

1320 
EFI_GUID
 
gEfiKmsF‹m©Md4128Guid
;

1321 
EFI_GUID
 
gEfiKmsF‹m©Mdc4128Guid
;

1322 
EFI_GUID
 
gEfiKmsF‹m©Md5128Guid
;

1323 
EFI_GUID
 
gEfiKmsF‹m©Md5sha128Guid
;

1324 
EFI_GUID
 
gEfiKmsF‹m©Sha1160Guid
;

1325 
EFI_GUID
 
gEfiKmsF‹m©Sha256256Guid
;

1326 
EFI_GUID
 
gEfiKmsF‹m©Sha512512Guid
;

1327 
EFI_GUID
 
gEfiKmsF‹m©Aesxts128Guid
;

1328 
EFI_GUID
 
gEfiKmsF‹m©Aesxts256Guid
;

1329 
EFI_GUID
 
gEfiKmsF‹m©Aescbc128Guid
;

1330 
EFI_GUID
 
gEfiKmsF‹m©Aescbc256Guid
;

1331 
EFI_GUID
 
gEfiKmsF‹m©Rßsha11024Guid
;

1332 
EFI_GUID
 
gEfiKmsF‹m©Rßsha12048Guid
;

1333 
EFI_GUID
 
gEfiKmsF‹m©Rßsha2562048Guid
;

1334 
EFI_GUID
 
gEfiKmsF‹m©Rßsha2563072Guid
;

1335 
EFI_GUID
 
gEfiKmsPrŸocﬁGuid
;

	@LegacyRegion2.h

14 #i‚de‡
__LEGACY_REGION2_H__


15 
	#__LEGACY_REGION2_H__


	)

18 
	#EFI_LEGACY_REGION2_PROTOCOL_GUID
 \

	)

23 
_EFI_LEGACY_REGION2_PROTOCOL
 
	tEFI_LEGACY_REGION2_PROTOCOL
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_LEGACY_REGION2_DECODE
)(

52 
	tIN
 
	tEFI_LEGACY_REGION2_PROTOCOL
 *
	tThis
,

53 
	tIN
 
	tUINT32
 
	tSèπ
,

54 
	tIN
 
	tUINT32
 
	tLígth
,

55 
	tOUT
 
	tUINT32
 *
	tGønuœrôy
,

56 
	tIN
 
	tBOOLEAN
 *
	tOn


81 
	gEFI_STATUS


82 (
	tEFIAPI
 *
	tEFI_LEGACY_REGION2_LOCK
)(

83 
	tIN
 
	tEFI_LEGACY_REGION2_PROTOCOL
 *
	tThis
,

84 
	tIN
 
	tUINT32
 
	tSèπ
,

85 
	tIN
 
	tUINT32
 
	tLígth
,

86 
	tOUT
 
	tUINT32
 *
	tGønuœrôy


116 
	gEFI_STATUS


117 (
	tEFIAPI
 *
	tEFI_LEGACY_REGION2_BOOT_LOCK
)(

118 
	tIN
 
	tEFI_LEGACY_REGION2_PROTOCOL
 *
	tThis
,

119 
	tIN
 
	tUINT32
 
	tSèπ
,

120 
	tIN
 
	tUINT32
 
	tLígth
,

121 
	tOUT
 
	tUINT32
 *
	tGønuœrôy
 
	tOPTIONAL


146 
	gEFI_STATUS


147 (
	tEFIAPI
 *
	tEFI_LEGACY_REGION2_UNLOCK
)(

148 
	tIN
 
	tEFI_LEGACY_REGION2_PROTOCOL
 *
	tThis
,

149 
	tIN
 
	tUINT32
 
	tSèπ
,

150 
	tIN
 
	tUINT32
 
	tLígth
,

151 
	tOUT
 
	tUINT32
 *
	tGønuœrôy


156 
	mLegacyRegi⁄Decoded
,

157 
	mLegacyRegi⁄NŸDecoded
,

158 
	mLegacyRegi⁄WrôeE«bÀd
,

159 
	mLegacyRegi⁄WrôeDißbÀd
,

160 
	mLegacyRegi⁄BoŸLocked
,

162 
	mLegacyRegi⁄NŸLocked


163 } 
	tEFI_LEGACY_REGION_ATTRIBUTE
;

171 
UINT32
 
	mSèπ
;

175 
UINT32
 
	mLígth
;

180 
EFI_LEGACY_REGION_ATTRIBUTE
 
	mAâribuã
;

185 
UINT32
 
	mGønuœrôy
;

186 } 
	tEFI_LEGACY_REGION_DESCRIPTOR
;

209 
	gEFI_STATUS


210 (
	tEFIAPI
 *
	tEFI_LEGACY_REGION_GET_INFO
)(

211 
	tIN
 
	tEFI_LEGACY_REGION2_PROTOCOL
 *
	tThis
,

212 
	tOUT
 
	tUINT32
 *
	tDes¸ùt‹Cou¡
,

213 
	tOUT
 
	tEFI_LEGACY_REGION_DESCRIPTOR
 **
	tDes¸ùt‹


223 
	s_EFI_LEGACY_REGION2_PROTOCOL
 {

224 
EFI_LEGACY_REGION2_DECODE
 
	mDecode
;

225 
EFI_LEGACY_REGION2_LOCK
 
	mLock
;

226 
EFI_LEGACY_REGION2_BOOT_LOCK
 
	mBoŸLock
;

227 
EFI_LEGACY_REGION2_UNLOCK
 
	mUnLock
;

228 
EFI_LEGACY_REGION_GET_INFO
 
	mGëInfo
;

231 
EFI_GUID
 
gEfiLegacyRegi⁄2PrŸocﬁGuid
;

	@LegacySpiController.h

12 #i‚de‡
__LEGACY_SPI_CONTROLLER_PROTOCOL_H__


13 
	#__LEGACY_SPI_CONTROLLER_PROTOCOL_H__


	)

21 
	#EFI_LEGACY_SPI_CONTROLLER_GUID
 \

	)

26 
_EFI_LEGACY_SPI_CONTROLLER_PROTOCOL


27 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
;

48 
	gEFI_STATUS


49 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_ERASE_BLOCK_OPCODE
) (

50 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis
,

51 
	tIN
 
	tUINT8
 
	tEø£BlockOpcode


73 
	gEFI_STATUS


74 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_WRITE_STATUS_PREFIX
) (

75 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis
,

76 
	tIN
 
	tUINT8
 
	tWrôeSètusPªfix


98 
	gEFI_STATUS


99 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_BIOS_BASE_ADDRESS
) (

100 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis
,

101 
	tIN
 
	tUINT32
 
	tBiosBa£Addªss


118 
	gEFI_STATUS


119 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_CLEAR_SPI_PROTECT
) (

120 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis


139 
	gBOOLEAN


140 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_IS_RANGE_PROTECTED
) (

141 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis
,

142 
	tIN
 
	tUINT32
 
	tBiosAddªss
,

143 
	tIN
 
	tUINT32
 
	tBlocksToPrŸe˘


172 
	gEFI_STATUS


173 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_PROTECT_NEXT_RANGE
) (

174 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis
,

175 
	tIN
 
	tUINT32
 
	tBiosAddªss
,

176 
	tIN
 
	tUINT32
 
	tBlocksToPrŸe˘


197 
	gEFI_STATUS


198 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL_LOCK_CONTROLLER
) (

199 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	tThis


205 
	s_EFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 {

209 
UINT32
 
	mMaximumOff£t
;

214 
UINT32
 
	mMaximumR™geByãs
;

219 
UINT32
 
	mR™geRegi°îCou¡
;

224 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_ERASE_BLOCK_OPCODE
 
	mEø£BlockOpcode
;

229 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_WRITE_STATUS_PREFIX
 
	mWrôeSètusPªfix
;

234 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_BIOS_BASE_ADDRESS
 
	mBiosBa£Addªss
;

239 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_CLEAR_SPI_PROTECT
 
	mCÀ¨SpiPrŸe˘
;

244 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_IS_RANGE_PROTECTED
 
	mIsR™gePrŸe˘ed
;

249 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_PROTECT_NEXT_RANGE
 
	mPrŸe˘NextR™ge
;

254 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL_LOCK_CONTROLLER
 
	mLockC⁄åﬁÀr
;

257 
EFI_GUID
 
gEfiLegacySpiC⁄åﬁÀrPrŸocﬁGuid
;

	@LegacySpiFlash.h

12 #i‚de‡
__LEGACY_SPI_FLASH_PROTOCOL_H__


13 
	#__LEGACY_SPI_FLASH_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/SpiN‹Fœsh.h
>

20 
	#EFI_LEGACY_SPI_FLASH_PROTOCOL_GUID
 \

	)

24 
_EFI_LEGACY_SPI_FLASH_PROTOCOL
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_FLASH_PROTOCOL_BIOS_BASE_ADDRESS
) (

48 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
 *
	tThis
,

49 
	tIN
 
	tUINT32
 
	tBiosBa£Addªss


66 
	gEFI_STATUS


67 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_FLASH_PROTOCOL_CLEAR_SPI_PROTECT
) (

68 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
 *
	tThis


87 
	gBOOLEAN


88 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_FLASH_PROTOCOL_IS_RANGE_PROTECTED
) (

89 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
 *
	tThis
,

90 
	tIN
 
	tUINT32
 
	tBiosAddªss
,

91 
	tIN
 
	tUINT32
 
	tBlocksToPrŸe˘


121 
	gEFI_STATUS


122 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_FLASH_PROTOCOL_PROTECT_NEXT_RANGE
) (

123 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
 *
	tThis
,

124 
	tIN
 
	tUINT32
 
	tBiosAddªss
,

125 
	tIN
 
	tUINT32
 
	tBlocksToPrŸe˘


147 
	gEFI_STATUS


148 (
	tEFIAPI
 *
	tEFI_LEGACY_SPI_FLASH_PROTOCOL_LOCK_CONTROLLER
) (

149 
	tIN
 
	tCONST
 
	tEFI_LEGACY_SPI_FLASH_PROTOCOL
 *
	tThis


156 
	s_EFI_LEGACY_SPI_FLASH_PROTOCOL
 {

161 
EFI_SPI_NOR_FLASH_PROTOCOL
 
	mFœshPrŸocﬁ
;

170 
EFI_LEGACY_SPI_FLASH_PROTOCOL_BIOS_BASE_ADDRESS
 
	mBiosBa£Addªss
;

175 
EFI_LEGACY_SPI_FLASH_PROTOCOL_CLEAR_SPI_PROTECT
 
	mCÀ¨SpiPrŸe˘
;

180 
EFI_LEGACY_SPI_FLASH_PROTOCOL_IS_RANGE_PROTECTED
 
	mIsR™gePrŸe˘ed
;

185 
EFI_LEGACY_SPI_FLASH_PROTOCOL_PROTECT_NEXT_RANGE
 
	mPrŸe˘NextR™ge
;

190 
EFI_LEGACY_SPI_FLASH_PROTOCOL_LOCK_CONTROLLER
 
	mLockC⁄åﬁÀr
;

193 
EFI_GUID
 
gEfiLegacySpiFœshPrŸocﬁGuid
;

	@LegacySpiSmmController.h

12 #i‚de‡
__LEGACY_SPI_SMM_CONTROLLER_PROTOCOL_H__


13 
	#__LEGACY_SPI_SMM_CONTROLLER_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/LegacySpiC⁄åﬁÀr.h
>

20 
	#EFI_LEGACY_SPI_SMM_CONTROLLER_PROTOCOL_GUID
 \

	)

25 
_EFI_LEGACY_SPI_CONTROLLER_PROTOCOL


26 
	tEFI_LEGACY_SPI_SMM_CONTROLLER_PROTOCOL
;

28 
EFI_GUID
 
gEfiLegacySpiSmmC⁄åﬁÀrPrŸocﬁGuid
;

	@LegacySpiSmmFlash.h

12 #i‚de‡
__LEGACY_SPI_SMM_FLASH_PROTOCOL_H__


13 
	#__LEGACY_SPI_SMM_FLASH_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/LegacySpiFœsh.h
>

20 
	#EFI_LEGACY_SPI_SMM_FLASH_PROTOCOL_GUID
 \

	)

25 
_EFI_LEGACY_SPI_FLASH_PROTOCOL


26 
	tEFI_LEGACY_SPI_SMM_FLASH_PROTOCOL
;

28 
EFI_GUID
 
gEfiLegacySpiSmmFœshPrŸocﬁGuid
;

	@LoadFile.h

15 #i‚de‡
__EFI_LOAD_FILE_PROTOCOL_H__


16 
	#__EFI_LOAD_FILE_PROTOCOL_H__


	)

18 
	#EFI_LOAD_FILE_PROTOCOL_GUID
 \

	)

26 
	#LOAD_FILE_PROTOCOL
 
EFI_LOAD_FILE_PROTOCOL_GUID


	)

28 
_EFI_LOAD_FILE_PROTOCOL
 
	tEFI_LOAD_FILE_PROTOCOL
;

33 
EFI_LOAD_FILE_PROTOCOL
 
	tEFI_LOAD_FILE_INTERFACE
;

64 
	gEFI_STATUS


65 (
	tEFIAPI
 *
	tEFI_LOAD_FILE
)(

66 
	tIN
 
	tEFI_LOAD_FILE_PROTOCOL
 *
	tThis
,

67 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tFûeP©h
,

68 
	tIN
 
	tBOOLEAN
 
	tBoŸPﬁicy
,

69 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

70 
	tIN
 
	tVOID
 *
	tBuf„r
 
	tOPTIONAL


76 
	s_EFI_LOAD_FILE_PROTOCOL
 {

77 
EFI_LOAD_FILE
 
	mLﬂdFûe
;

80 
EFI_GUID
 
gEfiLﬂdFûePrŸocﬁGuid
;

	@LoadFile2.h

15 #i‚de‡
__EFI_LOAD_FILE2_PROTOCOL_H__


16 
	#__EFI_LOAD_FILE2_PROTOCOL_H__


	)

18 
	#EFI_LOAD_FILE2_PROTOCOL_GUID
 \

	)

26 
	#LOAD_FILE2_PROTOCOL
 
EFI_LOAD_FILE2_PROTOCOL_GUID


	)

28 
_EFI_LOAD_FILE2_PROTOCOL
 
	tEFI_LOAD_FILE2_PROTOCOL
;

61 
	gEFI_STATUS


62 (
	tEFIAPI
 *
	tEFI_LOAD_FILE2
)(

63 
	tIN
 
	tEFI_LOAD_FILE2_PROTOCOL
 *
	tThis
,

64 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tFûeP©h
,

65 
	tIN
 
	tBOOLEAN
 
	tBoŸPﬁicy
,

66 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

67 
	tIN
 
	tVOID
 *
	tBuf„r
 
	tOPTIONAL


73 
	s_EFI_LOAD_FILE2_PROTOCOL
 {

74 
EFI_LOAD_FILE2
 
	mLﬂdFûe
;

77 
EFI_GUID
 
gEfiLﬂdFûe2PrŸocﬁGuid
;

	@LoadedImage.h

12 #i‚de‡
__LOADED_IMAGE_PROTOCOL_H__


13 
	#__LOADED_IMAGE_PROTOCOL_H__


	)

15 
	#EFI_LOADED_IMAGE_PROTOCOL_GUID
 \

	)

20 
	#EFI_LOADED_IMAGE_DEVICE_PATH_PROTOCOL_GUID
 \

	)

28 
	#LOADED_IMAGE_PROTOCOL
 
EFI_LOADED_IMAGE_PROTOCOL_GUID


	)

33 
	#EFI_LOADED_IMAGE_PROTOCOL_REVISION
 0x1000

	)

38 
	#EFI_LOADED_IMAGE_INFORMATION_REVISION
 
EFI_LOADED_IMAGE_PROTOCOL_REVISION


	)

44 
UINT32
 
	mRevisi⁄
;

46 
EFI_HANDLE
 
	mP¨ítH™dÀ
;

48 
EFI_SYSTEM_TABLE
 *
	mSy°emTabÀ
;

53 
EFI_HANDLE
 
	mDevi˚H™dÀ
;

54 
EFI_DEVICE_PATH_PROTOCOL
 *
	mFûeP©h
;

56 
VOID
 *
	mRe£rved
;

61 
UINT32
 
	mLﬂdO±i⁄sSize
;

62 
VOID
 *
	mLﬂdO±i⁄s
;

67 
VOID
 *
	mImageBa£
;

68 
UINT64
 
	mImageSize
;

69 
EFI_MEMORY_TYPE
 
	mImageCodeTy≥
;

70 
EFI_MEMORY_TYPE
 
	mImageD©aTy≥
;

71 
EFI_IMAGE_UNLOAD
 
	mU∆ﬂd
;

72 } 
	tEFI_LOADED_IMAGE_PROTOCOL
;

77 
EFI_LOADED_IMAGE_PROTOCOL
 
	tEFI_LOADED_IMAGE
;

79 
EFI_GUID
 
gEfiLﬂdedImagePrŸocﬁGuid
;

80 
EFI_GUID
 
gEfiLﬂdedImageDevi˚P©hPrŸocﬁGuid
;

	@ManagedNetwork.h

13 #i‚de‡
__EFI_MANAGED_NETWORK_PROTOCOL_H__


14 
	#__EFI_MANAGED_NETWORK_PROTOCOL_H__


	)

16 
	~<PrŸocﬁ/Sim∂eNëw‹k.h
>

18 
	#EFI_MANAGED_NETWORK_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

23 
	#EFI_MANAGED_NETWORK_PROTOCOL_GUID
 \

	)

28 
_EFI_MANAGED_NETWORK_PROTOCOL
 
	tEFI_MANAGED_NETWORK_PROTOCOL
;

35 
UINT32
 
	mRe˚ivedQueueTimeoutVÆue
;

40 
UINT32
 
	mTønsmôQueueTimeoutVÆue
;

45 
UINT16
 
	mPrŸocﬁTy≥Fûãr
;

50 
BOOLEAN
 
	mE«bÀUniˇ°Re˚ive
;

55 
BOOLEAN
 
	mE«bÀMu…iˇ°Re˚ive
;

60 
BOOLEAN
 
	mE«bÀBrﬂdˇ°Re˚ive
;

65 
BOOLEAN
 
	mE«bÀPromiscuousRe˚ive
;

70 
BOOLEAN
 
	mFlushQueuesOnRe£t
;

76 
BOOLEAN
 
	mE«bÀRe˚iveTime°amps
;

83 
BOOLEAN
 
	mDißbÀBackgroundPﬁlög
;

84 } 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
;

87 
EFI_TIME
 
	mTime°amp
;

88 
EFI_EVENT
 
	mRecy˛eEvít
;

89 
UINT32
 
	mPackëLígth
;

90 
UINT32
 
	mHódîLígth
;

91 
UINT32
 
	mAddªssLígth
;

92 
UINT32
 
	mD©aLígth
;

93 
BOOLEAN
 
	mBrﬂdˇ°Fœg
;

94 
BOOLEAN
 
	mMu…iˇ°Fœg
;

95 
BOOLEAN
 
	mPromiscuousFœg
;

96 
UINT16
 
	mPrŸocﬁTy≥
;

97 
VOID
 *
	mDe°ö©i⁄Addªss
;

98 
VOID
 *
	mSour˚Addªss
;

99 
VOID
 *
	mMedüHódî
;

100 
VOID
 *
	mPackëD©a
;

101 } 
	tEFI_MANAGED_NETWORK_RECEIVE_DATA
;

104 
UINT32
 
	mFøgmítLígth
;

105 
VOID
 *
	mFøgmítBuf„r
;

106 } 
	tEFI_MANAGED_NETWORK_FRAGMENT_DATA
;

109 
EFI_MAC_ADDRESS
 *
	mDe°ö©i⁄Addªss
;

110 
EFI_MAC_ADDRESS
 *
	mSour˚Addªss
;

111 
UINT16
 
	mPrŸocﬁTy≥
;

112 
UINT32
 
	mD©aLígth
;

113 
UINT16
 
	mHódîLígth
;

114 
UINT16
 
	mFøgmítCou¡
;

115 
EFI_MANAGED_NETWORK_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

116 } 
	tEFI_MANAGED_NETWORK_TRANSMIT_DATA
;

126 
EFI_EVENT
 
	mEvít
;

131 
EFI_STATUS
 
	mSètus
;

136 
EFI_MANAGED_NETWORK_RECEIVE_DATA
 *
	mRxD©a
;

140 
EFI_MANAGED_NETWORK_TRANSMIT_DATA
 *
	mTxD©a
;

141 } 
	mPackë
;

142 } 
	tEFI_MANAGED_NETWORK_COMPLETION_TOKEN
;

160 
	gEFI_STATUS


161 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_GET_MODE_DATA
)(

162 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

163 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

164 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_CONFIGURE
)(

189 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

190 
	tIN
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL


215 
	gEFI_STATUS


216 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_MCAST_IP_TO_MAC
)(

217 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

218 
	tIN
 
	tBOOLEAN
 
	tIpv6Fœg
,

219 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tIpAddªss
,

220 
	tOUT
 
	tEFI_MAC_ADDRESS
 *
	tMacAddªss


245 
	gEFI_STATUS


246 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_GROUPS
)(

247 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

248 
	tIN
 
	tBOOLEAN
 
	tJoöFœg
,

249 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tMacAddªss
 
	tOPTIONAL


269 
	gEFI_STATUS


270 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_TRANSMIT
)(

271 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

272 
	tIN
 
	tEFI_MANAGED_NETWORK_COMPLETION_TOKEN
 *
	tTokí


295 
	gEFI_STATUS


296 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_RECEIVE
)(

297 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

298 
	tIN
 
	tEFI_MANAGED_NETWORK_COMPLETION_TOKEN
 *
	tTokí


322 
	gEFI_STATUS


323 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_CANCEL
)(

324 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis
,

325 
	tIN
 
	tEFI_MANAGED_NETWORK_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


343 
	gEFI_STATUS


344 (
	tEFIAPI
 *
	tEFI_MANAGED_NETWORK_POLL
)(

345 
	tIN
 
	tEFI_MANAGED_NETWORK_PROTOCOL
 *
	tThis


352 
	s_EFI_MANAGED_NETWORK_PROTOCOL
 {

353 
EFI_MANAGED_NETWORK_GET_MODE_DATA
 
	mGëModeD©a
;

354 
EFI_MANAGED_NETWORK_CONFIGURE
 
	mC⁄figuª
;

355 
EFI_MANAGED_NETWORK_MCAST_IP_TO_MAC
 
	mMˇ°IpToMac
;

356 
EFI_MANAGED_NETWORK_GROUPS
 
	mGroups
;

357 
EFI_MANAGED_NETWORK_TRANSMIT
 
	mTønsmô
;

358 
EFI_MANAGED_NETWORK_RECEIVE
 
	mRe˚ive
;

359 
EFI_MANAGED_NETWORK_CANCEL
 
	mC™˚l
;

360 
EFI_MANAGED_NETWORK_POLL
 
	mPﬁl
;

363 
EFI_GUID
 
gEfiM™agedNëw‹kSîvi˚BödögPrŸocﬁGuid
;

364 
EFI_GUID
 
gEfiM™agedNëw‹kPrŸocﬁGuid
;

	@Metronome.h

11 #i‚de‡
__ARCH_PROTOCOL_METRONOME_H__


12 
	#__ARCH_PROTOCOL_METRONOME_H__


	)

17 
	#EFI_METRONOME_ARCH_PROTOCOL_GUID
 \

	)

23 
_EFI_METRONOME_ARCH_PROTOCOL
 
	tEFI_METRONOME_ARCH_PROTOCOL
;

48 
	gEFI_STATUS


49 (
	tEFIAPI
 *
	tEFI_METRONOME_WAIT_FOR_TICK
)(

50 
	tIN
 
	tEFI_METRONOME_ARCH_PROTOCOL
 *
	tThis
,

51 
	tIN
 
	tUINT32
 
	tTickNumbî


59 
	s_EFI_METRONOME_ARCH_PROTOCOL
 {

60 
EFI_METRONOME_WAIT_FOR_TICK
 
	mWaôF‹Tick
;

69 
UINT32
 
	mTickPîiod
;

72 
EFI_GUID
 
gEfiMër⁄omeArchPrŸocﬁGuid
;

	@MmAccess.h

19 #i‚de‡
_MM_ACCESS_H_


20 
	#_MM_ACCESS_H_


	)

22 
	#EFI_MM_ACCESS_PROTOCOL_GUID
 \

	)

28 
_EFI_MM_ACCESS_PROTOCOL
 
	tEFI_MM_ACCESS_PROTOCOL
;

44 
	gEFI_STATUS


45 (
	tEFIAPI
 *
	tEFI_MM_OPEN
)(

46 
	tIN
 
	tEFI_MM_ACCESS_PROTOCOL
 *
	tThis


62 
	gEFI_STATUS


63 (
	tEFIAPI
 *
	tEFI_MM_CLOSE
)(

64 
	tIN
 
	tEFI_MM_ACCESS_PROTOCOL
 *
	tThis


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_MM_LOCK
)(

81 
	tIN
 
	tEFI_MM_ACCESS_PROTOCOL
 *
	tThis


96 
	gEFI_STATUS


97 (
	tEFIAPI
 *
	tEFI_MM_CAPABILITIES
)(

98 
	tIN
 
	tCONST
 
	tEFI_MM_ACCESS_PROTOCOL
 *
	tThis
,

99 
	tIN
 
	tOUT
 
	tUINTN
 *
	tMmømM≠Size
,

100 
	tIN
 
	tOUT
 
	tEFI_MMRAM_DESCRIPTOR
 *
	tMmømM≠


109 
	s_EFI_MM_ACCESS_PROTOCOL
 {

110 
EFI_MM_OPEN
 
	mO≥n
;

111 
EFI_MM_CLOSE
 
	mClo£
;

112 
EFI_MM_LOCK
 
	mLock
;

113 
EFI_MM_CAPABILITIES
 
	mGëC≠abûôõs
;

117 
BOOLEAN
 
	mLockSèã
;

121 
BOOLEAN
 
	mO≥nSèã
;

124 
EFI_GUID
 
gEfiMmAc˚ssPrŸocﬁGuid
;

	@MmBase.h

12 #i‚de‡
_MM_BASE_H_


13 
	#_MM_BASE_H_


	)

15 
	~<Pi/PiMmCis.h
>

17 
	#EFI_MM_BASE_PROTOCOL_GUID
 \

	)

22 
_EFI_MM_BASE_PROTOCOL
 
	tEFI_MM_BASE_PROTOCOL
;

40 
	gEFI_STATUS


41 (
	tEFIAPI
 *
	tEFI_MM_INSIDE_OUT
)(

42 
	tIN
 
	tCONST
 
	tEFI_MM_BASE_PROTOCOL
 *
	tThis
,

43 
	tOUT
 
	tBOOLEAN
 *
	tInMmøm


62 
	gEFI_STATUS


63 (
	tEFIAPI
 *
	tEFI_MM_GET_MMST_LOCATION
)(

64 
	tIN
 
	tCONST
 
	tEFI_MM_BASE_PROTOCOL
 *
	tThis
,

65 
	tIN
 
	tOUT
 
	tEFI_MM_SYSTEM_TABLE
 **
	tMm°


73 
	s_EFI_MM_BASE_PROTOCOL
 {

74 
EFI_MM_INSIDE_OUT
 
	mInMm
;

75 
EFI_MM_GET_MMST_LOCATION
 
	mGëMm°Loˇti⁄
;

78 
EFI_GUID
 
gEfiMmBa£PrŸocﬁGuid
;

	@MmCommunication.h

12 #i‚de‡
_MM_COMMUNICATION_H_


13 
	#_MM_COMMUNICATION_H_


	)

15 #¥agm®
∑ck
(1)

25 
EFI_GUID
 
	mHódîGuid
;

29 
UINTN
 
	mMesßgeLígth
;

33 
UINT8
 
	mD©a
[1];

34 } 
	tEFI_MM_COMMUNICATE_HEADER
;

36 #¥agm®
∑ck
()

38 
	#EFI_MM_COMMUNICATION_PROTOCOL_GUID
 \

	)

43 
_EFI_MM_COMMUNICATION_PROTOCOL
 
	tEFI_MM_COMMUNICATION_PROTOCOL
;

69 
	gEFI_STATUS


70 (
	tEFIAPI
 *
	tEFI_MM_COMMUNICATE
)(

71 
	tIN
 
	tCONST
 
	tEFI_MM_COMMUNICATION_PROTOCOL
 *
	tThis
,

72 
	tIN
 
	tOUT
 
	tVOID
 *
	tCommBuf„r
,

73 
	tIN
 
	tOUT
 
	tUINTN
 *
	tCommSize
 
	tOPTIONAL


80 
	s_EFI_MM_COMMUNICATION_PROTOCOL
 {

81 
EFI_MM_COMMUNICATE
 
	mCommuniˇã
;

84 
EFI_GUID
 
gEfiMmCommuniˇti⁄PrŸocﬁGuid
;

	@MmCommunication2.h

13 #i‚de‡
_MM_COMMUNICATION2_H_


14 
	#_MM_COMMUNICATION2_H_


	)

16 
	~<PrŸocﬁ/MmCommuniˇti⁄.h
>

18 
	#EFI_MM_COMMUNICATION2_PROTOCOL_GUID
 \

	)

23 
_EFI_MM_COMMUNICATION2_PROTOCOL
 
	tEFI_MM_COMMUNICATION2_PROTOCOL
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_MM_COMMUNICATE2
)(

52 
	tIN
 
	tCONST
 
	tEFI_MM_COMMUNICATION2_PROTOCOL
 *
	tThis
,

53 
	tIN
 
	tOUT
 
	tVOID
 *
	tCommBuf„rPhysiˇl
,

54 
	tIN
 
	tOUT
 
	tVOID
 *
	tCommBuf„rVútuÆ
,

55 
	tIN
 
	tOUT
 
	tUINTN
 *
	tCommSize
 
	tOPTIONAL


62 
	s_EFI_MM_COMMUNICATION2_PROTOCOL
 {

63 
EFI_MM_COMMUNICATE2
 
	mCommuniˇã
;

66 
EFI_GUID
 
gEfiMmCommuniˇti⁄2PrŸocﬁGuid
;

	@MmConfiguration.h

14 #i‚de‡
_MM_CONFIGURATION_H_


15 
	#_MM_CONFIGURATION_H_


	)

17 
	~<Pi/PiMmCis.h
>

19 
	#EFI_MM_CONFIGURATION_PROTOCOL_GUID
 \

	)

27 
	s_EFI_MM_RESERVED_MMRAM_REGION
 {

32 
EFI_PHYSICAL_ADDRESS
 
	mMmømRe£rvedSèπ
;

37 
UINT64
 
	mMmømRe£rvedSize
;

38 } 
	tEFI_MM_RESERVED_MMRAM_REGION
;

40 
_EFI_MM_CONFIGURATION_PROTOCOL
 
	tEFI_MM_CONFIGURATION_PROTOCOL
;

55 
	gEFI_STATUS


56 (
	tEFIAPI
 *
	tEFI_MM_REGISTER_MM_ENTRY
)(

57 
	tIN
 
	tCONST
 
	tEFI_MM_CONFIGURATION_PROTOCOL
 *
	tThis
,

58 
	tIN
 
	tEFI_MM_ENTRY_POINT
 
	tMmE¡ryPoöt


69 
	s_EFI_MM_CONFIGURATION_PROTOCOL
 {

73 
EFI_MM_RESERVED_MMRAM_REGION
 *
	mMmømRe£rvedRegi⁄s
;

74 
EFI_MM_REGISTER_MM_ENTRY
 
	mRegi°îMmE¡ry
;

77 
EFI_GUID
 
gEfiMmC⁄figuøti⁄PrŸocﬁGuid
;

	@MmControl.h

19 #i‚de‡
_MM_CONTROL_H_


20 
	#_MM_CONTROL_H_


	)

22 
	~<PiDxe.h
>

24 
	#EFI_MM_CONTROL_PROTOCOL_GUID
 \

	)

29 
_EFI_MM_CONTROL_PROTOCOL
 
	tEFI_MM_CONTROL_PROTOCOL
;

30 
UINTN
 
	tEFI_MM_PERIOD
;

51 
	gEFI_STATUS


52 (
	tEFIAPI
 *
	tEFI_MM_ACTIVATE
)(

53 
	tIN
 
	tCONST
 
	tEFI_MM_CONTROL_PROTOCOL
 *
	tThis
,

54 
	tIN
 
	tOUT
 
	tUINT8
 *
	tComm™dP‹t
 
	tOPTIONAL
,

55 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aP‹t
 
	tOPTIONAL
,

56 
	tIN
 
	tBOOLEAN
 
	tPîiodic
 
	tOPTIONAL
,

57 
	tIN
 
	tUINTN
 
	tA˘iv©i⁄I¡îvÆ
 
	tOPTIONAL


73 
	gEFI_STATUS


74 (
	tEFIAPI
 *
	tEFI_MM_DEACTIVATE
)(

75 
	tIN
 
	tCONST
 
	tEFI_MM_CONTROL_PROTOCOL
 *
	tThis
,

76 
	tIN
 
	tBOOLEAN
 
	tPîiodic
 
	tOPTIONAL


85 
	s_EFI_MM_CONTROL_PROTOCOL
 {

86 
EFI_MM_ACTIVATE
 
	mTriggî
;

87 
EFI_MM_DEACTIVATE
 
	mCÀ¨
;

94 
EFI_MM_PERIOD
 
	mMöimumTriggîPîiod
;

97 
EFI_GUID
 
gEfiMmC⁄åﬁPrŸocﬁGuid
;

	@MmCpu.h

14 #i‚de‡
_MM_CPU_H_


15 
	#_MM_CPU_H_


	)

17 
	#EFI_MM_CPU_PROTOCOL_GUID
 \

	)

29 
	mEFI_MM_SAVE_STATE_REGISTER_GDTBASE
 = 4,

30 
	mEFI_MM_SAVE_STATE_REGISTER_IDTBASE
 = 5,

31 
	mEFI_MM_SAVE_STATE_REGISTER_LDTBASE
 = 6,

32 
	mEFI_MM_SAVE_STATE_REGISTER_GDTLIMIT
 = 7,

33 
	mEFI_MM_SAVE_STATE_REGISTER_IDTLIMIT
 = 8,

34 
	mEFI_MM_SAVE_STATE_REGISTER_LDTLIMIT
 = 9,

35 
	mEFI_MM_SAVE_STATE_REGISTER_LDTINFO
 = 10,

36 
	mEFI_MM_SAVE_STATE_REGISTER_ES
 = 20,

37 
	mEFI_MM_SAVE_STATE_REGISTER_CS
 = 21,

38 
	mEFI_MM_SAVE_STATE_REGISTER_SS
 = 22,

39 
	mEFI_MM_SAVE_STATE_REGISTER_DS
 = 23,

40 
	mEFI_MM_SAVE_STATE_REGISTER_FS
 = 24,

41 
	mEFI_MM_SAVE_STATE_REGISTER_GS
 = 25,

42 
	mEFI_MM_SAVE_STATE_REGISTER_LDTR_SEL
 = 26,

43 
	mEFI_MM_SAVE_STATE_REGISTER_TR_SEL
 = 27,

44 
	mEFI_MM_SAVE_STATE_REGISTER_DR7
 = 28,

45 
	mEFI_MM_SAVE_STATE_REGISTER_DR6
 = 29,

46 
	mEFI_MM_SAVE_STATE_REGISTER_R8
 = 30,

47 
	mEFI_MM_SAVE_STATE_REGISTER_R9
 = 31,

48 
	mEFI_MM_SAVE_STATE_REGISTER_R10
 = 32,

49 
	mEFI_MM_SAVE_STATE_REGISTER_R11
 = 33,

50 
	mEFI_MM_SAVE_STATE_REGISTER_R12
 = 34,

51 
	mEFI_MM_SAVE_STATE_REGISTER_R13
 = 35,

52 
	mEFI_MM_SAVE_STATE_REGISTER_R14
 = 36,

53 
	mEFI_MM_SAVE_STATE_REGISTER_R15
 = 37,

54 
	mEFI_MM_SAVE_STATE_REGISTER_RAX
 = 38,

55 
	mEFI_MM_SAVE_STATE_REGISTER_RBX
 = 39,

56 
	mEFI_MM_SAVE_STATE_REGISTER_RCX
 = 40,

57 
	mEFI_MM_SAVE_STATE_REGISTER_RDX
 = 41,

58 
	mEFI_MM_SAVE_STATE_REGISTER_RSP
 = 42,

59 
	mEFI_MM_SAVE_STATE_REGISTER_RBP
 = 43,

60 
	mEFI_MM_SAVE_STATE_REGISTER_RSI
 = 44,

61 
	mEFI_MM_SAVE_STATE_REGISTER_RDI
 = 45,

62 
	mEFI_MM_SAVE_STATE_REGISTER_RIP
 = 46,

63 
	mEFI_MM_SAVE_STATE_REGISTER_RFLAGS
 = 51,

64 
	mEFI_MM_SAVE_STATE_REGISTER_CR0
 = 52,

65 
	mEFI_MM_SAVE_STATE_REGISTER_CR3
 = 53,

66 
	mEFI_MM_SAVE_STATE_REGISTER_CR4
 = 54,

67 
	mEFI_MM_SAVE_STATE_REGISTER_FCW
 = 256,

68 
	mEFI_MM_SAVE_STATE_REGISTER_FSW
 = 257,

69 
	mEFI_MM_SAVE_STATE_REGISTER_FTW
 = 258,

70 
	mEFI_MM_SAVE_STATE_REGISTER_OPCODE
 = 259,

71 
	mEFI_MM_SAVE_STATE_REGISTER_FP_EIP
 = 260,

72 
	mEFI_MM_SAVE_STATE_REGISTER_FP_CS
 = 261,

73 
	mEFI_MM_SAVE_STATE_REGISTER_DATAOFFSET
 = 262,

74 
	mEFI_MM_SAVE_STATE_REGISTER_FP_DS
 = 263,

75 
	mEFI_MM_SAVE_STATE_REGISTER_MM0
 = 264,

76 
	mEFI_MM_SAVE_STATE_REGISTER_MM1
 = 265,

77 
	mEFI_MM_SAVE_STATE_REGISTER_MM2
 = 266,

78 
	mEFI_MM_SAVE_STATE_REGISTER_MM3
 = 267,

79 
	mEFI_MM_SAVE_STATE_REGISTER_MM4
 = 268,

80 
	mEFI_MM_SAVE_STATE_REGISTER_MM5
 = 269,

81 
	mEFI_MM_SAVE_STATE_REGISTER_MM6
 = 270,

82 
	mEFI_MM_SAVE_STATE_REGISTER_MM7
 = 271,

83 
	mEFI_MM_SAVE_STATE_REGISTER_XMM0
 = 272,

84 
	mEFI_MM_SAVE_STATE_REGISTER_XMM1
 = 273,

85 
	mEFI_MM_SAVE_STATE_REGISTER_XMM2
 = 274,

86 
	mEFI_MM_SAVE_STATE_REGISTER_XMM3
 = 275,

87 
	mEFI_MM_SAVE_STATE_REGISTER_XMM4
 = 276,

88 
	mEFI_MM_SAVE_STATE_REGISTER_XMM5
 = 277,

89 
	mEFI_MM_SAVE_STATE_REGISTER_XMM6
 = 278,

90 
	mEFI_MM_SAVE_STATE_REGISTER_XMM7
 = 279,

91 
	mEFI_MM_SAVE_STATE_REGISTER_XMM8
 = 280,

92 
	mEFI_MM_SAVE_STATE_REGISTER_XMM9
 = 281,

93 
	mEFI_MM_SAVE_STATE_REGISTER_XMM10
 = 282,

94 
	mEFI_MM_SAVE_STATE_REGISTER_XMM11
 = 283,

95 
	mEFI_MM_SAVE_STATE_REGISTER_XMM12
 = 284,

96 
	mEFI_MM_SAVE_STATE_REGISTER_XMM13
 = 285,

97 
	mEFI_MM_SAVE_STATE_REGISTER_XMM14
 = 286,

98 
	mEFI_MM_SAVE_STATE_REGISTER_XMM15
 = 287,

102 
	mEFI_MM_SAVE_STATE_REGISTER_IO
 = 512,

103 
	mEFI_MM_SAVE_STATE_REGISTER_LMA
 = 513,

104 
	mEFI_MM_SAVE_STATE_REGISTER_PROCESSOR_ID
 = 514

105 } 
	tEFI_MM_SAVE_STATE_REGISTER
;

113 
	#EFI_MM_SAVE_STATE_REGISTER_LMA_32BIT
 32

	)

114 
	#EFI_MM_SAVE_STATE_REGISTER_LMA_64BIT
 64

	)

120 
	mEFI_MM_SAVE_STATE_IO_WIDTH_UINT8
 = 0,

121 
	mEFI_MM_SAVE_STATE_IO_WIDTH_UINT16
 = 1,

122 
	mEFI_MM_SAVE_STATE_IO_WIDTH_UINT32
 = 2,

123 
	mEFI_MM_SAVE_STATE_IO_WIDTH_UINT64
 = 3

124 } 
	tEFI_MM_SAVE_STATE_IO_WIDTH
;

130 
	mEFI_MM_SAVE_STATE_IO_TYPE_INPUT
 = 1,

131 
	mEFI_MM_SAVE_STATE_IO_TYPE_OUTPUT
 = 2,

132 
	mEFI_MM_SAVE_STATE_IO_TYPE_STRING
 = 4,

133 
	mEFI_MM_SAVE_STATE_IO_TYPE_REP_PREFIX
 = 8

134 } 
	tEFI_MM_SAVE_STATE_IO_TYPE
;

143 
	s_EFI_MM_SAVE_STATE_IO_INFO
 {

149 
UINT64
 
	mIoD©a
;

153 
UINT16
 
	mIoP‹t
;

157 
EFI_MM_SAVE_STATE_IO_WIDTH
 
	mIoWidth
;

161 
EFI_MM_SAVE_STATE_IO_TYPE
 
	mIoTy≥
;

162 } 
	tEFI_MM_SAVE_STATE_IO_INFO
;

164 
_EFI_MM_CPU_PROTOCOL
 
	tEFI_MM_CPU_PROTOCOL
;

186 
	gEFI_STATUS


187 (
	tEFIAPI
 *
	tEFI_MM_READ_SAVE_STATE
)(

188 
	tIN
 
	tCONST
 
	tEFI_MM_CPU_PROTOCOL
 *
	tThis
,

189 
	tIN
 
	tUINTN
 
	tWidth
,

190 
	tIN
 
	tEFI_MM_SAVE_STATE_REGISTER
 
	tRegi°î
,

191 
	tIN
 
	tUINTN
 
	tCpuIndex
,

192 
	tOUT
 
	tVOID
 *
	tBuf„r


216 
	gEFI_STATUS


217 (
	tEFIAPI
 *
	tEFI_MM_WRITE_SAVE_STATE
)(

218 
	tIN
 
	tCONST
 
	tEFI_MM_CPU_PROTOCOL
 *
	tThis
,

219 
	tIN
 
	tUINTN
 
	tWidth
,

220 
	tIN
 
	tEFI_MM_SAVE_STATE_REGISTER
 
	tRegi°î
,

221 
	tIN
 
	tUINTN
 
	tCpuIndex
,

222 
	tIN
 
	tCONST
 
	tVOID
 *
	tBuf„r


233 
	s_EFI_MM_CPU_PROTOCOL
 {

234 
EFI_MM_READ_SAVE_STATE
 
	mRódSaveSèã
;

235 
EFI_MM_WRITE_SAVE_STATE
 
	mWrôeSaveSèã
;

238 
EFI_GUID
 
gEfiMmCpuPrŸocﬁGuid
;

	@MmCpuIo.h

11 #i‚de‡
_MM_CPU_IO_H_


12 
	#_MM_CPU_IO_H_


	)

14 
	#EFI_MM_CPU_IO_PROTOCOL_GUID
 \

	)

19 
_EFI_MM_CPU_IO_PROTOCOL
 
	tEFI_MM_CPU_IO_PROTOCOL
;

25 
	mMM_IO_UINT8
 = 0,

26 
	mMM_IO_UINT16
 = 1,

27 
	mMM_IO_UINT32
 = 2,

28 
	mMM_IO_UINT64
 = 3

29 } 
	tEFI_MM_IO_WIDTH
;

54 
	gEFI_STATUS


55 (
	tEFIAPI
 *
	tEFI_MM_CPU_IO
)(

56 
	tIN
 
	tCONST
 
	tEFI_MM_CPU_IO_PROTOCOL
 *
	tThis
,

57 
	tIN
 
	tEFI_MM_IO_WIDTH
 
	tWidth
,

58 
	tIN
 
	tUINT64
 
	tAddªss
,

59 
	tIN
 
	tUINTN
 
	tCou¡
,

60 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


67 
EFI_MM_CPU_IO
 
	mRód
;

71 
EFI_MM_CPU_IO
 
	mWrôe
;

72 } 
	tEFI_MM_IO_ACCESS
;

77 
	s_EFI_MM_CPU_IO_PROTOCOL
 {

81 
EFI_MM_IO_ACCESS
 
	mMem
;

85 
EFI_MM_IO_ACCESS
 
	mIo
;

88 
EFI_GUID
 
gEfiMmCpuIoPrŸocﬁGuid
;

	@MmEndOfDxe.h

14 #i‚de‡
_MM_END_OF_DXE_H_


15 
	#_MM_END_OF_DXE_H_


	)

17 
	#EFI_MM_END_OF_DXE_PROTOCOL_GUID
 \

	)

22 
EFI_GUID
 
gEfiMmEndOfDxePrŸocﬁGuid
;

	@MmGpiDispatch.h

20 #i‚de‡
_MM_GPI_DISPATCH_H_


21 
	#_MM_GPI_DISPATCH_H_


	)

23 
	~<Pi/PiMmCis.h
>

25 
	#EFI_MM_GPI_DISPATCH_PROTOCOL_GUID
 \

	)

39 
UINT64
 
	mGpiNum
;

40 } 
	tEFI_MM_GPI_REGISTER_CONTEXT
;

42 
_EFI_MM_GPI_DISPATCH_PROTOCOL
 
	tEFI_MM_GPI_DISPATCH_PROTOCOL
;

74 
	gEFI_STATUS


75 (
	tEFIAPI
 *
	tEFI_MM_GPI_REGISTER
)(

76 
	tIN
 
	tCONST
 
	tEFI_MM_GPI_DISPATCH_PROTOCOL
 *
	tThis
,

77 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

78 
	tIN
 
	tCONST
 
	tEFI_MM_GPI_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

79 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


95 
	gEFI_STATUS


96 (
	tEFIAPI
 *
	tEFI_MM_GPI_UNREGISTER
)(

97 
	tIN
 
	tCONST
 
	tEFI_MM_GPI_DISPATCH_PROTOCOL
 *
	tThis
,

98 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


107 
	s_EFI_MM_GPI_DISPATCH_PROTOCOL
 {

108 
EFI_MM_GPI_REGISTER
 
	mRegi°î
;

109 
EFI_MM_GPI_UNREGISTER
 
	mUnRegi°î
;

113 
UINTN
 
	mNumSuµ‹ãdGpis
;

116 
EFI_GUID
 
gEfiMmGpiDi•©chPrŸocﬁGuid
;

	@MmIoTrapDispatch.h

15 #i‚de‡
_MM_IO_TRAP_DISPATCH_H_


16 
	#_MM_IO_TRAP_DISPATCH_H_


	)

18 
	~<Pi/PiMmCis.h
>

20 
	#EFI_MM_IO_TRAP_DISPATCH_PROTOCOL_GUID
 \

	)

29 
	mWrôeTøp
,

30 
	mRódTøp
,

31 
	mRódWrôeTøp
,

32 
	mIoTøpTy≥Maximum


33 } 
	tEFI_MM_IO_TRAP_DISPATCH_TYPE
;

40 
UINT16
 
	mAddªss
;

41 
UINT16
 
	mLígth
;

42 
EFI_MM_IO_TRAP_DISPATCH_TYPE
 
	mTy≥
;

43 } 
	tEFI_MM_IO_TRAP_REGISTER_CONTEXT
;

49 
UINT32
 
	mWrôeD©a
;

50 } 
	tEFI_MM_IO_TRAP_CONTEXT
;

52 
_EFI_MM_IO_TRAP_DISPATCH_PROTOCOL
 
	tEFI_MM_IO_TRAP_DISPATCH_PROTOCOL
;

90 
	gEFI_STATUS


91 (
	tEFIAPI
 *
	tEFI_MM_IO_TRAP_DISPATCH_REGISTER
)(

92 
	tIN
 
	tCONST
 
	tEFI_MM_IO_TRAP_DISPATCH_PROTOCOL
 *
	tThis
,

93 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

94 
	tIN
 
	tOUT
 
	tEFI_MM_IO_TRAP_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

95 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


111 
	gEFI_STATUS


112 (
	tEFIAPI
 *
	tEFI_MM_IO_TRAP_DISPATCH_UNREGISTER
)(

113 
	tIN
 
	tCONST
 
	tEFI_MM_IO_TRAP_DISPATCH_PROTOCOL
 *
	tThis
,

114 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


122 
	s_EFI_MM_IO_TRAP_DISPATCH_PROTOCOL
 {

123 
EFI_MM_IO_TRAP_DISPATCH_REGISTER
 
	mRegi°î
;

124 
EFI_MM_IO_TRAP_DISPATCH_UNREGISTER
 
	mUnRegi°î
;

127 
EFI_GUID
 
gEfiMmIoTøpDi•©chPrŸocﬁGuid
;

	@MmMp.h

16 #i‚de‡
_MM_MP_H_


17 
	#_MM_MP_H_


	)

19 
	~<Pi/PiMmCis.h
>

21 
	#EFI_MM_MP_PROTOCOL_GUID
 \

	)

29 
	#EFI_MM_MP_PROTOCOL_REVISION
 0x00

	)

34 
	#EFI_MM_MP_TIMEOUT_SUPPORTED
 0x01

	)

39 
VOID
* 
	tMM_COMPLETION
;

42 
MM_COMPLETION
 
	mCom∂ëi⁄
;

43 
EFI_STATUS
 
	mSètus
;

44 } 
	tMM_DISPATCH_COMPLETION_TOKEN
;

46 
_EFI_MM_MP_PROTOCOL
 
	tEFI_MM_MP_PROTOCOL
;

59 
	gEFI_STATUS


60 (
	tEFIAPI
 *
	tEFI_MM_GET_NUMBER_OF_PROCESSORS
) (

61 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

62 
	tOUT
 
	tUINTN
 *
	tNumbîOfPro˚ss‹s


126 
	gEFI_STATUS


127 (
	tEFIAPI
 *
	tEFI_MM_DISPATCH_PROCEDURE
) (

128 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

129 
	tIN
 
	tEFI_AP_PROCEDURE2
 
	tPro˚duª
,

130 
	tIN
 
	tUINTN
 
	tCpuNumbî
,

131 
	tIN
 
	tUINTN
 
	tTimeoutInMi¸o£c⁄ds
,

132 
	tIN
 
	tOUT
 
	tVOID
 *
	tPro˚duªArgumíts
 
	tOPTIONAL
,

133 
	tIN
 
	tOUT
 
	tMM_COMPLETION
 *
	tTokí
,

134 
	tIN
 
	tOUT
 
	tEFI_STATUS
 *
	tCPUSètus


204 
	gEFI_STATUS


205 (
	tEFIAPI
 *
	tEFI_MM_BROADCAST_PROCEDURE
) (

206 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

207 
	tIN
 
	tEFI_AP_PROCEDURE2
 
	tPro˚duª
,

208 
	tIN
 
	tUINTN
 
	tTimeoutInMi¸o£c⁄ds
,

209 
	tIN
 
	tOUT
 
	tVOID
 *
	tPro˚duªArgumíts
 
	tOPTIONAL
,

210 
	tIN
 
	tOUT
 
	tMM_COMPLETION
 *
	tTokí
,

211 
	tIN
 
	tOUT
 
	tEFI_STATUS
 *
	tCPUSètus


240 
	gEFI_STATUS


241 (
	tEFIAPI
 *
	tEFI_MM_SET_STARTUP_PROCEDURE
) (

242 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

243 
	tIN
 
	tEFI_AP_PROCEDURE
 
	tPro˚duª
,

244 
	tIN
 
	tOUT
 
	tVOID
 *
	tPro˚duªArgumíts
 
	tOPTIONAL


276 
	gEFI_STATUS


277 (
	tEFIAPI
 *
	tEFI_CHECK_FOR_PROCEDURE
) (

278 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

279 
	tIN
 
	tMM_COMPLETION
 
	tTokí


308 
	gEFI_STATUS


309 (
	tEFIAPI
 *
	tEFI_WAIT_FOR_PROCEDURE
) (

310 
	tIN
 
	tCONST
 
	tEFI_MM_MP_PROTOCOL
 *
	tThis
,

311 
	tIN
 
	tMM_COMPLETION
 
	tTokí


320 
	s_EFI_MM_MP_PROTOCOL
 {

321 
UINT32
 
	mRevisi⁄
;

322 
UINT32
 
	mAâribuãs
;

323 
EFI_MM_GET_NUMBER_OF_PROCESSORS
 
	mGëNumbîOfPro˚ss‹s
;

324 
EFI_MM_DISPATCH_PROCEDURE
 
	mDi•©chPro˚duª
;

325 
EFI_MM_BROADCAST_PROCEDURE
 
	mBrﬂdˇ°Pro˚duª
;

326 
EFI_MM_SET_STARTUP_PROCEDURE
 
	mSëSèπupPro˚duª
;

327 
EFI_CHECK_FOR_PROCEDURE
 
	mCheckF‹Pro˚duª
;

328 
EFI_WAIT_FOR_PROCEDURE
 
	mWaôF‹Pro˚duª
;

331 
EFI_GUID
 
gEfiMmMpPrŸocﬁGuid
;

	@MmPciRootBridgeIo.h

11 #i‚de‡
_MM_PCI_ROOT_BRIDGE_IO_H_


12 
	#_MM_PCI_ROOT_BRIDGE_IO_H_


	)

14 
	~<PrŸocﬁ/PciRoŸBridgeIo.h
>

16 
	#EFI_MM_PCI_ROOT_BRIDGE_IO_PROTOCOL_GUID
 \

	)

26 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 
	tEFI_MM_PCI_ROOT_BRIDGE_IO_PROTOCOL
;

28 
EFI_GUID
 
gEfiMmPciRoŸBridgeIoPrŸocﬁGuid
;

	@MmPeriodicTimerDispatch.h

15 #i‚de‡
_MM_PERIODIC_TIMER_DISPATCH_H_


16 
	#_MM_PERIODIC_TIMER_DISPATCH_H_


	)

18 
	~<Pi/PiMmCis.h
>

20 
	#EFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL_GUID
 \

	)

49 
UINT64
 
	mPîiod
;

55 
UINT64
 
	mMmiTickI¡îvÆ
;

56 } 
	tEFI_MM_PERIODIC_TIMER_REGISTER_CONTEXT
;

68 
UINT64
 
	mEœp£dTime
;

69 } 
	tEFI_MM_PERIODIC_TIMER_CONTEXT
;

71 
_EFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
 
	tEFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
;

101 
	gEFI_STATUS


102 (
	tEFIAPI
 *
	tEFI_MM_PERIODIC_TIMER_REGISTER
)(

103 
	tIN
 
	tCONST
 
	tEFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
 *
	tThis
,

104 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

105 
	tIN
 
	tCONST
 
	tEFI_MM_PERIODIC_TIMER_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

106 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


122 
	gEFI_STATUS


123 (
	tEFIAPI
 *
	tEFI_MM_PERIODIC_TIMER_UNREGISTER
)(

124 
	tIN
 
	tCONST
 
	tEFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
 *
	tThis
,

125 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


144 
	gEFI_STATUS


145 (
	tEFIAPI
 *
	tEFI_MM_PERIODIC_TIMER_INTERVAL
)(

146 
	tIN
 
	tCONST
 
	tEFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
 *
	tThis
,

147 
	tIN
 
	tOUT
 
	tUINT64
 **
	tMmiTickI¡îvÆ


155 
	s_EFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL
 {

156 
EFI_MM_PERIODIC_TIMER_REGISTER
 
	mRegi°î
;

157 
EFI_MM_PERIODIC_TIMER_UNREGISTER
 
	mUnRegi°î
;

158 
EFI_MM_PERIODIC_TIMER_INTERVAL
 
	mGëNextSh‹ãrI¡îvÆ
;

161 
EFI_GUID
 
gEfiMmPîiodicTimîDi•©chPrŸocﬁGuid
;

	@MmPowerButtonDispatch.h

15 #i‚de‡
_MM_POWER_BUTTON_DISPATCH_H_


16 
	#_MM_POWER_BUTTON_DISPATCH_H_


	)

18 
	~<Pi/PiMmCis.h
>

20 
	#EFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL_GUID
 \

	)

29 
	mEfiPowîBuâ⁄E¡ry
,

30 
	mEfiPowîBuâ⁄Exô
,

31 
	mEfiPowîBuâ⁄Max


32 } 
	tEFI_POWER_BUTTON_PHASE
;

41 
EFI_POWER_BUTTON_PHASE
 
	mPha£
;

42 } 
	tEFI_MM_POWER_BUTTON_REGISTER_CONTEXT
;

44 
_EFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
 
	tEFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
;

71 
	gEFI_STATUS


72 (
	tEFIAPI
 *
	tEFI_MM_POWER_BUTTON_REGISTER
)(

73 
	tIN
 
	tCONST
 
	tEFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
 *
	tThis
,

74 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

75 
	tIN
 
	tEFI_MM_POWER_BUTTON_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

76 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


92 
	gEFI_STATUS


93 (
	tEFIAPI
 *
	tEFI_MM_POWER_BUTTON_UNREGISTER
)(

94 
	tIN
 
	tCONST
 
	tEFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
 *
	tThis
,

95 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


103 
	s_EFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
 {

104 
EFI_MM_POWER_BUTTON_REGISTER
 
	mRegi°î
;

105 
EFI_MM_POWER_BUTTON_UNREGISTER
 
	mUnRegi°î
;

108 
EFI_GUID
 
gEfiMmPowîBuâ⁄Di•©chPrŸocﬁGuid
;

	@MmReadyToLock.h

16 #i‚de‡
_MM_READY_TO_LOCK_H_


17 
	#_MM_READY_TO_LOCK_H_


	)

19 
	#EFI_MM_READY_TO_LOCK_PROTOCOL_GUID
 \

	)

24 
EFI_GUID
 
gEfiMmRódyToLockPrŸocﬁGuid
;

	@MmReportStatusCodeHandler.h

12 #i‚de‡
__MM_REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


13 
	#__MM_REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


	)

15 
	#EFI_MM_RSC_HANDLER_PROTOCOL_GUID
 \

	)

21 
	gEFI_STATUS


22 (
	tEFIAPI
 *
	tEFI_MM_RSC_HANDLER_CALLBACK
)(

23 
	tIN
 
	tEFI_STATUS_CODE_TYPE
 
	tCodeTy≥
,

24 
	tIN
 
	tEFI_STATUS_CODE_VALUE
 
	tVÆue
,

25 
	tIN
 
	tUINT32
 
	tIn°™˚
,

26 
	tIN
 
	tEFI_GUID
 *
	tCÆÀrId
,

27 
	tIN
 
	tEFI_STATUS_CODE_DATA
 *
	tD©a


46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_MM_RSC_HANDLER_REGISTER
)(

48 
	tIN
 
	tEFI_MM_RSC_HANDLER_CALLBACK
 
	tCÆlback


66 
	gEFI_STATUS


67 (
	tEFIAPI
 *
	tEFI_MM_RSC_HANDLER_UNREGISTER
)(

68 
	tIN
 
	tEFI_MM_RSC_HANDLER_CALLBACK
 
	tCÆlback


71 
	s_EFI_MM_RSC_HANDLER_PROTOCOL
 {

72 
EFI_MM_RSC_HANDLER_REGISTER
 
	mRegi°î
;

73 
EFI_MM_RSC_HANDLER_UNREGISTER
 
	mUƒegi°î
;

74 } 
	tEFI_MM_RSC_HANDLER_PROTOCOL
;

76 
EFI_GUID
 
gEfiMmRscH™dÀrPrŸocﬁGuid
;

	@MmStandbyButtonDispatch.h

15 #i‚de‡
_MM_STANDBY_BUTTON_DISPATCH_H_


16 
	#_MM_STANDBY_BUTTON_DISPATCH_H_


	)

18 
	~<Pi/PiMmCis.h
>

20 
	#EFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL_GUID
 \

	)

29 
	mEfiSèndbyBuâ⁄E¡ry
,

30 
	mEfiSèndbyBuâ⁄Exô
,

31 
	mEfiSèndbyBuâ⁄Max


32 } 
	tEFI_STANDBY_BUTTON_PHASE
;

42 
EFI_STANDBY_BUTTON_PHASE
 
	mPha£
;

43 } 
	tEFI_MM_STANDBY_BUTTON_REGISTER_CONTEXT
;

45 
_EFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
 
	tEFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
;

72 
	gEFI_STATUS


73 (
	tEFIAPI
 *
	tEFI_MM_STANDBY_BUTTON_REGISTER
)(

74 
	tIN
 
	tCONST
 
	tEFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
 *
	tThis
,

75 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

76 
	tIN
 
	tEFI_MM_STANDBY_BUTTON_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

77 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


93 
	gEFI_STATUS


94 (
	tEFIAPI
 *
	tEFI_MM_STANDBY_BUTTON_UNREGISTER
)(

95 
	tIN
 
	tCONST
 
	tEFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
 *
	tThis
,

96 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


105 
	s_EFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
 {

106 
EFI_MM_STANDBY_BUTTON_REGISTER
 
	mRegi°î
;

107 
EFI_MM_STANDBY_BUTTON_UNREGISTER
 
	mUnRegi°î
;

110 
EFI_GUID
 
gEfiMmSèndbyBuâ⁄Di•©chPrŸocﬁGuid
;

	@MmStatusCode.h

11 #i‚de‡
_MM_STATUS_CODE_H__


12 
	#_MM_STATUS_CODE_H__


	)

15 
	#EFI_MM_STATUS_CODE_PROTOCOL_GUID
 \

	)

20 
_EFI_MM_STATUS_CODE_PROTOCOL
 
	tEFI_MM_STATUS_CODE_PROTOCOL
;

42 
	gEFI_STATUS


43 (
	tEFIAPI
 *
	tEFI_MM_REPORT_STATUS_CODE
)(

44 
	tIN
 
	tCONST
 
	tEFI_MM_STATUS_CODE_PROTOCOL
 *
	tThis
,

45 
	tIN
 
	tEFI_STATUS_CODE_TYPE
 
	tCodeTy≥
,

46 
	tIN
 
	tEFI_STATUS_CODE_VALUE
 
	tVÆue
,

47 
	tIN
 
	tUINT32
 
	tIn°™˚
,

48 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tCÆÀrId
,

49 
	tIN
 
	tEFI_STATUS_CODE_DATA
 *
	tD©a
 
	tOPTIONAL


52 
	s_EFI_MM_STATUS_CODE_PROTOCOL
 {

53 
EFI_MM_REPORT_STATUS_CODE
 
	mRï‹tSètusCode
;

56 
EFI_GUID
 
gEfiMmSètusCodePrŸocﬁGuid
;

	@MmSwDispatch.h

12 #i‚de‡
_MM_SW_DISPATCH_H_


13 
	#_MM_SW_DISPATCH_H_


	)

15 
	~<Pi/PiMmCis.h
>

17 
	#EFI_MM_SW_DISPATCH_PROTOCOL_GUID
 \

	)

28 
UINTN
 
	mSwMmiI≈utVÆue
;

29 } 
	tEFI_MM_SW_REGISTER_CONTEXT
;

41 
UINTN
 
	mSwMmiCpuIndex
;

45 
UINT8
 
	mComm™dP‹t
;

49 
UINT8
 
	mD©aP‹t
;

50 } 
	tEFI_MM_SW_CONTEXT
;

52 
_EFI_MM_SW_DISPATCH_PROTOCOL
 
	tEFI_MM_SW_DISPATCH_PROTOCOL
;

84 
	gEFI_STATUS


85 (
	tEFIAPI
 *
	tEFI_MM_SW_REGISTER
)(

86 
	tIN
 
	tCONST
 
	tEFI_MM_SW_DISPATCH_PROTOCOL
 *
	tThis
,

87 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

88 
	tIN
 
	tOUT
 
	tEFI_MM_SW_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

89 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


105 
	gEFI_STATUS


106 (
	tEFIAPI
 *
	tEFI_MM_SW_UNREGISTER
)(

107 
	tIN
 
	tCONST
 
	tEFI_MM_SW_DISPATCH_PROTOCOL
 *
	tThis
,

108 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


118 
	s_EFI_MM_SW_DISPATCH_PROTOCOL
 {

119 
EFI_MM_SW_REGISTER
 
	mRegi°î
;

120 
EFI_MM_SW_UNREGISTER
 
	mUnRegi°î
;

125 
UINTN
 
	mMaximumSwiVÆue
;

128 
EFI_GUID
 
gEfiMmSwDi•©chPrŸocﬁGuid
;

	@MmSxDispatch.h

12 #i‚de‡
_MM_SX_DISPATCH_H_


13 
	#_MM_SX_DISPATCH_H_


	)

15 
	~<Pi/PiMmCis.h
>

17 
	#EFI_MM_SX_DISPATCH_PROTOCOL_GUID
 \

	)

26 
	mSxS0
,

27 
	mSxS1
,

28 
	mSxS2
,

29 
	mSxS3
,

30 
	mSxS4
,

31 
	mSxS5
,

32 
	mEfiMaximumSÀïTy≥


33 } 
	tEFI_SLEEP_TYPE
;

39 
	mSxE¡ry
,

40 
	mSxExô
,

41 
	mEfiMaximumPha£


42 } 
	tEFI_SLEEP_PHASE
;

48 
EFI_SLEEP_TYPE
 
	mTy≥
;

49 
EFI_SLEEP_PHASE
 
	mPha£
;

50 } 
	tEFI_MM_SX_REGISTER_CONTEXT
;

52 
_EFI_MM_SX_DISPATCH_PROTOCOL
 
	tEFI_MM_SX_DISPATCH_PROTOCOL
;

89 
	gEFI_STATUS


90 (
	tEFIAPI
 *
	tEFI_MM_SX_REGISTER
)(

91 
	tIN
 
	tCONST
 
	tEFI_MM_SX_DISPATCH_PROTOCOL
 *
	tThis
,

92 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

93 
	tIN
 
	tCONST
 
	tEFI_MM_SX_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

94 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


110 
	gEFI_STATUS


111 (
	tEFIAPI
 *
	tEFI_MM_SX_UNREGISTER
)(

112 
	tIN
 
	tCONST
 
	tEFI_MM_SX_DISPATCH_PROTOCOL
 *
	tThis
,

113 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


122 
	s_EFI_MM_SX_DISPATCH_PROTOCOL
 {

123 
EFI_MM_SX_REGISTER
 
	mRegi°î
;

124 
EFI_MM_SX_UNREGISTER
 
	mUnRegi°î
;

127 
EFI_GUID
 
gEfiMmSxDi•©chPrŸocﬁGuid
;

	@MmUsbDispatch.h

15 #i‚de‡
_MM_USB_DISPATCH_H_


16 
	#_MM_USB_DISPATCH_H_


	)

18 
	~<Pi/PiMmCis.h
>

20 
	#EFI_MM_USB_DISPATCH_PROTOCOL_GUID
 \

	)

29 
	mUsbLegacy
,

30 
	mUsbWake


31 } 
	tEFI_USB_MMI_TYPE
;

42 
EFI_USB_MMI_TYPE
 
	mTy≥
;

49 
EFI_DEVICE_PATH_PROTOCOL
 *
	mDevi˚
;

50 } 
	tEFI_MM_USB_REGISTER_CONTEXT
;

52 
_EFI_MM_USB_DISPATCH_PROTOCOL
 
	tEFI_MM_USB_DISPATCH_PROTOCOL
;

81 
	gEFI_STATUS


82 (
	tEFIAPI
 *
	tEFI_MM_USB_REGISTER
)(

83 
	tIN
 
	tCONST
 
	tEFI_MM_USB_DISPATCH_PROTOCOL
 *
	tThis
,

84 
	tIN
 
	tEFI_MM_HANDLER_ENTRY_POINT
 
	tDi•©chFun˘i⁄
,

85 
	tIN
 
	tCONST
 
	tEFI_MM_USB_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

86 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


105 
	gEFI_STATUS


106 (
	tEFIAPI
 *
	tEFI_MM_USB_UNREGISTER
)(

107 
	tIN
 
	tCONST
 
	tEFI_MM_USB_DISPATCH_PROTOCOL
 *
	tThis
,

108 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


116 
	s_EFI_MM_USB_DISPATCH_PROTOCOL
 {

117 
EFI_MM_USB_REGISTER
 
	mRegi°î
;

118 
EFI_MM_USB_UNREGISTER
 
	mUnRegi°î
;

121 
EFI_GUID
 
gEfiMmUsbDi•©chPrŸocﬁGuid
;

	@MonotonicCounter.h

11 #i‚de‡
__ARCH_PROTOCOL_MONTONIC_COUNTER_H__


12 
	#__ARCH_PROTOCOL_MONTONIC_COUNTER_H__


	)

17 
	#EFI_MONOTONIC_COUNTER_ARCH_PROTOCOL_GUID
 \

	)

20 
EFI_GUID
 
gEfiM⁄Ÿ⁄icCou¡îArchPrŸocﬁGuid
;

	@MpService.h

39 #i‚de‡
_MP_SERVICE_PROTOCOL_H_


40 
	#_MP_SERVICE_PROTOCOL_H_


	)

45 
	#EFI_MP_SERVICES_PROTOCOL_GUID
 \

	)

53 
	#CPU_V2_EXTENDED_TOPOLOGY
 
BIT24


	)

58 
_EFI_MP_SERVICES_PROTOCOL
 
	tEFI_MP_SERVICES_PROTOCOL
;

63 
	#END_OF_CPU_LIST
 0xffffffff

	)

70 
	#PROCESSOR_AS_BSP_BIT
 0x00000001

	)

77 
	#PROCESSOR_ENABLED_BIT
 0x00000002

	)

84 
	#PROCESSOR_HEALTH_STATUS_BIT
 0x00000004

	)

93 
UINT32
 
	mPackage
;

97 
UINT32
 
	mC‹e
;

101 
UINT32
 
	mThªad
;

102 } 
	tEFI_CPU_PHYSICAL_LOCATION
;

111 
UINT32
 
	mPackage
;

115 
UINT32
 
	mModuÀ
;

119 
UINT32
 
	mTûe
;

123 
UINT32
 
	mDõ
;

127 
UINT32
 
	mC‹e
;

131 
UINT32
 
	mThªad
;

132 } 
	tEFI_CPU_PHYSICAL_LOCATION2
;

141 
EFI_CPU_PHYSICAL_LOCATION2
 
	mLoˇti⁄2
;

142 } 
	tEXTENDED_PROCESSOR_INFORMATION
;

155 
UINT64
 
	mPro˚ss‹Id
;

174 
UINT32
 
	mSètusFœg
;

180 
EFI_CPU_PHYSICAL_LOCATION
 
	mLoˇti⁄
;

184 
EXTENDED_PROCESSOR_INFORMATION
 
	mExãndedInf‹m©i⁄
;

185 } 
	tEFI_PROCESSOR_INFORMATION
;

224 
	gEFI_STATUS


225 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS
)(

226 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

227 
	tOUT
 
	tUINTN
 *
	tNumbîOfPro˚ss‹s
,

228 
	tOUT
 
	tUINTN
 *
	tNumbîOfE«bÀdPro˚ss‹s


258 
	gEFI_STATUS


259 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_GET_PROCESSOR_INFO
)(

260 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

261 
	tIN
 
	tUINTN
 
	tPro˚ss‹Numbî
,

262 
	tOUT
 
	tEFI_PROCESSOR_INFORMATION
 *
	tPro˚ss‹InfoBuf„r


402 
	gEFI_STATUS


403 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_STARTUP_ALL_APS
)(

404 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

405 
	tIN
 
	tEFI_AP_PROCEDURE
 
	tPro˚duª
,

406 
	tIN
 
	tBOOLEAN
 
	tSögÀThªad
,

407 
	tIN
 
	tEFI_EVENT
 
	tWaôEvít
 
	tOPTIONAL
,

408 
	tIN
 
	tUINTN
 
	tTimeoutInMi¸oSec⁄ds
,

409 
	tIN
 
	tVOID
 *
	tPro˚duªArgumít
 
	tOPTIONAL
,

410 
	tOUT
 
	tUINTN
 **
	tFaûedCpuLi°
 
	tOPTIONAL


500 
	gEFI_STATUS


501 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_STARTUP_THIS_AP
)(

502 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

503 
	tIN
 
	tEFI_AP_PROCEDURE
 
	tPro˚duª
,

504 
	tIN
 
	tUINTN
 
	tPro˚ss‹Numbî
,

505 
	tIN
 
	tEFI_EVENT
 
	tWaôEvít
 
	tOPTIONAL
,

506 
	tIN
 
	tUINTN
 
	tTimeoutInMi¸o£c⁄ds
,

507 
	tIN
 
	tVOID
 *
	tPro˚duªArgumít
 
	tOPTIONAL
,

508 
	tOUT
 
	tBOOLEAN
 *
	tFöished
 
	tOPTIONAL


547 
	gEFI_STATUS


548 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_SWITCH_BSP
)(

549 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

550 
	tIN
 
	tUINTN
 
	tPro˚ss‹Numbî
,

551 
	tIN
 
	tBOOLEAN
 
	tE«bÀOldBSP


596 
	gEFI_STATUS


597 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_ENABLEDISABLEAP
)(

598 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

599 
	tIN
 
	tUINTN
 
	tPro˚ss‹Numbî
,

600 
	tIN
 
	tBOOLEAN
 
	tE«bÀAP
,

601 
	tIN
 
	tUINT32
 *
	tHó…hFœg
 
	tOPTIONAL


629 
	gEFI_STATUS


630 (
	tEFIAPI
 *
	tEFI_MP_SERVICES_WHOAMI
)(

631 
	tIN
 
	tEFI_MP_SERVICES_PROTOCOL
 *
	tThis
,

632 
	tOUT
 
	tUINTN
 *
	tPro˚ss‹Numbî


664 
	s_EFI_MP_SERVICES_PROTOCOL
 {

665 
EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS
 
	mGëNumbîOfPro˚ss‹s
;

666 
EFI_MP_SERVICES_GET_PROCESSOR_INFO
 
	mGëPro˚ss‹Info
;

667 
EFI_MP_SERVICES_STARTUP_ALL_APS
 
	mSèπupAŒAPs
;

668 
EFI_MP_SERVICES_STARTUP_THIS_AP
 
	mSèπupThisAP
;

669 
EFI_MP_SERVICES_SWITCH_BSP
 
	mSwôchBSP
;

670 
EFI_MP_SERVICES_ENABLEDISABLEAP
 
	mE«bÀDißbÀAP
;

671 
EFI_MP_SERVICES_WHOAMI
 
	mWhoAmI
;

674 
EFI_GUID
 
gEfiMpSîvi˚PrŸocﬁGuid
;

	@Mtftp4.h

12 #i‚de‡
__EFI_MTFTP4_PROTOCOL_H__


13 
	#__EFI_MTFTP4_PROTOCOL_H__


	)

15 
	#EFI_MTFTP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

20 
	#EFI_MTFTP4_PROTOCOL_GUID
 \

	)

25 
_EFI_MTFTP4_PROTOCOL
 
	tEFI_MTFTP4_PROTOCOL
;

26 
_EFI_MTFTP4_TOKEN
 
	tEFI_MTFTP4_TOKEN
;

31 
	#EFI_MTFTP4_OPCODE_RRQ
 1

	)

32 
	#EFI_MTFTP4_OPCODE_WRQ
 2

	)

33 
	#EFI_MTFTP4_OPCODE_DATA
 3

	)

34 
	#EFI_MTFTP4_OPCODE_ACK
 4

	)

35 
	#EFI_MTFTP4_OPCODE_ERROR
 5

	)

36 
	#EFI_MTFTP4_OPCODE_OACK
 6

	)

37 
	#EFI_MTFTP4_OPCODE_DIR
 7

	)

38 
	#EFI_MTFTP4_OPCODE_DATA8
 8

	)

39 
	#EFI_MTFTP4_OPCODE_ACK8
 9

	)

44 
	#EFI_MTFTP4_ERRORCODE_NOT_DEFINED
 0

	)

45 
	#EFI_MTFTP4_ERRORCODE_FILE_NOT_FOUND
 1

	)

46 
	#EFI_MTFTP4_ERRORCODE_ACCESS_VIOLATION
 2

	)

47 
	#EFI_MTFTP4_ERRORCODE_DISK_FULL
 3

	)

48 
	#EFI_MTFTP4_ERRORCODE_ILLEGAL_OPERATION
 4

	)

49 
	#EFI_MTFTP4_ERRORCODE_UNKNOWN_TRANSFER_ID
 5

	)

50 
	#EFI_MTFTP4_ERRORCODE_FILE_ALREADY_EXISTS
 6

	)

51 
	#EFI_MTFTP4_ERRORCODE_NO_SUCH_USER
 7

	)

52 
	#EFI_MTFTP4_ERRORCODE_REQUEST_DENIED
 8

	)

57 #¥agm®
∑ck
(1)

60 
UINT16
 
	mOpCode
;

61 
UINT8
 
	mFûíame
[1];

62 } 
	tEFI_MTFTP4_REQ_HEADER
;

65 
UINT16
 
	mOpCode
;

66 
UINT8
 
	mD©a
[1];

67 } 
	tEFI_MTFTP4_OACK_HEADER
;

70 
UINT16
 
	mOpCode
;

71 
UINT16
 
	mBlock
;

72 
UINT8
 
	mD©a
[1];

73 } 
	tEFI_MTFTP4_DATA_HEADER
;

76 
UINT16
 
	mOpCode
;

77 
UINT16
 
	mBlock
[1];

78 } 
	tEFI_MTFTP4_ACK_HEADER
;

81 
UINT16
 
	mOpCode
;

82 
UINT64
 
	mBlock
;

83 
UINT8
 
	mD©a
[1];

84 } 
	tEFI_MTFTP4_DATA8_HEADER
;

87 
UINT16
 
	mOpCode
;

88 
UINT64
 
	mBlock
[1];

89 } 
	tEFI_MTFTP4_ACK8_HEADER
;

92 
UINT16
 
	mOpCode
;

93 
UINT16
 
	mEº‹Code
;

94 
UINT8
 
	mEº‹Mesßge
[1];

95 } 
	tEFI_MTFTP4_ERROR_HEADER
;

101 
UINT16
 
	mOpCode
;

105 
EFI_MTFTP4_REQ_HEADER
 
	mRrq
;

109 
EFI_MTFTP4_REQ_HEADER
 
	mWrq
;

113 
EFI_MTFTP4_OACK_HEADER
 
	mOack
;

117 
EFI_MTFTP4_DATA_HEADER
 
	mD©a
;

121 
EFI_MTFTP4_ACK_HEADER
 
	mAck
;

125 
EFI_MTFTP4_DATA8_HEADER
 
	mD©a8
;

129 
EFI_MTFTP4_ACK8_HEADER
 
	mAck8
;

133 
EFI_MTFTP4_ERROR_HEADER
 
	mEº‹
;

134 } 
	tEFI_MTFTP4_PACKET
;

136 #¥agm®
∑ck
()

142 
UINT8
 *
	mO±i⁄Så
;

143 
UINT8
 *
	mVÆueSå
;

144 } 
	tEFI_MTFTP4_OPTION
;

148 
BOOLEAN
 
	mU£DeÁu…Sëtög
;

149 
EFI_IPv4_ADDRESS
 
	mSèti⁄Ip
;

150 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

151 
UINT16
 
	mLoˇlP‹t
;

152 
EFI_IPv4_ADDRESS
 
	mG©ewayIp
;

153 
EFI_IPv4_ADDRESS
 
	mSîvîIp
;

154 
UINT16
 
	mInôülSîvîP‹t
;

155 
UINT16
 
	mTryCou¡
;

156 
UINT16
 
	mTimeoutVÆue
;

157 } 
	tEFI_MTFTP4_CONFIG_DATA
;

161 
EFI_MTFTP4_CONFIG_DATA
 
	mC⁄figD©a
;

162 
UINT8
 
	mSuµ‹ãdO±i⁄Cou¡
;

163 
UINT8
 **
	mSuµ‹ãdO±oös
;

164 
UINT8
 
	mUnsuµ‹ãdO±i⁄Cou¡
;

165 
UINT8
 **
	mUnsuµ‹ãdO±oös
;

166 } 
	tEFI_MTFTP4_MODE_DATA
;

170 
EFI_IPv4_ADDRESS
 
	mG©ewayIp
;

171 
EFI_IPv4_ADDRESS
 
	mSîvîIp
;

172 
UINT16
 
	mSîvîP‹t
;

173 
UINT16
 
	mTryCou¡
;

174 
UINT16
 
	mTimeoutVÆue
;

175 } 
	tEFI_MTFTP4_OVERRIDE_DATA
;

200 
	gEFI_STATUS


201 (
	tEFIAPI
 *
	tEFI_MTFTP4_CHECK_PACKET
)(

202 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

203 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí
,

204 
	tIN
 
	tUINT16
 
	tPackëLí
,

205 
	tIN
 
	tEFI_MTFTP4_PACKET
 *
	tPakë


223 
	gEFI_STATUS


224 (
	tEFIAPI
 *
	tEFI_MTFTP4_TIMEOUT_CALLBACK
)(

225 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

226 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí


245 
	gEFI_STATUS


246 (
	tEFIAPI
 *
	tEFI_MTFTP4_PACKET_NEEDED
)(

247 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

248 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí
,

249 
	tIN
 
	tOUT
 
	tUINT16
 *
	tLígth
,

250 
	tOUT
 
	tVOID
 **
	tBuf„r


266 
	gEFI_STATUS


267 (
	tEFIAPI
 *
	tEFI_MTFTP4_GET_MODE_DATA
)(

268 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

269 
	tOUT
 
	tEFI_MTFTP4_MODE_DATA
 *
	tModeD©a


296 
	gEFI_STATUS


297 (
	tEFIAPI
 *
	tEFI_MTFTP4_CONFIGURE
)(

298 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

299 
	tIN
 
	tEFI_MTFTP4_CONFIG_DATA
 *
	tMt·pC⁄figD©a
 
	tOPTIONAL


348 
	gEFI_STATUS


349 (
	tEFIAPI
 *
	tEFI_MTFTP4_GET_INFO
)(

350 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

351 
	tIN
 
	tEFI_MTFTP4_OVERRIDE_DATA
 *
	tOvîrideD©a
 
	tOPTIONAL
,

352 
	tIN
 
	tUINT8
 *
	tFûíame
,

353 
	tIN
 
	tUINT8
 *
	tModeSå
 
	tOPTIONAL
,

354 
	tIN
 
	tUINT8
 
	tO±i⁄Cou¡
,

355 
	tIN
 
	tEFI_MTFTP4_OPTION
 *
	tO±i⁄Li°
,

356 
	tOUT
 
	tUINT32
 *
	tPackëLígth
,

357 
	tOUT
 
	tEFI_MTFTP4_PACKET
 **
	tPackë
 
	tOPTIONAL


383 
	gEFI_STATUS


384 (
	tEFIAPI
 *
	tEFI_MTFTP4_PARSE_OPTIONS
)(

385 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

386 
	tIN
 
	tUINT32
 
	tPackëLí
,

387 
	tIN
 
	tEFI_MTFTP4_PACKET
 *
	tPackë
,

388 
	tOUT
 
	tUINT32
 *
	tO±i⁄Cou¡
,

389 
	tOUT
 
	tEFI_MTFTP4_OPTION
 **
	tO±i⁄Li°
 
	tOPTIONAL


417 
	gEFI_STATUS


418 (
	tEFIAPI
 *
	tEFI_MTFTP4_READ_FILE
)(

419 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

420 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí


447 
	gEFI_STATUS


448 (
	tEFIAPI
 *
	tEFI_MTFTP4_WRITE_FILE
)(

449 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

450 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí


477 
	gEFI_STATUS


478 (
	tEFIAPI
 *
	tEFI_MTFTP4_READ_DIRECTORY
)(

479 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis
,

480 
	tIN
 
	tEFI_MTFTP4_TOKEN
 *
	tTokí


499 
	gEFI_STATUS


500 (
	tEFIAPI
 *
	tEFI_MTFTP4_POLL
)(

501 
	tIN
 
	tEFI_MTFTP4_PROTOCOL
 *
	tThis


509 
	s_EFI_MTFTP4_PROTOCOL
 {

510 
EFI_MTFTP4_GET_MODE_DATA
 
	mGëModeD©a
;

511 
EFI_MTFTP4_CONFIGURE
 
	mC⁄figuª
;

512 
EFI_MTFTP4_GET_INFO
 
	mGëInfo
;

513 
EFI_MTFTP4_PARSE_OPTIONS
 
	mP¨£O±i⁄s
;

514 
EFI_MTFTP4_READ_FILE
 
	mRódFûe
;

515 
EFI_MTFTP4_WRITE_FILE
 
	mWrôeFûe
;

516 
EFI_MTFTP4_READ_DIRECTORY
 
	mRódDúe˘‹y
;

517 
EFI_MTFTP4_POLL
 
	mPﬁl
;

520 
	s_EFI_MTFTP4_TOKEN
 {

525 
EFI_STATUS
 
	mSètus
;

533 
EFI_EVENT
 
	mEvít
;

537 
EFI_MTFTP4_OVERRIDE_DATA
 *
	mOvîrideD©a
;

541 
UINT8
 *
	mFûíame
;

545 
UINT8
 *
	mModeSå
;

549 
UINT32
 
	mO±i⁄Cou¡
;

553 
EFI_MTFTP4_OPTION
 *
	mO±i⁄Li°
;

557 
UINT64
 
	mBuf„rSize
;

563 
VOID
 *
	mBuf„r
;

568 
VOID
 *
	mC⁄ãxt
;

572 
EFI_MTFTP4_CHECK_PACKET
 
	mCheckPackë
;

576 
EFI_MTFTP4_TIMEOUT_CALLBACK
 
	mTimeoutCÆlback
;

580 
EFI_MTFTP4_PACKET_NEEDED
 
	mPackëNìded
;

583 
EFI_GUID
 
gEfiMt·p4Sîvi˚BödögPrŸocﬁGuid
;

584 
EFI_GUID
 
gEfiMt·p4PrŸocﬁGuid
;

	@Mtftp6.h

16 #i‚de‡
__EFI_MTFTP6_PROTOCOL_H__


17 
	#__EFI_MTFTP6_PROTOCOL_H__


	)

20 
	#EFI_MTFTP6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

25 
	#EFI_MTFTP6_PROTOCOL_GUID
 \

	)

30 
_EFI_MTFTP6_PROTOCOL
 
	tEFI_MTFTP6_PROTOCOL
;

31 
_EFI_MTFTP6_TOKEN
 
	tEFI_MTFTP6_TOKEN
;

36 
	#EFI_MTFTP6_OPCODE_RRQ
 1

37 
	#EFI_MTFTP6_OPCODE_WRQ
 2

38 
	#EFI_MTFTP6_OPCODE_DATA
 3

39 
	#EFI_MTFTP6_OPCODE_ACK
 4

40 
	#EFI_MTFTP6_OPCODE_ERROR
 5

41 
	#EFI_MTFTP6_OPCODE_OACK
 6

42 
	#EFI_MTFTP6_OPCODE_DIR
 7

43 
	#EFI_MTFTP6_OPCODE_DATA8
 8

44 
	#EFI_MTFTP6_OPCODE_ACK8
 9

46 

	)

53 
	#EFI_MTFTP6_ERRORCODE_NOT_DEFINED
 0

	)

57 
	#EFI_MTFTP6_ERRORCODE_FILE_NOT_FOUND
 1

	)

61 
	#EFI_MTFTP6_ERRORCODE_ACCESS_VIOLATION
 2

	)

65 
	#EFI_MTFTP6_ERRORCODE_DISK_FULL
 3

	)

69 
	#EFI_MTFTP6_ERRORCODE_ILLEGAL_OPERATION
 4

	)

73 
	#EFI_MTFTP6_ERRORCODE_UNKNOWN_TRANSFER_ID
 5

	)

77 
	#EFI_MTFTP6_ERRORCODE_FILE_ALREADY_EXISTS
 6

	)

81 
	#EFI_MTFTP6_ERRORCODE_NO_SUCH_USER
 7

	)

85 
	#EFI_MTFTP6_ERRORCODE_REQUEST_DENIED
 8

	)

88 #¥agm®
∑ck
(1)

98 
UINT16
 
	mOpCode
;

102 
UINT8
 
	mFûíame
[1];

103 } 
	tEFI_MTFTP6_REQ_HEADER
;

112 
UINT16
 
	mOpCode
;

116 
UINT8
 
	mD©a
[1];

117 } 
	tEFI_MTFTP6_OACK_HEADER
;

126 
UINT16
 
	mOpCode
;

130 
UINT16
 
	mBlock
;

134 
UINT8
 
	mD©a
[1];

135 } 
	tEFI_MTFTP6_DATA_HEADER
;

144 
UINT16
 
	mOpCode
;

148 
UINT16
 
	mBlock
[1];

149 } 
	tEFI_MTFTP6_ACK_HEADER
;

158 
UINT16
 
	mOpCode
;

162 
UINT64
 
	mBlock
;

166 
UINT8
 
	mD©a
[1];

167 } 
	tEFI_MTFTP6_DATA8_HEADER
;

176 
UINT16
 
	mOpCode
;

180 
UINT64
 
	mBlock
[1];

181 } 
	tEFI_MTFTP6_ACK8_HEADER
;

190 
UINT16
 
	mOpCode
;

194 
UINT16
 
	mEº‹Code
;

198 
UINT8
 
	mEº‹Mesßge
[1];

199 } 
	tEFI_MTFTP6_ERROR_HEADER
;

205 
UINT16
 
	mOpCode
;

206 
EFI_MTFTP6_REQ_HEADER
 
	mRrq
;

207 
EFI_MTFTP6_REQ_HEADER
 
	mWrq
;

208 
EFI_MTFTP6_OACK_HEADER
 
	mOack
;

209 
EFI_MTFTP6_DATA_HEADER
 
	mD©a
;

210 
EFI_MTFTP6_ACK_HEADER
 
	mAck
;

211 
EFI_MTFTP6_DATA8_HEADER
 
	mD©a8
;

212 
EFI_MTFTP6_ACK8_HEADER
 
	mAck8
;

213 
EFI_MTFTP6_ERROR_HEADER
 
	mEº‹
;

214 } 
	tEFI_MTFTP6_PACKET
;

216 #¥agm®
∑ck
()

227 
EFI_IPv6_ADDRESS
 
	mSèti⁄Ip
;

231 
UINT16
 
	mLoˇlP‹t
;

235 
EFI_IPv6_ADDRESS
 
	mSîvîIp
;

240 
UINT16
 
	mInôülSîvîP‹t
;

244 
UINT16
 
	mTryCou¡
;

248 
UINT16
 
	mTimeoutVÆue
;

249 } 
	tEFI_MTFTP6_CONFIG_DATA
;

258 
EFI_MTFTP6_CONFIG_DATA
 
	mC⁄figD©a
;

262 
UINT8
 
	mSuµ‹ãdO±i⁄Cou¡
;

268 
UINT8
 **
	mSuµ‹ãdO±i⁄s
;

269 } 
	tEFI_MTFTP6_MODE_DATA
;

279 
EFI_IPv6_ADDRESS
 
	mSîvîIp
;

284 
UINT16
 
	mSîvîP‹t
;

290 
UINT16
 
	mTryCou¡
;

296 
UINT16
 
	mTimeoutVÆue
;

297 } 
	tEFI_MTFTP6_OVERRIDE_DATA
;

303 
UINT8
 *
	mO±i⁄Så
;

304 
UINT8
 *
	mVÆueSå
;

305 } 
	tEFI_MTFTP6_OPTION
;

327 
	gEFI_STATUS


328 (
	tEFIAPI
 *
	tEFI_MTFTP6_CHECK_PACKET
)(

329 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

330 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí
,

331 
	tIN
 
	tUINT16
 
	tPackëLí
,

332 
	tIN
 
	tEFI_MTFTP6_PACKET
 *
	tPackë


354 
	gEFI_STATUS


355 (
	tEFIAPI
 *
	tEFI_MTFTP6_TIMEOUT_CALLBACK
)(

356 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

357 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí


381 
	gEFI_STATUS


382 (
	tEFIAPI
 *
	tEFI_MTFTP6_PACKET_NEEDED
)(

383 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

384 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí
,

385 
	tIN
 
	tOUT
 
	tUINT16
 *
	tLígth
,

386 
	tOUT
 
	tVOID
 **
	tBuf„r


389 
	s_EFI_MTFTP6_TOKEN
 {

395 
EFI_STATUS
 
	mSètus
;

401 
EFI_EVENT
 
	mEvít
;

406 
EFI_MTFTP6_OVERRIDE_DATA
 *
	mOvîrideD©a
;

410 
UINT8
 *
	mFûíame
;

414 
UINT8
 *
	mModeSå
;

418 
UINT32
 
	mO±i⁄Cou¡
;

426 
EFI_MTFTP6_OPTION
 *
	mO±i⁄Li°
;

431 
UINT64
 
	mBuf„rSize
;

437 
VOID
 *
	mBuf„r
;

442 
VOID
 *
	mC⁄ãxt
;

447 
EFI_MTFTP6_CHECK_PACKET
 
	mCheckPackë
;

451 
EFI_MTFTP6_TIMEOUT_CALLBACK
 
	mTimeoutCÆlback
;

456 
EFI_MTFTP6_PACKET_NEEDED
 
	mPackëNìded
;

475 
	gEFI_STATUS


476 (
	tEFIAPI
 *
	tEFI_MTFTP6_GET_MODE_DATA
)(

477 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

478 
	tOUT
 
	tEFI_MTFTP6_MODE_DATA
 *
	tModeD©a


515 
	gEFI_STATUS


516 (
	tEFIAPI
 *
	tEFI_MTFTP6_CONFIGURE
)(

517 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

518 
	tIN
 
	tEFI_MTFTP6_CONFIG_DATA
 *
	tMt·pC⁄figD©a
 
	tOPTIONAL


570 
	gEFI_STATUS


571 (
	tEFIAPI
 *
	tEFI_MTFTP6_GET_INFO
)(

572 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

573 
	tIN
 
	tEFI_MTFTP6_OVERRIDE_DATA
 *
	tOvîrideD©a
 
	tOPTIONAL
,

574 
	tIN
 
	tUINT8
 *
	tFûíame
,

575 
	tIN
 
	tUINT8
 *
	tModeSå
 
	tOPTIONAL
,

576 
	tIN
 
	tUINT8
 
	tO±i⁄Cou¡
,

577 
	tIN
 
	tEFI_MTFTP6_OPTION
 *
	tO±i⁄Li°
 
	tOPTIONAL
,

578 
	tOUT
 
	tUINT32
 *
	tPackëLígth
,

579 
	tOUT
 
	tEFI_MTFTP6_PACKET
 **
	tPackë
 
	tOPTIONAL


613 
	gEFI_STATUS


614 (
	tEFIAPI
 *
	tEFI_MTFTP6_PARSE_OPTIONS
)(

615 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

616 
	tIN
 
	tUINT32
 
	tPackëLí
,

617 
	tIN
 
	tEFI_MTFTP6_PACKET
 *
	tPackë
,

618 
	tOUT
 
	tUINT32
 *
	tO±i⁄Cou¡
,

619 
	tOUT
 
	tEFI_MTFTP6_OPTION
 **
	tO±i⁄Li°
 
	tOPTIONAL


658 
	gEFI_STATUS


659 (
	tEFIAPI
 *
	tEFI_MTFTP6_READ_FILE
)(

660 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

661 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí


710 
	gEFI_STATUS


711 (
	tEFIAPI
 *
	tEFI_MTFTP6_WRITE_FILE
)(

712 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

713 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí


768 
	gEFI_STATUS


769 (
	tEFIAPI
 *
	tEFI_MTFTP6_READ_DIRECTORY
)(

770 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis
,

771 
	tIN
 
	tEFI_MTFTP6_TOKEN
 *
	tTokí


795 
	gEFI_STATUS


796 (
	tEFIAPI
 *
	tEFI_MTFTP6_POLL
)(

797 
	tIN
 
	tEFI_MTFTP6_PROTOCOL
 *
	tThis


805 
	s_EFI_MTFTP6_PROTOCOL
 {

806 
EFI_MTFTP6_GET_MODE_DATA
 
	mGëModeD©a
;

807 
EFI_MTFTP6_CONFIGURE
 
	mC⁄figuª
;

808 
EFI_MTFTP6_GET_INFO
 
	mGëInfo
;

809 
EFI_MTFTP6_PARSE_OPTIONS
 
	mP¨£O±i⁄s
;

810 
EFI_MTFTP6_READ_FILE
 
	mRódFûe
;

811 
EFI_MTFTP6_WRITE_FILE
 
	mWrôeFûe
;

812 
EFI_MTFTP6_READ_DIRECTORY
 
	mRódDúe˘‹y
;

813 
EFI_MTFTP6_POLL
 
	mPﬁl
;

816 
EFI_GUID
 
gEfiMt·p6Sîvi˚BödögPrŸocﬁGuid
;

817 
EFI_GUID
 
gEfiMt·p6PrŸocﬁGuid
;

	@NetworkInterfaceIdentifier.h

12 #i‚de‡
__EFI_NETWORK_INTERFACE_IDENTIFER_H__


13 
	#__EFI_NETWORK_INTERFACE_IDENTIFER_H__


	)

18 
	#EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_GUID
 \

	)

26 
	#EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_GUID_31
 \

	)

34 
	#EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_REVISION
 0x00020000

	)

40 
	#EFI_NETWORK_INTERFACE_IDENTIFIER_INTERFACE_REVISION
 
EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_REVISION


	)

45 
_EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL
 
	tEFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL
;

50 
EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL
 
	tEFI_NETWORK_INTERFACE_IDENTIFIER_INTERFACE
;

56 
	s_EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL
 {

57 
UINT64
 
	mRevisi⁄
;

58 
UINT64
 
	mId
;

61 
UINT64
 
	mImageAddr
;

63 
UINT32
 
	mImageSize
;

64 
CHAR8
 
	mSåögId
[4];

66 
UINT8
 
	mTy≥
;

68 
UINT8
 
	mMaj‹Vî
;

69 
UINT8
 
	mMö‹Vî
;

70 
BOOLEAN
 
	mIpv6Suµ‹ãd
;

71 
UINT16
 
	mIfNum
;

83 
	mEfiNëw‹kI¡îÁ˚Undi
 = 1

84 } 
	tEFI_NETWORK_INTERFACE_TYPE
;

89 
undic⁄fig_èbÀ
 
	tUNDI_CONFIG_TABLE
;

94 
	sundic⁄fig_èbÀ
 {

95 
UINT32
 
	mNumbîOfI¡îÁ˚s
;

97 
UINT32
 
	mª£rved
;

98 
UNDI_CONFIG_TABLE
 *
	m√xéök
;

104 
VOID
 *
	mNII_I¡îÁ˚Poöãr
;

105 
VOID
 *
	mDevi˚P©hPoöãr
;

106 } 
	mNII_íåy
[1];

109 
EFI_GUID
 
gEfiNëw‹kI¡îÁ˚IdítifõrPrŸocﬁGuid
;

110 
EFI_GUID
 
gEfiNëw‹kI¡îÁ˚IdítifõrPrŸocﬁGuid_31
;

	@NvdimmLabel.h

16 #i‚de‡
__EFI_NVDIMM_LABEL_PROTOCOL_H__


17 
	#__EFI_NVDIMM_LABEL_PROTOCOL_H__


	)

19 
	#EFI_NVDIMM_LABEL_PROTOCOL_GUID
 \

	)

24 
_EFI_NVDIMM_LABEL_PROTOCOL
 
	tEFI_NVDIMM_LABEL_PROTOCOL
;

26 
	#EFI_NVDIMM_LABEL_INDEX_SIG_LEN
 16

	)

27 
	#EFI_NVDIMM_LABEL_INDEX_ALIGN
 256

	)

32 
CHAR8
 
	mSig
[
EFI_NVDIMM_LABEL_INDEX_SIG_LEN
];

37 
UINT8
 
	mFœgs
[3];

43 
UINT8
 
	mLabñSize
;

48 
UINT32
 
	mSeq
;

53 
UINT64
 
	mMyOff
;

59 
UINT64
 
	mMySize
;

64 
UINT64
 
	mOthîOff
;

69 
UINT64
 
	mLabñOff
;

74 
UINT32
 
	mNSlŸ
;

79 
UINT16
 
	mMaj‹
;

84 
UINT16
 
	mMö‹
;

89 
UINT64
 
	mChecksum
;

98 
UINT8
 
	mFªe
[];

99 } 
	tEFI_NVDIMM_LABEL_INDEX_BLOCK
;

101 
	#EFI_NVDIMM_LABEL_NAME_LEN
 64

	)

106 
	#EFI_NVDIMM_LABEL_FLAGS_ROLABEL
 0x00000001

	)

112 
	#EFI_NVDIMM_LABEL_FLAGS_LOCAL
 0x00000002

	)

118 
	#EFI_NVDIMM_LABEL_FLAGS_RESERVED
 0x00000004

	)

123 
	#EFI_NVDIMM_LABEL_FLAGS_UPDATING
 0x00000008

	)

129 
EFI_GUID
 
	mUuid
;

134 
CHAR8
 
	mName
[
EFI_NVDIMM_LABEL_NAME_LEN
];

139 
UINT32
 
	mFœgs
;

144 
UINT16
 
	mNLabñ
;

149 
UINT16
 
	mPosôi⁄
;

156 
UINT64
 
	mSëCookõ
;

162 
UINT64
 
	mLbaSize
;

167 
UINT64
 
	mD∑
;

172 
UINT64
 
	mRawSize
;

177 
UINT32
 
	mSlŸ
;

182 
UINT8
 
	mAlignmít
;

187 
UINT8
 
	mRe£rved
[3];

192 
EFI_GUID
 
	mTy≥Guid
;

197 
EFI_GUID
 
	mAddªssAb°ø˘i⁄Guid
;

202 
UINT8
 
	mRe£rved1
[88];

208 
UINT64
 
	mChecksum
;

209 } 
	tEFI_NVDIMM_LABEL
;

215 
UINT64
 
	mRegi⁄Off£t
;

220 
UINT32
 
	mSîülNumbî
;

225 
UINT16
 
	mVíd‹Id
;

230 
UINT16
 
	mM™uÁ˘urögD©e
;

235 
UINT8
 
	mM™uÁ˘urögLoˇti⁄
;

240 
UINT8
 
	mRe£rved
[31];

241 } 
	tEFI_NVDIMM_LABEL_SET_COOKIE_MAP
;

247 
EFI_NVDIMM_LABEL_SET_COOKIE_MAP
 
	mM≠pög
[0];

248 } 
	tEFI_NVDIMM_LABEL_SET_COOKIE_INFO
;

264 
	gEFI_STATUS


265 (
	tEFIAPI
 *
	tEFI_NVDIMM_LABEL_STORAGE_INFORMATION
) (

266 
	tIN
 
	tEFI_NVDIMM_LABEL_PROTOCOL
 *
	tThis
,

267 
	tOUT
 
	tUINT32
 *
	tSizeOfLabñSt‹ageAªa
,

268 
	tOUT
 
	tUINT32
 *
	tMaxTøns„rLígth


295 
	gEFI_STATUS


296 (
	tEFIAPI
 *
	tEFI_NVDIMM_LABEL_STORAGE_READ
) (

297 
	tIN
 
	tCONST
 
	tEFI_NVDIMM_LABEL_PROTOCOL
 *
	tThis
,

298 
	tIN
 
	tUINT32
 
	tOff£t
,

299 
	tIN
 
	tUINT32
 
	tTøns„rLígth
,

300 
	tOUT
 
	tUINT8
 *
	tLabñD©a


326 
	gEFI_STATUS


327 (
	tEFIAPI
 *
	tEFI_NVDIMM_LABEL_STORAGE_WRITE
) (

328 
	tIN
 
	tCONST
 
	tEFI_NVDIMM_LABEL_PROTOCOL
 *
	tThis
,

329 
	tIN
 
	tUINT32
 
	tOff£t
,

330 
	tIN
 
	tUINT32
 
	tTøns„rLígth
,

331 
	tIN
 
	tUINT8
 *
	tLabñD©a


337 
	s_EFI_NVDIMM_LABEL_PROTOCOL
 {

338 
EFI_NVDIMM_LABEL_STORAGE_INFORMATION
 
	mLabñSt‹ageInf‹m©i⁄
;

339 
EFI_NVDIMM_LABEL_STORAGE_READ
 
	mLabñSt‹ageRód
;

340 
EFI_NVDIMM_LABEL_STORAGE_WRITE
 
	mLabñSt‹ageWrôe
;

343 
EFI_GUID
 
gEfiNvdimmLabñPrŸocﬁGuid
;

	@NvmExpressPassthru.h

14 #i‚de‡
_UEFI_NVM_EXPRESS_PASS_THRU_H_


15 
	#_UEFI_NVM_EXPRESS_PASS_THRU_H_


	)

17 
	#EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL_GUID
 \

	)

22 
_EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 
	tEFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
;

25 
UINT32
 
	mAâribuãs
;

26 
UINT32
 
	mIoAlign
;

27 
UINT32
 
	mNvmeVîsi⁄
;

28 } 
	tEFI_NVM_EXPRESS_PASS_THRU_MODE
;

34 
	#EFI_NVM_EXPRESS_PASS_THRU_ATTRIBUTES_PHYSICAL
 0x0001

	)

39 
	#EFI_NVM_EXPRESS_PASS_THRU_ATTRIBUTES_LOGICAL
 0x0002

	)

44 
	#EFI_NVM_EXPRESS_PASS_THRU_ATTRIBUTES_NONBLOCKIO
 0x0004

	)

49 
	#EFI_NVM_EXPRESS_PASS_THRU_ATTRIBUTES_CMD_SET_NVM
 0x0008

	)

54 
	#NORMAL_CMD
 0x00

	)

55 
	#FUSED_FIRST_CMD
 0x01

	)

56 
	#FUSED_SECOND_CMD
 0x02

	)

59 
UINT32
 
	mOpcode
:8;

60 
UINT32
 
	mFu£dO≥øti⁄
:2;

61 
UINT32
 
	mRe£rved
:22;

62 } 
	tNVME_CDW0
;

67 
	#CDW2_VALID
 0x01

	)

68 
	#CDW3_VALID
 0x02

	)

69 
	#CDW10_VALID
 0x04

	)

70 
	#CDW11_VALID
 0x08

	)

71 
	#CDW12_VALID
 0x10

	)

72 
	#CDW13_VALID
 0x20

	)

73 
	#CDW14_VALID
 0x40

	)

74 
	#CDW15_VALID
 0x80

	)

79 
	#NVME_ADMIN_QUEUE
 0x00

	)

80 
	#NVME_IO_QUEUE
 0x01

	)

83 
NVME_CDW0
 
	mCdw0
;

84 
UINT8
 
	mFœgs
;

85 
UINT32
 
	mNsid
;

86 
UINT32
 
	mCdw2
;

87 
UINT32
 
	mCdw3
;

88 
UINT32
 
	mCdw10
;

89 
UINT32
 
	mCdw11
;

90 
UINT32
 
	mCdw12
;

91 
UINT32
 
	mCdw13
;

92 
UINT32
 
	mCdw14
;

93 
UINT32
 
	mCdw15
;

94 } 
	tEFI_NVM_EXPRESS_COMMAND
;

97 
UINT32
 
	mDW0
;

98 
UINT32
 
	mDW1
;

99 
UINT32
 
	mDW2
;

100 
UINT32
 
	mDW3
;

101 } 
	tEFI_NVM_EXPRESS_COMPLETION
;

104 
UINT64
 
	mComm™dTimeout
;

105 
VOID
 *
	mTøns„rBuf„r
;

106 
UINT32
 
	mTøns„rLígth
;

107 
VOID
 *
	mMëad©aBuf„r
;

108 
UINT32
 
	mMëad©aLígth
;

109 
UINT8
 
	mQueueTy≥
;

110 
EFI_NVM_EXPRESS_COMMAND
 *
	mNvmeCmd
;

111 
EFI_NVM_EXPRESS_COMPLETION
 *
	mNvmeCom∂ëi⁄
;

112 } 
	tEFI_NVM_EXPRESS_PASS_THRU_COMMAND_PACKET
;

150 
	gEFI_STATUS


151 (
	tEFIAPI
 *
	tEFI_NVM_EXPRESS_PASS_THRU_PASSTHRU
)(

152 
	tIN
 
	tEFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 *
	tThis
,

153 
	tIN
 
	tUINT32
 
	tName•a˚Id
,

154 
	tIN
 
	tOUT
 
	tEFI_NVM_EXPRESS_PASS_THRU_COMMAND_PACKET
 *
	tPackë
,

155 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


192 
	gEFI_STATUS


193 (
	tEFIAPI
 *
	tEFI_NVM_EXPRESS_PASS_THRU_GET_NEXT_NAMESPACE
)(

194 
	tIN
 
	tEFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 *
	tThis
,

195 
	tIN
 
	tOUT
 
	tUINT32
 *
	tName•a˚Id


230 
	gEFI_STATUS


231 (
	tEFIAPI
 *
	tEFI_NVM_EXPRESS_PASS_THRU_BUILD_DEVICE_PATH
)(

232 
	tIN
 
	tEFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 *
	tThis
,

233 
	tIN
 
	tUINT32
 
	tName•a˚Id
,

234 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


262 
	gEFI_STATUS


263 (
	tEFIAPI
 *
	tEFI_NVM_EXPRESS_PASS_THRU_GET_NAMESPACE
)(

264 
	tIN
 
	tEFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 *
	tThis
,

265 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

266 
	tOUT
 
	tUINT32
 *
	tName•a˚Id


272 
	s_EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
 {

273 
EFI_NVM_EXPRESS_PASS_THRU_MODE
 *
	mMode
;

274 
EFI_NVM_EXPRESS_PASS_THRU_PASSTHRU
 
	mPassThru
;

275 
EFI_NVM_EXPRESS_PASS_THRU_GET_NEXT_NAMESPACE
 
	mGëNextName•a˚
;

276 
EFI_NVM_EXPRESS_PASS_THRU_BUILD_DEVICE_PATH
 
	mBuûdDevi˚P©h
;

277 
EFI_NVM_EXPRESS_PASS_THRU_GET_NAMESPACE
 
	mGëName•a˚
;

280 
EFI_GUID
 
gEfiNvmEx¥essPassThruPrŸocﬁGuid
;

	@PartitionInfo.h

12 #i‚de‡
__PARTITION_INFO_PROTOCOL_H__


13 
	#__PARTITION_INFO_PROTOCOL_H__


	)

15 
	~<Indu°rySènd¨d/Mbr.h
>

16 
	~<Uefi/UefiG±.h
>

21 
	#EFI_PARTITION_INFO_PROTOCOL_GUID
 \

	)

25 
	#EFI_PARTITION_INFO_PROTOCOL_REVISION
 0x0001000

	)

26 
	#PARTITION_TYPE_OTHER
 0x00

	)

27 
	#PARTITION_TYPE_MBR
 0x01

	)

28 
	#PARTITION_TYPE_GPT
 0x02

	)

30 #¥agm®
∑ck
(1)

39 
UINT32
 
	mRevisi⁄
;

43 
UINT32
 
	mTy≥
;

47 
UINT8
 
	mSy°em
;

48 
UINT8
 
	mRe£rved
[7];

53 
MBR_PARTITION_RECORD
 
	mMbr
;

57 
EFI_PARTITION_ENTRY
 
	mG±
;

58 } 
	mInfo
;

59 } 
	tEFI_PARTITION_INFO_PROTOCOL
;

61 #¥agm®
∑ck
()

66 
EFI_GUID
 
gEfiP¨tôi⁄InfoPrŸocﬁGuid
;

	@Pcd.h

17 #i‚de‡
__PCD_H__


18 
	#__PCD_H__


	)

20 
EFI_GUID
 
gPcdPrŸocﬁGuid
;

22 
	#PCD_PROTOCOL_GUID
 \

	)

25 
	#PCD_INVALID_TOKEN_NUMBER
 ((
UINTN
Ë0)

	)

51 
	gVOID


52 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_SKU
)(

53 
	tIN
 
	tUINTN
 
	tSkuId


70 
	gUINT8


71 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET8
)(

72 
	tIN
 
	tUINTN
 
	tTokíNumbî


89 
	gUINT16


90 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET16
)(

91 
	tIN
 
	tUINTN
 
	tTokíNumbî


108 
	gUINT32


109 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET32
)(

110 
	tIN
 
	tUINTN
 
	tTokíNumbî


127 
	gUINT64


128 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET64
)(

129 
	tIN
 
	tUINTN
 
	tTokíNumbî


148 
	gVOID
 *

149 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_POINTER
)(

150 
	tIN
 
	tUINTN
 
	tTokíNumbî


169 
	gBOOLEAN


170 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_BOOLEAN
)(

171 
	tIN
 
	tUINTN
 
	tTokíNumbî


188 
	gUINTN


189 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_SIZE
)(

190 
	tIN
 
	tUINTN
 
	tTokíNumbî


210 
	gUINT8


211 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_8
)(

212 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

213 
	tIN
 
	tUINTN
 
	tTokíNumbî


233 
	gUINT16


234 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_16
)(

235 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

236 
	tIN
 
	tUINTN
 
	tTokíNumbî


256 
	gUINT32


257 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_32
)(

258 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

259 
	tIN
 
	tUINTN
 
	tTokíNumbî


279 
	gUINT64


280 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_64
)(

281 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

282 
	tIN
 
	tUINTN
 
	tTokíNumbî


302 
	gVOID
 *

303 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_POINTER
)(

304 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

305 
	tIN
 
	tUINTN
 
	tTokíNumbî


325 
	gBOOLEAN


326 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_BOOLEAN
)(

327 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

328 
	tIN
 
	tUINTN
 
	tTokíNumbî


346 
	gUINTN


347 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_EX_SIZE
)(

348 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

349 
	tIN
 
	tUINTN
 
	tTokíNumbî


372 
	gEFI_STATUS


373 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET8
)(

374 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

375 
	tIN
 
	tUINT8
 
	tVÆue


398 
	gEFI_STATUS


399 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET16
)(

400 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

401 
	tIN
 
	tUINT16
 
	tVÆue


424 
	gEFI_STATUS


425 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET32
)(

426 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

427 
	tIN
 
	tUINT32
 
	tVÆue


450 
	gEFI_STATUS


451 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET64
)(

452 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

453 
	tIN
 
	tUINT64
 
	tVÆue


480 
	gEFI_STATUS


481 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_POINTER
)(

482 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

483 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSizeOfBuf„r
,

484 
	tIN
 
	tVOID
 *
	tBuf„r


507 
	gEFI_STATUS


508 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_BOOLEAN
)(

509 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

510 
	tIN
 
	tBOOLEAN
 
	tVÆue


534 
	gEFI_STATUS


535 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_8
)(

536 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

537 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

538 
	tIN
 
	tUINT8
 
	tVÆue


562 
	gEFI_STATUS


563 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_16
)(

564 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

565 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

566 
	tIN
 
	tUINT16
 
	tVÆue


590 
	gEFI_STATUS


591 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_32
)(

592 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

593 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

594 
	tIN
 
	tUINT32
 
	tVÆue


618 
	gEFI_STATUS


619 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_64
)(

620 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

621 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

622 
	tIN
 
	tUINT64
 
	tVÆue


650 
	gEFI_STATUS


651 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_POINTER
)(

652 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

653 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

654 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSizeOfBuf„r
,

655 
	tIN
 
	tVOID
 *
	tBuf„r


679 
	gEFI_STATUS


680 (
	tEFIAPI
 *
	tPCD_PROTOCOL_SET_EX_BOOLEAN
)(

681 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

682 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

683 
	tIN
 
	tBOOLEAN
 
	tVÆue


708 
	gVOID


709 (
	tEFIAPI
 *
	tPCD_PROTOCOL_CALLBACK
)(

710 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tCÆlBackGuid
, 
	tOPTIONAL


711 
	tIN
 
	tUINTN
 
	tCÆlBackTokí
,

712 
	tIN
 
	tOUT
 
	tVOID
 *
	tTokíD©a
,

713 
	tIN
 
	tUINTN
 
	tTokíD©aSize


731 
	gEFI_STATUS


732 (
	tEFIAPI
 *
	tPCD_PROTOCOL_CALLBACK_ONSET
)(

733 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
, 
	tOPTIONAL


734 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

735 
	tIN
 
	tPCD_PROTOCOL_CALLBACK
 
	tCÆlBackFun˘i⁄


753 
	gEFI_STATUS


754 (
	tEFIAPI
 *
	tPCD_PROTOCOL_CANCEL_CALLBACK
)(

755 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
, 
	tOPTIONAL


756 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

757 
	tIN
 
	tPCD_PROTOCOL_CALLBACK
 
	tCÆlBackFun˘i⁄


789 
	gEFI_STATUS


790 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_NEXT_TOKEN
)(

791 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
, 
	tOPTIONAL


792 
	tIN
 
	tOUT
 
	tUINTN
 *
	tTokíNumbî


814 
	gEFI_STATUS


815 (
	tEFIAPI
 *
	tPCD_PROTOCOL_GET_NEXT_TOKENSPACE
)(

816 
	tIN
 
	tOUT
 
	tCONST
 
	tEFI_GUID
 **
	tGuid


823 
PCD_PROTOCOL_SET_SKU
 
	mSëSku
;

825 
PCD_PROTOCOL_GET8
 
	mGë8
;

826 
PCD_PROTOCOL_GET16
 
	mGë16
;

827 
PCD_PROTOCOL_GET32
 
	mGë32
;

828 
PCD_PROTOCOL_GET64
 
	mGë64
;

829 
PCD_PROTOCOL_GET_POINTER
 
	mGëPå
;

830 
PCD_PROTOCOL_GET_BOOLEAN
 
	mGëBoﬁ
;

831 
PCD_PROTOCOL_GET_SIZE
 
	mGëSize
;

833 
PCD_PROTOCOL_GET_EX_8
 
	mGë8Ex
;

834 
PCD_PROTOCOL_GET_EX_16
 
	mGë16Ex
;

835 
PCD_PROTOCOL_GET_EX_32
 
	mGë32Ex
;

836 
PCD_PROTOCOL_GET_EX_64
 
	mGë64Ex
;

837 
PCD_PROTOCOL_GET_EX_POINTER
 
	mGëPåEx
;

838 
PCD_PROTOCOL_GET_EX_BOOLEAN
 
	mGëBoﬁEx
;

839 
PCD_PROTOCOL_GET_EX_SIZE
 
	mGëSizeEx
;

841 
PCD_PROTOCOL_SET8
 
	mSë8
;

842 
PCD_PROTOCOL_SET16
 
	mSë16
;

843 
PCD_PROTOCOL_SET32
 
	mSë32
;

844 
PCD_PROTOCOL_SET64
 
	mSë64
;

845 
PCD_PROTOCOL_SET_POINTER
 
	mSëPå
;

846 
PCD_PROTOCOL_SET_BOOLEAN
 
	mSëBoﬁ
;

848 
PCD_PROTOCOL_SET_EX_8
 
	mSë8Ex
;

849 
PCD_PROTOCOL_SET_EX_16
 
	mSë16Ex
;

850 
PCD_PROTOCOL_SET_EX_32
 
	mSë32Ex
;

851 
PCD_PROTOCOL_SET_EX_64
 
	mSë64Ex
;

852 
PCD_PROTOCOL_SET_EX_POINTER
 
	mSëPåEx
;

853 
PCD_PROTOCOL_SET_EX_BOOLEAN
 
	mSëBoﬁEx
;

855 
PCD_PROTOCOL_CALLBACK_ONSET
 
	mCÆlbackOnSë
;

856 
PCD_PROTOCOL_CANCEL_CALLBACK
 
	mC™˚lCÆlback
;

857 
PCD_PROTOCOL_GET_NEXT_TOKEN
 
	mGëNextTokí
;

858 
PCD_PROTOCOL_GET_NEXT_TOKENSPACE
 
	mGëNextTokíS∑˚
;

859 } 
	tPCD_PROTOCOL
;

	@PcdInfo.h

19 #i‚de‡
__PCD_INFO_H__


20 
	#__PCD_INFO_H__


	)

22 
EFI_GUID
 
gGëPcdInfoPrŸocﬁGuid
;

24 
	#GET_PCD_INFO_PROTOCOL_GUID
 \

	)

30 
_GET_PCD_INFO_PROTOCOL
 
	tGET_PCD_INFO_PROTOCOL
;

45 
	gEFI_STATUS


46 (
	tEFIAPI
 *
	tGET_PCD_INFO_PROTOCOL_GET_INFO
) (

47 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

48 
	tOUT
 
	tEFI_PCD_INFO
 *
	tPcdInfo


65 
	gEFI_STATUS


66 (
	tEFIAPI
 *
	tGET_PCD_INFO_PROTOCOL_GET_INFO_EX
) (

67 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

68 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

69 
	tOUT
 
	tEFI_PCD_INFO
 *
	tPcdInfo


80 
	gUINTN


81 (
	tEFIAPI
 *
	tGET_PCD_INFO_PROTOCOL_GET_SKU
) (

82 
	tVOID


89 
	s_GET_PCD_INFO_PROTOCOL
 {

93 
GET_PCD_INFO_PROTOCOL_GET_INFO
 
	mGëInfo
;

94 
GET_PCD_INFO_PROTOCOL_GET_INFO_EX
 
	mGëInfoEx
;

98 
GET_PCD_INFO_PROTOCOL_GET_SKU
 
	mGëSku
;

	@PciEnumerationComplete.h

14 #i‚de‡
_PCI_ENUMERATION_COMPLETE_H_


15 
	#_PCI_ENUMERATION_COMPLETE_H_


	)

17 
	#EFI_PCI_ENUMERATION_COMPLETE_GUID
 \

	)

22 
EFI_GUID
 
gEfiPciEnumî©i⁄Com∂ëePrŸocﬁGuid
;

	@PciHostBridgeResourceAllocation.h

15 #i‚de‡
_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_H_


16 
	#_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_H_


	)

22 
	~<PrŸocﬁ/PciRoŸBridgeIo.h
>

27 
	#EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GUID
 \

	)

35 
_EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
;

42 
	#EFI_PCI_HOST_BRIDGE_COMBINE_MEM_PMEM
 1

	)

50 
	#EFI_PCI_HOST_BRIDGE_MEM64_DECODE
 2

	)

57 
UINT64
 
	tEFI_RESOURCE_ALLOCATION_STATUS
;

64 
	#EFI_RESOURCE_SATISFIED
 0x0000000000000000ULL

	)

72 
	#EFI_RESOURCE_NOT_SATISFIED
 0xFFFFFFFFFFFFFFFFULL

	)

84 
	mEfiPciHo°BridgeBegöEnumî©i⁄
,

91 
	mEfiPciHo°BridgeBegöBusAŒoˇti⁄
,

98 
	mEfiPciHo°BridgeEndBusAŒoˇti⁄
,

104 
	mEfiPciHo°BridgeBegöResour˚AŒoˇti⁄
,

111 
	mEfiPciHo°BridgeAŒoˇãResour˚s
,

117 
	mEfiPciHo°BridgeSëResour˚s
,

123 
	mEfiPciHo°BridgeFªeResour˚s
,

129 
	mEfiPciHo°BridgeEndResour˚AŒoˇti⁄
,

135 
	mEfiPciHo°BridgeEndEnumî©i⁄
,

136 
	mEfiMaxPciHo°BridgeEnumî©i⁄Pha£


137 } 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PHASE
;

151 
	mEfiPciBef‹eChûdBusEnumî©i⁄
,

157 
	mEfiPciBef‹eResour˚CﬁÀ˘i⁄


158 } 
	tEFI_PCI_CONTROLLER_RESOURCE_ALLOCATION_PHASE
;

183 
	gEFI_STATUS


184 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_NOTIFY_PHASE
)(

185 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

186 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PHASE
 
	tPha£


206 
	gEFI_STATUS


207 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_NEXT_ROOT_BRIDGE
)(

208 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

209 
	tIN
 
	tOUT
 
	tEFI_HANDLE
 *
	tRoŸBridgeH™dÀ


226 
	gEFI_STATUS


227 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_ATTRIBUTES
)(

228 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

229 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

230 
	tOUT
 
	tUINT64
 *
	tAâribuãs


249 
	gEFI_STATUS


250 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_START_BUS_ENUMERATION
)(

251 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

252 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

253 
	tOUT
 
	tVOID
 **
	tC⁄figuøti⁄


281 
	gEFI_STATUS


282 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_SET_BUS_NUMBERS
)(

283 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

284 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

285 
	tIN
 
	tVOID
 *
	tC⁄figuøti⁄


313 
	gEFI_STATUS


314 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_SUBMIT_RESOURCES
)(

315 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

316 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

317 
	tIN
 
	tVOID
 *
	tC⁄figuøti⁄


335 
	gEFI_STATUS


336 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_PROPOSED_RESOURCES
)(

337 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

338 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

339 
	tOUT
 
	tVOID
 **
	tC⁄figuøti⁄


362 
	gEFI_STATUS


363 (
	tEFIAPI
 *
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_PREPROCESS_CONTROLLER
)(

364 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 *
	tThis
,

365 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridgeH™dÀ
,

366 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_PCI_ADDRESS
 
	tPciAddªss
,

367 
	tIN
 
	tEFI_PCI_CONTROLLER_RESOURCE_ALLOCATION_PHASE
 
	tPha£


373 
	s_EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL
 {

378 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_NOTIFY_PHASE
 
	mNŸifyPha£
;

384 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_NEXT_ROOT_BRIDGE
 
	mGëNextRoŸBridge
;

389 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_ATTRIBUTES
 
	mGëAŒocAâribuãs
;

394 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_START_BUS_ENUMERATION
 
	mSèπBusEnumî©i⁄
;

399 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_SET_BUS_NUMBERS
 
	mSëBusNumbîs
;

404 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_SUBMIT_RESOURCES
 
	mSubmôResour˚s
;

409 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_GET_PROPOSED_RESOURCES
 
	mGëPr›o£dResour˚s
;

417 
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL_PREPROCESS_CONTROLLER
 
	mPª¥o˚ssC⁄åﬁÀr
;

420 
EFI_GUID
 
gEfiPciHo°BridgeResour˚AŒoˇti⁄PrŸocﬁGuid
;

	@PciHotPlugInit.h

52 #i‚de‡
_EFI_PCI_HOT_PLUG_INIT_H_


53 
	#_EFI_PCI_HOT_PLUG_INIT_H_


	)

58 
	#EFI_PCI_HOT_PLUG_INIT_PROTOCOL_GUID
 \

	)

66 
_EFI_PCI_HOT_PLUG_INIT_PROTOCOL
 
	tEFI_PCI_HOT_PLUG_INIT_PROTOCOL
;

71 
UINT16
 
	tEFI_HPC_STATE
;

79 
	#EFI_HPC_STATE_INITIALIZED
 0x01

	)

85 
	#EFI_HPC_STATE_ENABLED
 0x02

	)

98 
EFI_DEVICE_PATH_PROTOCOL
 *
	mHpcDevi˚P©h
;

106 
EFI_DEVICE_PATH_PROTOCOL
 *
	mHpbDevi˚P©h
;

107 } 
	tEFI_HPC_LOCATION
;

119 
	mEfiPaddögPciBus
,

130 
	mEfiPaddögPciRoŸBridge


131 } 
	tEFI_HPC_PADDING_ATTRIBUTES
;

159 
	gEFI_STATUS


160 (
	tEFIAPI
 *
	tEFI_GET_ROOT_HPC_LIST
)(

161 
	tIN
 
	tEFI_PCI_HOT_PLUG_INIT_PROTOCOL
 *
	tThis
,

162 
	tOUT
 
	tUINTN
 *
	tHpcCou¡
,

163 
	tOUT
 
	tEFI_HPC_LOCATION
 **
	tHpcLi°


198 
	gEFI_STATUS


199 (
	tEFIAPI
 *
	tEFI_INITIALIZE_ROOT_HPC
)(

200 
	tIN
 
	tEFI_PCI_HOT_PLUG_INIT_PROTOCOL
 *
	tThis
,

201 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tHpcDevi˚P©h
,

202 
	tIN
 
	tUINT64
 
	tHpcPciAddªss
,

203 
	tIN
 
	tEFI_EVENT
 
	tEvít
, 
	tOPTIONAL


204 
	tOUT
 
	tEFI_HPC_STATE
 *
	tHpcSèã


238 
	gEFI_STATUS


239 (
	tEFIAPI
 *
	tEFI_GET_HOT_PLUG_PADDING
)(

240 
	tIN
 
	tEFI_PCI_HOT_PLUG_INIT_PROTOCOL
 *
	tThis
,

241 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tHpcDevi˚P©h
,

242 
	tIN
 
	tUINT64
 
	tHpcPciAddªss
,

243 
	tOUT
 
	tEFI_HPC_STATE
 *
	tHpcSèã
,

244 
	tOUT
 
	tVOID
 **
	tPaddög
,

245 
	tOUT
 
	tEFI_HPC_PADDING_ATTRIBUTES
 *
	tAâribuãs


253 
	s_EFI_PCI_HOT_PLUG_INIT_PROTOCOL
 {

257 
EFI_GET_ROOT_HPC_LIST
 
	mGëRoŸHpcLi°
;

262 
EFI_INITIALIZE_ROOT_HPC
 
	mInôülizeRoŸHpc
;

267 
EFI_GET_HOT_PLUG_PADDING
 
	mGëResour˚Paddög
;

270 
EFI_GUID
 
gEfiPciHŸPlugInôPrŸocﬁGuid
;

	@PciHotPlugRequest.h

40 #i‚de‡
__PCI_HOTPLUG_REQUEST_H_


41 
	#__PCI_HOTPLUG_REQUEST_H_


	)

46 
	#EFI_PCI_HOTPLUG_REQUEST_PROTOCOL_GUID
 \

	)

54 
_EFI_PCI_HOTPLUG_REQUEST_PROTOCOL
 
	tEFI_PCI_HOTPLUG_REQUEST_PROTOCOL
;

65 
	mEfiPciHŸPlugReque°Add
,

70 
	mEfiPciHŸ∂ugReque°Remove


71 } 
	tEFI_PCI_HOTPLUG_OPERATION
;

137 
	gEFI_STATUS


138 (
	tEFIAPI
 *
	tEFI_PCI_HOTPLUG_REQUEST_NOTIFY
)(

139 
	tIN
 
	tEFI_PCI_HOTPLUG_REQUEST_PROTOCOL
 *
	tThis
,

140 
	tIN
 
	tEFI_PCI_HOTPLUG_OPERATION
 
	tO≥øti⁄
,

141 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀr
,

142 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tRemaöögDevi˚P©h
 
	tOPTIONAL
,

143 
	tIN
 
	tOUT
 
	tUINT8
 *
	tNumbîOfChûdªn
,

144 
	tIN
 
	tOUT
 
	tEFI_HANDLE
 *
	tChûdH™dÀBuf„r


152 
	s_EFI_PCI_HOTPLUG_REQUEST_PROTOCOL
 {

159 
EFI_PCI_HOTPLUG_REQUEST_NOTIFY
 
	mNŸify
;

162 
EFI_GUID
 
gEfiPciHŸPlugReque°PrŸocﬁGuid
;

	@PciIo.h

10 #i‚de‡
__PCI_IO_H__


11 
	#__PCI_IO_H__


	)

16 
	#EFI_PCI_IO_PROTOCOL_GUID
 \

	)

21 
_EFI_PCI_IO_PROTOCOL
 
	tEFI_PCI_IO_PROTOCOL
;

29 
	mEfiPciIoWidthUöt8
 = 0,

30 
	mEfiPciIoWidthUöt16
,

31 
	mEfiPciIoWidthUöt32
,

32 
	mEfiPciIoWidthUöt64
,

33 
	mEfiPciIoWidthFifoUöt8
,

34 
	mEfiPciIoWidthFifoUöt16
,

35 
	mEfiPciIoWidthFifoUöt32
,

36 
	mEfiPciIoWidthFifoUöt64
,

37 
	mEfiPciIoWidthFûlUöt8
,

38 
	mEfiPciIoWidthFûlUöt16
,

39 
	mEfiPciIoWidthFûlUöt32
,

40 
	mEfiPciIoWidthFûlUöt64
,

41 
	mEfiPciIoWidthMaximum


42 } 
	tEFI_PCI_IO_PROTOCOL_WIDTH
;

47 
	#EFI_PCI_IO_PASS_THROUGH_BAR
 0xff

48 
	#EFI_PCI_IO_ATTRIBUTE_MASK
 0x077f

49 
	#EFI_PCI_IO_ATTRIBUTE_ISA_MOTHERBOARD_IO
 0x0001

50 
	#EFI_PCI_IO_ATTRIBUTE_ISA_IO
 0x0002

51 
	#EFI_PCI_IO_ATTRIBUTE_VGA_PALETTE_IO
 0x0004

52 
	#EFI_PCI_IO_ATTRIBUTE_VGA_MEMORY
 0x0008

53 
	#EFI_PCI_IO_ATTRIBUTE_VGA_IO
 0x0010

54 
	#EFI_PCI_IO_ATTRIBUTE_IDE_PRIMARY_IO
 0x0020

55 
	#EFI_PCI_IO_ATTRIBUTE_IDE_SECONDARY_IO
 0x0040

56 
	#EFI_PCI_IO_ATTRIBUTE_MEMORY_WRITE_COMBINE
 0x0080

57 
	#EFI_PCI_IO_ATTRIBUTE_IO
 0x0100

58 
	#EFI_PCI_IO_ATTRIBUTE_MEMORY
 0x0200

59 
	#EFI_PCI_IO_ATTRIBUTE_BUS_MASTER
 0x0400

60 
	#EFI_PCI_IO_ATTRIBUTE_MEMORY_CACHED
 0x0800

61 
	#EFI_PCI_IO_ATTRIBUTE_MEMORY_DISABLE
 0x1000

62 
	#EFI_PCI_IO_ATTRIBUTE_EMBEDDED_DEVICE
 0x2000

63 
	#EFI_PCI_IO_ATTRIBUTE_EMBEDDED_ROM
 0x4000

64 
	#EFI_PCI_IO_ATTRIBUTE_DUAL_ADDRESS_CYCLE
 0x8000

65 
	#EFI_PCI_IO_ATTRIBUTE_ISA_IO_16
 0x10000

66 
	#EFI_PCI_IO_ATTRIBUTE_VGA_PALETTE_IO_16
 0x20000

67 
	#EFI_PCI_IO_ATTRIBUTE_VGA_IO_16
 0x40000

68 

	)

69 
	#EFI_PCI_DEVICE_ENABLE
 (
EFI_PCI_IO_ATTRIBUTE_IO
 | 
EFI_PCI_IO_ATTRIBUTE_MEMORY
 | 
EFI_PCI_IO_ATTRIBUTE_BUS_MASTER
)

	)

70 
	#EFI_VGA_DEVICE_ENABLE
 (
EFI_PCI_IO_ATTRIBUTE_VGA_PALETTE_IO
 | 
EFI_PCI_IO_ATTRIBUTE_VGA_MEMORY
 | 
EFI_PCI_IO_ATTRIBUTE_VGA_IO
 | 
EFI_PCI_IO_ATTRIBUTE_IO
)

	)

81 
	mEfiPciIoO≥øti⁄BusMa°îRód
,

85 
	mEfiPciIoO≥øti⁄BusMa°îWrôe
,

90 
	mEfiPciIoO≥øti⁄BusMa°îComm⁄Buf„r
,

91 
	mEfiPciIoO≥øti⁄Maximum


92 } 
	tEFI_PCI_IO_PROTOCOL_OPERATION
;

103 
	mEfiPciIoAâribuãO≥øti⁄Gë
,

107 
	mEfiPciIoAâribuãO≥øti⁄Së
,

111 
	mEfiPciIoAâribuãO≥øti⁄E«bÀ
,

115 
	mEfiPciIoAâribuãO≥øti⁄DißbÀ
,

119 
	mEfiPciIoAâribuãO≥øti⁄Suµ‹ãd
,

120 
	mEfiPciIoAâribuãO≥øti⁄Maximum


121 } 
	tEFI_PCI_IO_PROTOCOL_ATTRIBUTE_OPERATION
;

146 
	gEFI_STATUS


147 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_POLL_IO_MEM
)(

148 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

149 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_WIDTH
 
	tWidth
,

150 
	tIN
 
	tUINT8
 
	tB¨Index
,

151 
	tIN
 
	tUINT64
 
	tOff£t
,

152 
	tIN
 
	tUINT64
 
	tMask
,

153 
	tIN
 
	tUINT64
 
	tVÆue
,

154 
	tIN
 
	tUINT64
 
	tDñay
,

155 
	tOUT
 
	tUINT64
 *
	tResu…


179 
	gEFI_STATUS


180 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_IO_MEM
)(

181 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

182 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_WIDTH
 
	tWidth
,

183 
	tIN
 
	tUINT8
 
	tB¨Index
,

184 
	tIN
 
	tUINT64
 
	tOff£t
,

185 
	tIN
 
	tUINTN
 
	tCou¡
,

186 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


193 
EFI_PCI_IO_PROTOCOL_IO_MEM
 
	mRód
;

197 
EFI_PCI_IO_PROTOCOL_IO_MEM
 
	mWrôe
;

198 } 
	tEFI_PCI_IO_PROTOCOL_ACCESS
;

219 
	gEFI_STATUS


220 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_CONFIG
)(

221 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

222 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_WIDTH
 
	tWidth
,

223 
	tIN
 
	tUINT32
 
	tOff£t
,

224 
	tIN
 
	tUINTN
 
	tCou¡
,

225 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


232 
EFI_PCI_IO_PROTOCOL_CONFIG
 
	mRód
;

236 
EFI_PCI_IO_PROTOCOL_CONFIG
 
	mWrôe
;

237 } 
	tEFI_PCI_IO_PROTOCOL_CONFIG_ACCESS
;

268 
	gEFI_STATUS


269 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_COPY_MEM
)(

270 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

271 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_WIDTH
 
	tWidth
,

272 
	tIN
 
	tUINT8
 
	tDe°B¨Index
,

273 
	tIN
 
	tUINT64
 
	tDe°Off£t
,

274 
	tIN
 
	tUINT8
 
	tSrcB¨Index
,

275 
	tIN
 
	tUINT64
 
	tSrcOff£t
,

276 
	tIN
 
	tUINTN
 
	tCou¡


299 
	gEFI_STATUS


300 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_MAP
)(

301 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

302 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_OPERATION
 
	tO≥øti⁄
,

303 
	tIN
 
	tVOID
 *
	tHo°Addªss
,

304 
	tIN
 
	tOUT
 
	tUINTN
 *
	tNumbîOfByãs
,

305 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tDevi˚Addªss
,

306 
	tOUT
 
	tVOID
 **
	tM≠pög


320 
	gEFI_STATUS


321 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_UNMAP
)(

322 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

323 
	tIN
 
	tVOID
 *
	tM≠pög


347 
	gEFI_STATUS


348 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_ALLOCATE_BUFFER
)(

349 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

350 
	tIN
 
	tEFI_ALLOCATE_TYPE
 
	tTy≥
,

351 
	tIN
 
	tEFI_MEMORY_TYPE
 
	tMem‹yTy≥
,

352 
	tIN
 
	tUINTN
 
	tPages
,

353 
	tOUT
 
	tVOID
 **
	tHo°Addªss
,

354 
	tIN
 
	tUINT64
 
	tAâribuãs


370 
	gEFI_STATUS


371 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_FREE_BUFFER
)(

372 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

373 
	tIN
 
	tUINTN
 
	tPages
,

374 
	tIN
 
	tVOID
 *
	tHo°Addªss


389 
	gEFI_STATUS


390 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_FLUSH
)(

391 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis


408 
	gEFI_STATUS


409 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_GET_LOCATION
)(

410 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

411 
	tOUT
 
	tUINTN
 *
	tSegmítNumbî
,

412 
	tOUT
 
	tUINTN
 *
	tBusNumbî
,

413 
	tOUT
 
	tUINTN
 *
	tDevi˚Numbî
,

414 
	tOUT
 
	tUINTN
 *
	tFun˘i⁄Numbî


437 
	gEFI_STATUS


438 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_ATTRIBUTES
)(

439 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

440 
	tIN
 
	tEFI_PCI_IO_PROTOCOL_ATTRIBUTE_OPERATION
 
	tO≥øti⁄
,

441 
	tIN
 
	tUINT64
 
	tAâribuãs
,

442 
	tOUT
 
	tUINT64
 *
	tResu…
 
	tOPTIONAL


467 
	gEFI_STATUS


468 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_GET_BAR_ATTRIBUTES
)(

469 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

470 
	tIN
 
	tUINT8
 
	tB¨Index
,

471 
	tOUT
 
	tUINT64
 *
	tSuµ‹ts
, 
	tOPTIONAL


472 
	tOUT
 
	tVOID
 **
	tResour˚s
 
	tOPTIONAL


500 
	gEFI_STATUS


501 (
	tEFIAPI
 *
	tEFI_PCI_IO_PROTOCOL_SET_BAR_ATTRIBUTES
)(

502 
	tIN
 
	tEFI_PCI_IO_PROTOCOL
 *
	tThis
,

503 
	tIN
 
	tUINT64
 
	tAâribuãs
,

504 
	tIN
 
	tUINT8
 
	tB¨Index
,

505 
	tIN
 
	tOUT
 
	tUINT64
 *
	tOff£t
,

506 
	tIN
 
	tOUT
 
	tUINT64
 *
	tLígth


516 
	s_EFI_PCI_IO_PROTOCOL
 {

517 
EFI_PCI_IO_PROTOCOL_POLL_IO_MEM
 
	mPﬁlMem
;

518 
EFI_PCI_IO_PROTOCOL_POLL_IO_MEM
 
	mPﬁlIo
;

519 
EFI_PCI_IO_PROTOCOL_ACCESS
 
	mMem
;

520 
EFI_PCI_IO_PROTOCOL_ACCESS
 
	mIo
;

521 
EFI_PCI_IO_PROTOCOL_CONFIG_ACCESS
 
	mPci
;

522 
EFI_PCI_IO_PROTOCOL_COPY_MEM
 
	mC›yMem
;

523 
EFI_PCI_IO_PROTOCOL_MAP
 
	mM≠
;

524 
EFI_PCI_IO_PROTOCOL_UNMAP
 
	mUnm≠
;

525 
EFI_PCI_IO_PROTOCOL_ALLOCATE_BUFFER
 
	mAŒoˇãBuf„r
;

526 
EFI_PCI_IO_PROTOCOL_FREE_BUFFER
 
	mFªeBuf„r
;

527 
EFI_PCI_IO_PROTOCOL_FLUSH
 
	mFlush
;

528 
EFI_PCI_IO_PROTOCOL_GET_LOCATION
 
	mGëLoˇti⁄
;

529 
EFI_PCI_IO_PROTOCOL_ATTRIBUTES
 
	mAâribuãs
;

530 
EFI_PCI_IO_PROTOCOL_GET_BAR_ATTRIBUTES
 
	mGëB¨Aâribuãs
;

531 
EFI_PCI_IO_PROTOCOL_SET_BAR_ATTRIBUTES
 
	mSëB¨Aâribuãs
;

536 
UINT64
 
	mRomSize
;

546 
VOID
 *
	mRomImage
;

549 
EFI_GUID
 
gEfiPciIoPrŸocﬁGuid
;

	@PciOverride.h

16 #i‚de‡
_PCI_OVERRIDE_H_


17 
	#_PCI_OVERRIDE_H_


	)

22 
	~<PrŸocﬁ/PciPœtf‹m.h
>

27 
	#EFI_PCI_OVERRIDE_GUID
 \

	)

35 
EFI_PCI_PLATFORM_PROTOCOL
 
	tEFI_PCI_OVERRIDE_PROTOCOL
;

38 
EFI_GUID
 
gEfiPciOvîridePrŸocﬁGuid
;

	@PciPlatform.h

16 #i‚de‡
_PCI_PLATFORM_H_


17 
	#_PCI_PLATFORM_H_


	)

23 
	~<PrŸocﬁ/PciHo°BridgeResour˚AŒoˇti⁄.h
>

28 
	#EFI_PCI_PLATFORM_PROTOCOL_GUID
 \

	)

36 
_EFI_PCI_PLATFORM_PROTOCOL
 
	tEFI_PCI_PLATFORM_PROTOCOL
;

113 
UINT32
 
	tEFI_PCI_PLATFORM_POLICY
;

119 
	#EFI_RESERVE_NONE_IO_ALIAS
 0x0000

	)

128 
	#EFI_RESERVE_ISA_IO_ALIAS
 0x0001

	)

133 
	#EFI_RESERVE_ISA_IO_NO_ALIAS
 0x0002

	)

138 
	#EFI_RESERVE_VGA_IO_ALIAS
 0x0004

	)

143 
	#EFI_RESERVE_VGA_IO_NO_ALIAS
 0x0008

	)

155 
	mBef‹ePciHo°Bridge
 = 0,

161 
	mChù£tE¡ry
 = 0,

168 
	mA·îPciHo°Bridge
 = 1,

175 
	mChù£tExô
 = 1,

176 
	mMaximumChù£tPha£


177 } 
	tEFI_PCI_EXECUTION_PHASE
;

179 
EFI_PCI_EXECUTION_PHASE
 
	tEFI_PCI_CHIPSET_EXECUTION_PHASE
;

206 
	gEFI_STATUS


207 (
	tEFIAPI
 *
	tEFI_PCI_PLATFORM_PHASE_NOTIFY
)(

208 
	tIN
 
	tEFI_PCI_PLATFORM_PROTOCOL
 *
	tThis
,

209 
	tIN
 
	tEFI_HANDLE
 
	tHo°Bridge
,

210 
	tIN
 
	tEFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PHASE
 
	tPha£
,

211 
	tIN
 
	tEFI_PCI_EXECUTION_PHASE
 
	tExecPha£


241 
	gEFI_STATUS


242 (
	tEFIAPI
 *
	tEFI_PCI_PLATFORM_PREPROCESS_CONTROLLER
)(

243 
	tIN
 
	tEFI_PCI_PLATFORM_PROTOCOL
 *
	tThis
,

244 
	tIN
 
	tEFI_HANDLE
 
	tHo°Bridge
,

245 
	tIN
 
	tEFI_HANDLE
 
	tRoŸBridge
,

246 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_PCI_ADDRESS
 
	tPciAddªss
,

247 
	tIN
 
	tEFI_PCI_CONTROLLER_RESOURCE_ALLOCATION_PHASE
 
	tPha£
,

248 
	tIN
 
	tEFI_PCI_EXECUTION_PHASE
 
	tExecPha£


266 
	gEFI_STATUS


267 (
	tEFIAPI
 *
	tEFI_PCI_PLATFORM_GET_PLATFORM_POLICY
)(

268 
	tIN
 
	tCONST
 
	tEFI_PCI_PLATFORM_PROTOCOL
 *
	tThis
,

269 
	tOUT
 
	tEFI_PCI_PLATFORM_POLICY
 *
	tPciPﬁicy


302 
	gEFI_STATUS


303 (
	tEFIAPI
 *
	tEFI_PCI_PLATFORM_GET_PCI_ROM
)(

304 
	tIN
 
	tCONST
 
	tEFI_PCI_PLATFORM_PROTOCOL
 *
	tThis
,

305 
	tIN
 
	tEFI_HANDLE
 
	tPciH™dÀ
,

306 
	tOUT
 
	tVOID
 **
	tRomImage
,

307 
	tOUT
 
	tUINTN
 *
	tRomSize


315 
	s_EFI_PCI_PLATFORM_PROTOCOL
 {

320 
EFI_PCI_PLATFORM_PHASE_NOTIFY
 
	mPœtf‹mNŸify
;

325 
EFI_PCI_PLATFORM_PREPROCESS_CONTROLLER
 
	mPœtf‹mPªpC⁄åﬁÀr
;

329 
EFI_PCI_PLATFORM_GET_PLATFORM_POLICY
 
	mGëPœtf‹mPﬁicy
;

333 
EFI_PCI_PLATFORM_GET_PCI_ROM
 
	mGëPciRom
;

336 
EFI_GUID
 
gEfiPciPœtf‹mPrŸocﬁGuid
;

	@PciRootBridgeIo.h

13 #i‚de‡
__PCI_ROOT_BRIDGE_IO_H__


14 
	#__PCI_ROOT_BRIDGE_IO_H__


	)

16 
	~<Libøry/Ba£Lib.h
>

18 
	#EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_GUID
 \

	)

23 
_EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
;

31 
	mEfiPciWidthUöt8
,

32 
	mEfiPciWidthUöt16
,

33 
	mEfiPciWidthUöt32
,

34 
	mEfiPciWidthUöt64
,

35 
	mEfiPciWidthFifoUöt8
,

36 
	mEfiPciWidthFifoUöt16
,

37 
	mEfiPciWidthFifoUöt32
,

38 
	mEfiPciWidthFifoUöt64
,

39 
	mEfiPciWidthFûlUöt8
,

40 
	mEfiPciWidthFûlUöt16
,

41 
	mEfiPciWidthFûlUöt32
,

42 
	mEfiPciWidthFûlUöt64
,

43 
	mEfiPciWidthMaximum


44 } 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_WIDTH
;

56 
	mEfiPciO≥øti⁄BusMa°îRód
,

61 
	mEfiPciO≥øti⁄BusMa°îWrôe
,

66 
	mEfiPciO≥øti⁄BusMa°îComm⁄Buf„r
,

71 
	mEfiPciO≥øti⁄BusMa°îRód64
,

76 
	mEfiPciO≥øti⁄BusMa°îWrôe64
,

81 
	mEfiPciO≥øti⁄BusMa°îComm⁄Buf„r64
,

82 
	mEfiPciO≥øti⁄Maximum


83 } 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_OPERATION
;

85 
	#EFI_PCI_ATTRIBUTE_ISA_MOTHERBOARD_IO
 0x0001

	)

86 
	#EFI_PCI_ATTRIBUTE_ISA_IO
 0x0002

	)

87 
	#EFI_PCI_ATTRIBUTE_VGA_PALETTE_IO
 0x0004

	)

88 
	#EFI_PCI_ATTRIBUTE_VGA_MEMORY
 0x0008

	)

89 
	#EFI_PCI_ATTRIBUTE_VGA_IO
 0x0010

	)

90 
	#EFI_PCI_ATTRIBUTE_IDE_PRIMARY_IO
 0x0020

	)

91 
	#EFI_PCI_ATTRIBUTE_IDE_SECONDARY_IO
 0x0040

	)

92 
	#EFI_PCI_ATTRIBUTE_MEMORY_WRITE_COMBINE
 0x0080

	)

93 
	#EFI_PCI_ATTRIBUTE_MEMORY_CACHED
 0x0800

	)

94 
	#EFI_PCI_ATTRIBUTE_MEMORY_DISABLE
 0x1000

	)

95 
	#EFI_PCI_ATTRIBUTE_DUAL_ADDRESS_CYCLE
 0x8000

	)

96 
	#EFI_PCI_ATTRIBUTE_ISA_IO_16
 0x10000

	)

97 
	#EFI_PCI_ATTRIBUTE_VGA_PALETTE_IO_16
 0x20000

	)

98 
	#EFI_PCI_ATTRIBUTE_VGA_IO_16
 0x40000

	)

100 
	#EFI_PCI_ATTRIBUTE_VALID_FOR_ALLOCATE_BUFFER
 (
EFI_PCI_ATTRIBUTE_MEMORY_WRITE_COMBINE
 | 
EFI_PCI_ATTRIBUTE_MEMORY_CACHED
 | 
EFI_PCI_ATTRIBUTE_DUAL_ADDRESS_CYCLE
)

	)

102 
	#EFI_PCI_ATTRIBUTE_INVALID_FOR_ALLOCATE_BUFFER
 (~
EFI_PCI_ATTRIBUTE_VALID_FOR_ALLOCATE_BUFFER
)

	)

104 
	#EFI_PCI_ADDRESS
(
bus
, 
dev
, 
func
, 
ªg
Ë\

	)

105 (
	gUINT64
) ( \

106 (((
	gUINTN
Ë
	gbus
) << 24) | \

107 (((
	gUINTN
Ë
	gdev
) << 16) | \

108 (((
	gUINTN
Ë
	gfunc
) << 8) | \

109 (((
	gUINTN
Ë(
	gªg
)Ë< 256 ? ((UINTNË‘eg)Ë: (
UINT64
Ë(
LShi·U64
 ((UINT64Ë(
ªg
), 32))))

112 
UINT8
 
	mRegi°î
;

113 
UINT8
 
	mFun˘i⁄
;

114 
UINT8
 
	mDevi˚
;

115 
UINT8
 
	mBus
;

116 
UINT32
 
	mExãndedRegi°î
;

117 } 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_PCI_ADDRESS
;

138 
	gEFI_STATUS


139 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_POLL_IO_MEM
)(

140 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

141 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_WIDTH
 
	tWidth
,

142 
	tIN
 
	tUINT64
 
	tAddªss
,

143 
	tIN
 
	tUINT64
 
	tMask
,

144 
	tIN
 
	tUINT64
 
	tVÆue
,

145 
	tIN
 
	tUINT64
 
	tDñay
,

146 
	tOUT
 
	tUINT64
 *
	tResu…


165 
	gEFI_STATUS


166 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_IO_MEM
)(

167 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

168 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_WIDTH
 
	tWidth
,

169 
	tIN
 
	tUINT64
 
	tAddªss
,

170 
	tIN
 
	tUINTN
 
	tCou¡
,

171 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


178 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_IO_MEM
 
	mRód
;

182 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_IO_MEM
 
	mWrôe
;

183 } 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ACCESS
;

201 
	gEFI_STATUS


202 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_COPY_MEM
)(

203 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

204 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_WIDTH
 
	tWidth
,

205 
	tIN
 
	tUINT64
 
	tDe°Addªss
,

206 
	tIN
 
	tUINT64
 
	tSrcAddªss
,

207 
	tIN
 
	tUINTN
 
	tCou¡


231 
	gEFI_STATUS


232 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_MAP
)(

233 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

234 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_OPERATION
 
	tO≥øti⁄
,

235 
	tIN
 
	tVOID
 *
	tHo°Addªss
,

236 
	tIN
 
	tOUT
 
	tUINTN
 *
	tNumbîOfByãs
,

237 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tDevi˚Addªss
,

238 
	tOUT
 
	tVOID
 **
	tM≠pög


253 
	gEFI_STATUS


254 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_UNMAP
)(

255 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

256 
	tIN
 
	tVOID
 *
	tM≠pög


280 
	gEFI_STATUS


281 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ALLOCATE_BUFFER
)(

282 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

283 
	tIN
 
	tEFI_ALLOCATE_TYPE
 
	tTy≥
,

284 
	tIN
 
	tEFI_MEMORY_TYPE
 
	tMem‹yTy≥
,

285 
	tIN
 
	tUINTN
 
	tPages
,

286 
	tIN
 
	tOUT
 
	tVOID
 **
	tHo°Addªss
,

287 
	tIN
 
	tUINT64
 
	tAâribuãs


303 
	gEFI_STATUS


304 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_FREE_BUFFER
)(

305 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

306 
	tIN
 
	tUINTN
 
	tPages
,

307 
	tIN
 
	tVOID
 *
	tHo°Addªss


322 
	gEFI_STATUS


323 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_FLUSH
)(

324 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis


346 
	gEFI_STATUS


347 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_GET_ATTRIBUTES
)(

348 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

349 
	tOUT
 
	tUINT64
 *
	tSuµ‹ts
,

350 
	tOUT
 
	tUINT64
 *
	tAâribuãs


375 
	gEFI_STATUS


376 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_SET_ATTRIBUTES
)(

377 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

378 
	tIN
 
	tUINT64
 
	tAâribuãs
,

379 
	tIN
 
	tOUT
 
	tUINT64
 *
	tResour˚Ba£
,

380 
	tIN
 
	tOUT
 
	tUINT64
 *
	tResour˚Lígth


398 
	gEFI_STATUS


399 (
	tEFIAPI
 *
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_CONFIGURATION
)(

400 
	tIN
 
	tEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 *
	tThis
,

401 
	tOUT
 
	tVOID
 **
	tResour˚s


408 
	s_EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL
 {

412 
EFI_HANDLE
 
	mP¨ítH™dÀ
;

413 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_POLL_IO_MEM
 
	mPﬁlMem
;

414 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_POLL_IO_MEM
 
	mPﬁlIo
;

415 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ACCESS
 
	mMem
;

416 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ACCESS
 
	mIo
;

417 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ACCESS
 
	mPci
;

418 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_COPY_MEM
 
	mC›yMem
;

419 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_MAP
 
	mM≠
;

420 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_UNMAP
 
	mUnm≠
;

421 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_ALLOCATE_BUFFER
 
	mAŒoˇãBuf„r
;

422 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_FREE_BUFFER
 
	mFªeBuf„r
;

423 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_FLUSH
 
	mFlush
;

424 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_GET_ATTRIBUTES
 
	mGëAâribuãs
;

425 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_SET_ATTRIBUTES
 
	mSëAâribuãs
;

426 
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL_CONFIGURATION
 
	mC⁄figuøti⁄
;

431 
UINT32
 
	mSegmítNumbî
;

434 
EFI_GUID
 
gEfiPciRoŸBridgeIoPrŸocﬁGuid
;

	@PiPcd.h

22 #i‚de‡
__PI_PCD_H__


23 
	#__PI_PCD_H__


	)

25 
EFI_GUID
 
gEfiPcdPrŸocﬁGuid
;

27 
	#EFI_PCD_PROTOCOL_GUID
 \

	)

30 
	#EFI_PCD_INVALID_TOKEN_NUMBER
 ((
UINTN
Ë0)

	)

48 
	gVOID


49 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_SKU
)(

50 
	tIN
 
	tUINTN
 
	tSkuId


63 
	gUINT8


64 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_8
)(

65 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

66 
	tIN
 
	tUINTN
 
	tTokíNumbî


79 
	gUINT16


80 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_16
)(

81 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

82 
	tIN
 
	tUINTN
 
	tTokíNumbî


95 
	gUINT32


96 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_32
)(

97 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

98 
	tIN
 
	tUINTN
 
	tTokíNumbî


112 
	gUINT64


113 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_64
)(

114 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

115 
	tIN
 
	tUINTN
 
	tTokíNumbî


129 
	gVOID
 *

130 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_POINTER
)(

131 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

132 
	tIN
 
	tUINTN
 
	tTokíNumbî


145 
	gBOOLEAN


146 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_BOOLEAN
)(

147 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

148 
	tIN
 
	tUINTN
 
	tTokíNumbî


161 
	gUINTN


162 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_SIZE
)(

163 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

164 
	tIN
 
	tUINTN
 
	tTokíNumbî


184 
	gEFI_STATUS


185 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_8
)(

186 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

187 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

188 
	tIN
 
	tUINT8
 
	tVÆue


208 
	gEFI_STATUS


209 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_16
)(

210 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

211 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

212 
	tIN
 
	tUINT16
 
	tVÆue


232 
	gEFI_STATUS


233 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_32
)(

234 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

235 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

236 
	tIN
 
	tUINT32
 
	tVÆue


256 
	gEFI_STATUS


257 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_64
)(

258 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

259 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

260 
	tIN
 
	tUINT64
 
	tVÆue


283 
	gEFI_STATUS


284 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_POINTER
)(

285 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

286 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

287 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSizeOfVÆue
,

288 
	tIN
 
	tVOID
 *
	tBuf„r


308 
	gEFI_STATUS


309 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_SET_BOOLEAN
)(

310 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

311 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

312 
	tIN
 
	tBOOLEAN
 
	tVÆue


316 
	gVOID


317 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_CALLBACK
)(

318 
	tIN
 
	tEFI_GUID
 *
	tGuid
 
	tOPTIONAL
,

319 
	tIN
 
	tUINTN
 
	tCÆlBackTokí
,

320 
	tIN
 
	tOUT
 
	tVOID
 *
	tTokíD©a
,

321 
	tIN
 
	tUINTN
 
	tTokíD©aSize


335 
	gEFI_STATUS


336 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_CALLBACK_ON_SET
)(

337 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
 
	tOPTIONAL
,

338 
	tIN
 
	tUINTN
 
	tCÆlBackTokí
,

339 
	tIN
 
	tEFI_PCD_PROTOCOL_CALLBACK
 
	tCÆlBackFun˘i⁄


353 
	gEFI_STATUS


354 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_CANCEL_CALLBACK
)(

355 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
 
	tOPTIONAL
,

356 
	tIN
 
	tUINTN
 
	tCÆlBackTokí
,

357 
	tIN
 
	tEFI_PCD_PROTOCOL_CALLBACK
 
	tCÆlBackFun˘i⁄


372 
	gEFI_STATUS


373 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_NEXT_TOKEN
)(

374 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
, 
	tOPTIONAL


375 
	tIN
 
	tUINTN
 *
	tTokíNumbî


392 
	gEFI_STATUS


393 (
	tEFIAPI
 *
	tEFI_PCD_PROTOCOL_GET_NEXT_TOKEN_SPACE
)(

394 
	tIN
 
	tOUT
 
	tCONST
 
	tEFI_GUID
 **
	tGuid


397 
	s_EFI_PCD_PROTOCOL
 {

398 
EFI_PCD_PROTOCOL_SET_SKU
 
	mSëSku
;

399 
EFI_PCD_PROTOCOL_GET_8
 
	mGë8
;

400 
EFI_PCD_PROTOCOL_GET_16
 
	mGë16
;

401 
EFI_PCD_PROTOCOL_GET_32
 
	mGë32
;

402 
EFI_PCD_PROTOCOL_GET_64
 
	mGë64
;

403 
EFI_PCD_PROTOCOL_GET_POINTER
 
	mGëPå
;

404 
EFI_PCD_PROTOCOL_GET_BOOLEAN
 
	mGëBoﬁ
;

405 
EFI_PCD_PROTOCOL_GET_SIZE
 
	mGëSize
;

406 
EFI_PCD_PROTOCOL_SET_8
 
	mSë8
;

407 
EFI_PCD_PROTOCOL_SET_16
 
	mSë16
;

408 
EFI_PCD_PROTOCOL_SET_32
 
	mSë32
;

409 
EFI_PCD_PROTOCOL_SET_64
 
	mSë64
;

410 
EFI_PCD_PROTOCOL_SET_POINTER
 
	mSëPå
;

411 
EFI_PCD_PROTOCOL_SET_BOOLEAN
 
	mSëBoﬁ
;

412 
EFI_PCD_PROTOCOL_CALLBACK_ON_SET
 
	mCÆlbackOnSë
;

413 
EFI_PCD_PROTOCOL_CANCEL_CALLBACK
 
	mC™˚lCÆlback
;

414 
EFI_PCD_PROTOCOL_GET_NEXT_TOKEN
 
	mGëNextTokí
;

415 
EFI_PCD_PROTOCOL_GET_NEXT_TOKEN_SPACE
 
	mGëNextTokíS∑˚
;

416 } 
	tEFI_PCD_PROTOCOL
;

	@PiPcdInfo.h

13 #i‚de‡
__PI_PCD_INFO_H__


14 
	#__PI_PCD_INFO_H__


	)

16 
EFI_GUID
 
gEfiGëPcdInfoPrŸocﬁGuid
;

18 
	#EFI_GET_PCD_INFO_PROTOCOL_GUID
 \

	)

24 
_EFI_GET_PCD_INFO_PROTOCOL
 
	tEFI_GET_PCD_INFO_PROTOCOL
;

40 
	gEFI_STATUS


41 (
	tEFIAPI
 *
	tEFI_GET_PCD_INFO_PROTOCOL_GET_INFO
) (

42 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

43 
	tIN
 
	tUINTN
 
	tTokíNumbî
,

44 
	tOUT
 
	tEFI_PCD_INFO
 *
	tPcdInfo


55 
	gUINTN


56 (
	tEFIAPI
 *
	tEFI_GET_PCD_INFO_PROTOCOL_GET_SKU
) (

57 
	tVOID


65 
	s_EFI_GET_PCD_INFO_PROTOCOL
 {

69 
EFI_GET_PCD_INFO_PROTOCOL_GET_INFO
 
	mGëInfo
;

73 
EFI_GET_PCD_INFO_PROTOCOL_GET_SKU
 
	mGëSku
;

	@Pkcs7Verify.h

14 #i‚de‡
__EFI_PKCS7_VERIFY_PROTOCOL_H__


15 
	#__EFI_PKCS7_VERIFY_PROTOCOL_H__


	)

17 
	~<Guid/ImageAuthítiˇti⁄.h
>

22 
	#EFI_PKCS7_VERIFY_PROTOCOL_GUID
 \

	)

27 
_EFI_PKCS7_VERIFY_PROTOCOL
 
	tEFI_PKCS7_VERIFY_PROTOCOL
;

117 
	gEFI_STATUS


118 (
	tEFIAPI
 *
	tEFI_PKCS7_VERIFY_BUFFER
) (

119 
	tIN
 
	tEFI_PKCS7_VERIFY_PROTOCOL
 *
	tThis
,

120 
	tIN
 
	tVOID
 *
	tSig√dD©a
,

121 
	tIN
 
	tUINTN
 
	tSig√dD©aSize
,

122 
	tIN
 
	tVOID
 *
	tInD©a
 
	tOPTIONAL
,

123 
	tIN
 
	tUINTN
 
	tInD©aSize
,

124 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tAŒowedDb
,

125 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tRevokedDb
 
	tOPTIONAL
,

126 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tTimeSèmpDb
 
	tOPTIONAL
,

127 
	tOUT
 
	tVOID
 *
	tC⁄ã¡
 
	tOPTIONAL
,

128 
	tIN
 
	tOUT
 
	tUINTN
 *
	tC⁄ã¡Size


198 
	gEFI_STATUS


199 (
	tEFIAPI
 *
	tEFI_PKCS7_VERIFY_SIGNATURE
) (

200 
	tIN
 
	tEFI_PKCS7_VERIFY_PROTOCOL
 *
	tThis
,

201 
	tIN
 
	tVOID
 *
	tSig«tuª
,

202 
	tIN
 
	tUINTN
 
	tSig«tuªSize
,

203 
	tIN
 
	tVOID
 *
	tInHash
,

204 
	tIN
 
	tUINTN
 
	tInHashSize
,

205 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tAŒowedDb
,

206 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tRevokedDb
 
	tOPTIONAL
,

207 
	tIN
 
	tEFI_SIGNATURE_LIST
 **
	tTimeSèmpDb
 
	tOPTIONAL


216 
	s_EFI_PKCS7_VERIFY_PROTOCOL
 {

217 
EFI_PKCS7_VERIFY_BUFFER
 
	mVîifyBuf„r
;

218 
EFI_PKCS7_VERIFY_SIGNATURE
 
	mVîifySig«tuª
;

221 
EFI_GUID
 
gEfiPkcs7VîifyPrŸocﬁGuid
;

	@PlatformDriverOverride.h

9 #i‚de‡
__EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL_H__


10 
	#__EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL_H__


	)

15 
	#EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL_GUID
 \

	)

20 
_EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
 
	tEFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_PLATFORM_DRIVER_OVERRIDE_GET_DRIVER
)(

48 
	tIN
 
	tEFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
 *
	tThis
,

49 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

50 
	tIN
 
	tOUT
 
	tEFI_HANDLE
 *
	tDrivîImageH™dÀ


74 
	gEFI_STATUS


75 (
	tEFIAPI
 *
	tEFI_PLATFORM_DRIVER_OVERRIDE_GET_DRIVER_PATH
)(

76 
	tIN
 
	tEFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
 *
	tThis
,

77 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

78 
	tIN
 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDrivîImageP©h


108 
	gEFI_STATUS


109 (
	tEFIAPI
 *
	tEFI_PLATFORM_DRIVER_OVERRIDE_DRIVER_LOADED
)(

110 
	tIN
 
	tEFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
 *
	tThis
,

111 
	tIN
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

112 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDrivîImageP©h
,

113 
	tIN
 
	tEFI_HANDLE
 
	tDrivîImageH™dÀ


126 
	s_EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
 {

127 
EFI_PLATFORM_DRIVER_OVERRIDE_GET_DRIVER
 
	mGëDrivî
;

128 
EFI_PLATFORM_DRIVER_OVERRIDE_GET_DRIVER_PATH
 
	mGëDrivîP©h
;

129 
EFI_PLATFORM_DRIVER_OVERRIDE_DRIVER_LOADED
 
	mDrivîLﬂded
;

132 
EFI_GUID
 
gEfiPœtf‹mDrivîOvîridePrŸocﬁGuid
;

	@PlatformToDriverConfiguration.h

13 #i‚de‡
__PLATFORM_TO_DRIVER_CONFIGUARTION_H__


14 
	#__PLATFORM_TO_DRIVER_CONFIGUARTION_H__


	)

16 
	#EFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL_GUID
 \

	)

20 
_EFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL
 
	tEFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL
;

122 
	gEFI_STATUS


123 (
	tEFIAPI
 *
	tEFI_PLATFORM_TO_DRIVER_CONFIGURATION_QUERY
)(

124 
	tIN
 
	tCONST
 
	tEFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL
 *
	tThis
,

125 
	tIN
 
	tCONST
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

126 
	tIN
 
	tCONST
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

127 
	tIN
 
	tCONST
 
	tUINTN
 *
	tIn°™˚
,

128 
	tOUT
 
	tEFI_GUID
 **
	tP¨amëîTy≥Guid
,

129 
	tOUT
 
	tVOID
 **
	tP¨amëîBlock
,

130 
	tOUT
 
	tUINTN
 *
	tP¨amëîBlockSize


144 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄N⁄e
 = 0,

153 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄St›C⁄åﬁÀr
 = 1,

163 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄Re°¨tC⁄åﬁÀr
 = 2,

174 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄Re°¨tPœtf‹m
 = 3,

187 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄NvømFaûed
 = 4,

201 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄Unsuµ‹ãdGuid
 = 5,

202 
	mEfiPœtf‹mC⁄figuøti⁄A˘i⁄Maximum


203 } 
	tEFI_PLATFORM_CONFIGURATION_ACTION
;

259 
	gEFI_STATUS


260 (
	tEFIAPI
 *
	tEFI_PLATFORM_TO_DRIVER_CONFIGURATION_RESPONSE
)(

261 
	tIN
 
	tCONST
 
	tEFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL
 *
	tThis
,

262 
	tIN
 
	tCONST
 
	tEFI_HANDLE
 
	tC⁄åﬁÀrH™dÀ
,

263 
	tIN
 
	tCONST
 
	tEFI_HANDLE
 
	tChûdH™dÀ
 
	tOPTIONAL
,

264 
	tIN
 
	tCONST
 
	tUINTN
 *
	tIn°™˚
,

265 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tP¨amëîTy≥Guid
,

266 
	tIN
 
	tCONST
 
	tVOID
 *
	tP¨amëîBlock
,

267 
	tIN
 
	tCONST
 
	tUINTN
 
	tP¨amëîBlockSize
 ,

268 
	tIN
 
	tCONST
 
	tEFI_PLATFORM_CONFIGURATION_ACTION
 
	tC⁄figuøti⁄A˘i⁄


284 
	s_EFI_PLATFORM_TO_DRIVER_CONFIGURATION_PROTOCOL
 {

285 
EFI_PLATFORM_TO_DRIVER_CONFIGURATION_QUERY
 
	mQuîy
;

286 
EFI_PLATFORM_TO_DRIVER_CONFIGURATION_RESPONSE
 
	mRe•⁄£
;

291 
	#EFI_PLATFORM_TO_DRIVER_CONFIGURATION_CLP_GUID
 \

	)

307 
CHAR8
 *
	mCLPComm™d
;

312 
UINT32
 
	mCLPComm™dLígth
;

313 
CHAR8
 *
	mCLPRëu∫Såög
;

327 
UINT32
 
	mCLPRëu∫SåögLígth
;

328 
UINT8
 
	mCLPCmdSètus
;

333 
UINT8
 
	mCLPEº‹VÆue
;

335 
UINT16
 
	mCLPMsgCode
;

341 } 
	tEFI_CONFIGURE_CLP_PARAMETER_BLK
;

345 
EFI_GUID
 
gEfiPœtf‹mToDrivîC⁄figuøti⁄CÕGuid
;

347 
EFI_GUID
 
gEfiPœtf‹mToDrivîC⁄figuøti⁄PrŸocﬁGuid
;

	@PxeBaseCode.h

14 #i‚de‡
__PXE_BASE_CODE_PROTOCOL_H__


15 
	#__PXE_BASE_CODE_PROTOCOL_H__


	)

20 
	#EFI_PXE_BASE_CODE_PROTOCOL_GUID
 \

	)

25 
_EFI_PXE_BASE_CODE_PROTOCOL
 
	tEFI_PXE_BASE_CODE_PROTOCOL
;

30 
EFI_PXE_BASE_CODE_PROTOCOL
 
	tEFI_PXE_BASE_CODE
;

35 
	#DEFAULT_TTL
 16

	)

36 
	#DEFAULT_ToS
 0

	)

42 
UINT8
 
	mTy≥
;

43 
UINT8
 
	mCode
;

44 
UINT16
 
	mChecksum
;

46 
UINT32
 
	mª£rved
;

47 
UINT32
 
	mMtu
;

48 
UINT32
 
	mPoöãr
;

50 
UINT16
 
	mIdítifõr
;

51 
UINT16
 
	mSequí˚
;

52 } 
	mEcho
;

53 } 
	mu
;

54 
UINT8
 
	mD©a
[494];

55 } 
	tEFI_PXE_BASE_CODE_ICMP_ERROR
;

61 
UINT8
 
	mEº‹Code
;

62 
CHAR8
 
	mEº‹Såög
[127];

63 } 
	tEFI_PXE_BASE_CODE_TFTP_ERROR
;

68 
	#EFI_PXE_BASE_CODE_MAX_IPCNT
 8

	)

74 
UINT8
 
	mFûãrs
;

75 
UINT8
 
	mIpC¡
;

76 
UINT16
 
	mª£rved
;

77 
EFI_IP_ADDRESS
 
	mIpLi°
[
EFI_PXE_BASE_CODE_MAX_IPCNT
];

78 } 
	tEFI_PXE_BASE_CODE_IP_FILTER
;

80 
	#EFI_PXE_BASE_CODE_IP_FILTER_STATION_IP
 0x0001

	)

81 
	#EFI_PXE_BASE_CODE_IP_FILTER_BROADCAST
 0x0002

	)

82 
	#EFI_PXE_BASE_CODE_IP_FILTER_PROMISCUOUS
 0x0004

	)

83 
	#EFI_PXE_BASE_CODE_IP_FILTER_PROMISCUOUS_MULTICAST
 0x0008

	)

89 
EFI_IP_ADDRESS
 
	mIpAddr
;

90 
EFI_MAC_ADDRESS
 
	mMacAddr
;

91 } 
	tEFI_PXE_BASE_CODE_ARP_ENTRY
;

97 
EFI_IP_ADDRESS
 
	mIpAddr
;

98 
EFI_IP_ADDRESS
 
	mSub√tMask
;

99 
EFI_IP_ADDRESS
 
	mGwAddr
;

100 } 
	tEFI_PXE_BASE_CODE_ROUTE_ENTRY
;

105 
UINT16
 
	tEFI_PXE_BASE_CODE_UDP_PORT
;

107 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_ANY_SRC_IP
 0x0001

	)

108 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_ANY_SRC_PORT
 0x0002

	)

109 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_ANY_DEST_IP
 0x0004

	)

110 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_ANY_DEST_PORT
 0x0008

	)

111 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_USE_FILTER
 0x0010

	)

112 
	#EFI_PXE_BASE_CODE_UDP_OPFLAGS_MAY_FRAGMENT
 0x0020

	)

117 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_BOOTSTRAP
 0

	)

118 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_MS_WINNT_RIS
 1

	)

119 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_INTEL_LCM
 2

	)

120 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_DOSUNDI
 3

	)

121 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_NEC_ESMPRO
 4

	)

122 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_IBM_WSoD
 5

	)

123 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_IBM_LCCM
 6

	)

124 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_CA_UNICENTER_TNG
 7

	)

125 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_HP_OPENVIEW
 8

	)

126 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_ALTIRIS_9
 9

	)

127 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_ALTIRIS_10
 10

	)

128 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_ALTIRIS_11
 11

	)

129 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_NOT_USED_12
 12

	)

130 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_REDHAT_INSTALL
 13

	)

131 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_REDHAT_BOOT
 14

	)

132 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_REMBO
 15

	)

133 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_BEOBOOT
 16

	)

139 
	#EFI_PXE_BASE_CODE_BOOT_TYPE_PXETEST
 65535

	)

141 
	#EFI_PXE_BASE_CODE_BOOT_LAYER_MASK
 0x7FFF

	)

142 
	#EFI_PXE_BASE_CODE_BOOT_LAYER_INITIAL
 0x0000

	)

150 #i‡
deföed
 (
MDE_CPU_IA32
)

151 
	#EFI_PXE_CLIENT_SYSTEM_ARCHITECTURE
 0x0006

	)

152 #ñi‡
deföed
 (
MDE_CPU_X64
)

153 
	#EFI_PXE_CLIENT_SYSTEM_ARCHITECTURE
 0x0007

	)

154 #ñi‡
deföed
 (
MDE_CPU_ARM
)

155 
	#EFI_PXE_CLIENT_SYSTEM_ARCHITECTURE
 0x000A

	)

156 #ñi‡
deföed
 (
MDE_CPU_AARCH64
)

157 
	#EFI_PXE_CLIENT_SYSTEM_ARCHITECTURE
 0x000B

	)

158 #ñi‡
deföed
 (
MDE_CPU_RISCV64
)

159 
	#EFI_PXE_CLIENT_SYSTEM_ARCHITECTURE
 0x001B

	)

167 
UINT16
 
	mTy≥
;

168 
BOOLEAN
 
	mAc˚±AnyRe•⁄£
;

169 
UINT8
 
	mRe£rved
;

170 
EFI_IP_ADDRESS
 
	mIpAddr
;

171 } 
	tEFI_PXE_BASE_CODE_SRVLIST
;

177 
BOOLEAN
 
	mU£MCa°
;

178 
BOOLEAN
 
	mU£BCa°
;

179 
BOOLEAN
 
	mU£UCa°
;

180 
BOOLEAN
 
	mMu°U£Li°
;

181 
EFI_IP_ADDRESS
 
	mSîvîMCa°Ip
;

182 
UINT16
 
	mIpC¡
;

183 
EFI_PXE_BASE_CODE_SRVLIST
 
	mSrvLi°
[1];

184 } 
	tEFI_PXE_BASE_CODE_DISCOVER_INFO
;

190 
	mEFI_PXE_BASE_CODE_TFTP_FIRST
,

191 
	mEFI_PXE_BASE_CODE_TFTP_GET_FILE_SIZE
,

192 
	mEFI_PXE_BASE_CODE_TFTP_READ_FILE
,

193 
	mEFI_PXE_BASE_CODE_TFTP_WRITE_FILE
,

194 
	mEFI_PXE_BASE_CODE_TFTP_READ_DIRECTORY
,

195 
	mEFI_PXE_BASE_CODE_MTFTP_GET_FILE_SIZE
,

196 
	mEFI_PXE_BASE_CODE_MTFTP_READ_FILE
,

197 
	mEFI_PXE_BASE_CODE_MTFTP_READ_DIRECTORY
,

198 
	mEFI_PXE_BASE_CODE_MTFTP_LAST


199 } 
	tEFI_PXE_BASE_CODE_TFTP_OPCODE
;

207 
EFI_IP_ADDRESS
 
	mMCa°Ip
;

208 
EFI_PXE_BASE_CODE_UDP_PORT
 
	mCP‹t
;

209 
EFI_PXE_BASE_CODE_UDP_PORT
 
	mSP‹t
;

210 
UINT16
 
	mLi°íTimeout
;

211 
UINT16
 
	mTønsmôTimeout
;

212 } 
	tEFI_PXE_BASE_CODE_MTFTP_INFO
;

218 
UINT8
 
	mBoŸpOpcode
;

219 
UINT8
 
	mBoŸpHwTy≥
;

220 
UINT8
 
	mBoŸpHwAddrLí
;

221 
UINT8
 
	mBoŸpG©eH›s
;

222 
UINT32
 
	mBoŸpIdít
;

223 
UINT16
 
	mBoŸpSec⁄ds
;

224 
UINT16
 
	mBoŸpFœgs
;

225 
UINT8
 
	mBoŸpCiAddr
[4];

226 
UINT8
 
	mBoŸpYiAddr
[4];

227 
UINT8
 
	mBoŸpSiAddr
[4];

228 
UINT8
 
	mBoŸpGiAddr
[4];

229 
UINT8
 
	mBoŸpHwAddr
[16];

230 
UINT8
 
	mBoŸpSrvName
[64];

231 
UINT8
 
	mBoŸpBoŸFûe
[128];

232 
UINT32
 
	mDh˝Magik
;

233 
UINT8
 
	mDh˝O±i⁄s
[56];

234 } 
	tEFI_PXE_BASE_CODE_DHCPV4_PACKET
;

240 
UINT32
 
	mMesßgeTy≥
:8;

241 
UINT32
 
	mTønß˘i⁄Id
:24;

242 
UINT8
 
	mDh˝O±i⁄s
[1024];

243 } 
	tEFI_PXE_BASE_CODE_DHCPV6_PACKET
;

249 
UINT8
 
	mRaw
[1472];

250 
EFI_PXE_BASE_CODE_DHCPV4_PACKET
 
	mDh˝v4
;

251 
EFI_PXE_BASE_CODE_DHCPV6_PACKET
 
	mDh˝v6
;

252 } 
	tEFI_PXE_BASE_CODE_PACKET
;

257 
	#EFI_PXE_BASE_CODE_MAX_ARP_ENTRIES
 8

	)

258 
	#EFI_PXE_BASE_CODE_MAX_ROUTE_ENTRIES
 8

	)

267 
BOOLEAN
 
	mSèπed
;

268 
BOOLEAN
 
	mIpv6AvaûabÀ
;

269 
BOOLEAN
 
	mIpv6Suµ‹ãd
;

270 
BOOLEAN
 
	mUsögIpv6
;

271 
BOOLEAN
 
	mBisSuµ‹ãd
;

272 
BOOLEAN
 
	mBisDëe˘ed
;

273 
BOOLEAN
 
	mAutoAΩ
;

274 
BOOLEAN
 
	mSídGUID
;

275 
BOOLEAN
 
	mDh˝DiscovîVÆid
;

276 
BOOLEAN
 
	mDh˝AckRe˚ived
;

277 
BOOLEAN
 
	mProxyOf„rRe˚ived
;

278 
BOOLEAN
 
	mPxeDiscovîVÆid
;

279 
BOOLEAN
 
	mPxeRïlyRe˚ived
;

280 
BOOLEAN
 
	mPxeBisRïlyRe˚ived
;

281 
BOOLEAN
 
	mIcmpEº‹Re˚ived
;

282 
BOOLEAN
 
	mT·pEº‹Re˚ived
;

283 
BOOLEAN
 
	mMakeCÆlbacks
;

284 
UINT8
 
	mTTL
;

285 
UINT8
 
	mToS
;

286 
EFI_IP_ADDRESS
 
	mSèti⁄Ip
;

287 
EFI_IP_ADDRESS
 
	mSub√tMask
;

288 
EFI_PXE_BASE_CODE_PACKET
 
	mDh˝Discovî
;

289 
EFI_PXE_BASE_CODE_PACKET
 
	mDh˝Ack
;

290 
EFI_PXE_BASE_CODE_PACKET
 
	mProxyOf„r
;

291 
EFI_PXE_BASE_CODE_PACKET
 
	mPxeDiscovî
;

292 
EFI_PXE_BASE_CODE_PACKET
 
	mPxeRïly
;

293 
EFI_PXE_BASE_CODE_PACKET
 
	mPxeBisRïly
;

294 
EFI_PXE_BASE_CODE_IP_FILTER
 
	mIpFûãr
;

295 
UINT32
 
	mAΩCacheE¡rõs
;

296 
EFI_PXE_BASE_CODE_ARP_ENTRY
 
	mAΩCache
[
EFI_PXE_BASE_CODE_MAX_ARP_ENTRIES
];

297 
UINT32
 
	mRouãTabÀE¡rõs
;

298 
EFI_PXE_BASE_CODE_ROUTE_ENTRY
 
	mRouãTabÀ
[
EFI_PXE_BASE_CODE_MAX_ROUTE_ENTRIES
];

299 
EFI_PXE_BASE_CODE_ICMP_ERROR
 
	mIcmpEº‹
;

300 
EFI_PXE_BASE_CODE_TFTP_ERROR
 
	mT·pEº‹
;

301 } 
	tEFI_PXE_BASE_CODE_MODE
;

372 
	gEFI_STATUS


373 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_START
)(

374 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

375 
	tIN
 
	tBOOLEAN
 
	tU£Ipv6


396 
	gEFI_STATUS


397 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_STOP
)(

398 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis


435 
	gEFI_STATUS


436 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_DHCP
)(

437 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

438 
	tIN
 
	tBOOLEAN
 
	tS‹tOf„rs


485 
	gEFI_STATUS


486 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_DISCOVER
)(

487 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

488 
	tIN
 
	tUINT16
 
	tTy≥
,

489 
	tIN
 
	tUINT16
 *
	tLayî
,

490 
	tIN
 
	tBOOLEAN
 
	tU£Bis
,

491 
	tIN
 
	tEFI_PXE_BASE_CODE_DISCOVER_INFO
 *
	tInfo
 
	tOPTIONAL


566 
	gEFI_STATUS


567 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_MTFTP
)(

568 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

569 
	tIN
 
	tEFI_PXE_BASE_CODE_TFTP_OPCODE
 
	tO≥øti⁄
,

570 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„rPå
 
	tOPTIONAL
,

571 
	tIN
 
	tBOOLEAN
 
	tOvîwrôe
,

572 
	tIN
 
	tOUT
 
	tUINT64
 *
	tBuf„rSize
,

573 
	tIN
 
	tUINTN
 *
	tBlockSize
 
	tOPTIONAL
,

574 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tSîvîIp
,

575 
	tIN
 
	tUINT8
 *
	tFûíame
 
	tOPTIONAL
,

576 
	tIN
 
	tEFI_PXE_BASE_CODE_MTFTP_INFO
 *
	tInfo
 
	tOPTIONAL
,

577 
	tIN
 
	tBOOLEAN
 
	tD⁄tU£Buf„r


618 
	gEFI_STATUS


619 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_UDP_WRITE
)(

620 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

621 
	tIN
 
	tUINT16
 
	tOpFœgs
,

622 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tDe°Ip
,

623 
	tIN
 
	tEFI_PXE_BASE_CODE_UDP_PORT
 *
	tDe°P‹t
,

624 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tG©ewayIp
, 
	tOPTIONAL


625 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tSrcIp
, 
	tOPTIONAL


626 
	tIN
 
	tOUT
 
	tEFI_PXE_BASE_CODE_UDP_PORT
 *
	tSrcP‹t
, 
	tOPTIONAL


627 
	tIN
 
	tUINTN
 *
	tHódîSize
, 
	tOPTIONAL


628 
	tIN
 
	tVOID
 *
	tHódîPå
, 
	tOPTIONAL


629 
	tIN
 
	tUINTN
 *
	tBuf„rSize
,

630 
	tIN
 
	tVOID
 *
	tBuf„rPå


672 
	gEFI_STATUS


673 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_UDP_READ
)(

674 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

675 
	tIN
 
	tUINT16
 
	tOpFœgs
,

676 
	tIN
 
	tOUT
 
	tEFI_IP_ADDRESS
 *
	tDe°Ip
, 
	tOPTIONAL


677 
	tIN
 
	tOUT
 
	tEFI_PXE_BASE_CODE_UDP_PORT
 *
	tDe°P‹t
, 
	tOPTIONAL


678 
	tIN
 
	tOUT
 
	tEFI_IP_ADDRESS
 *
	tSrcIp
, 
	tOPTIONAL


679 
	tIN
 
	tOUT
 
	tEFI_PXE_BASE_CODE_UDP_PORT
 *
	tSrcP‹t
, 
	tOPTIONAL


680 
	tIN
 
	tUINTN
 *
	tHódîSize
, 
	tOPTIONAL


681 
	tIN
 
	tVOID
 *
	tHódîPå
, 
	tOPTIONAL


682 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

683 
	tIN
 
	tVOID
 *
	tBuf„rPå


719 
	gEFI_STATUS


720 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_SET_IP_FILTER
)(

721 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

722 
	tIN
 
	tEFI_PXE_BASE_CODE_IP_FILTER
 *
	tNewFûãr


755 
	gEFI_STATUS


756 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_ARP
)(

757 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

758 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tIpAddr
,

759 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tMacAddr
 
	tOPTIONAL


795 
	gEFI_STATUS


796 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_SET_PARAMETERS
)(

797 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

798 
	tIN
 
	tBOOLEAN
 *
	tNewAutoAΩ
, 
	tOPTIONAL


799 
	tIN
 
	tBOOLEAN
 *
	tNewSídGUID
, 
	tOPTIONAL


800 
	tIN
 
	tUINT8
 *
	tNewTTL
, 
	tOPTIONAL


801 
	tIN
 
	tUINT8
 *
	tNewToS
, 
	tOPTIONAL


802 
	tIN
 
	tBOOLEAN
 *
	tNewMakeCÆlback
 
	tOPTIONAL


829 
	gEFI_STATUS


830 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_SET_STATION_IP
)(

831 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

832 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tNewSèti⁄Ip
, 
	tOPTIONAL


833 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tNewSub√tMask
 
	tOPTIONAL


868 
	gEFI_STATUS


869 (
	tEFIAPI
 *
	tEFI_PXE_BASE_CODE_SET_PACKETS
)(

870 
	tIN
 
	tEFI_PXE_BASE_CODE_PROTOCOL
 *
	tThis
,

871 
	tBOOLEAN
 *
	tNewDh˝DiscovîVÆid
, 
	tOPTIONAL


872 
	tBOOLEAN
 *
	tNewDh˝AckRe˚ived
, 
	tOPTIONAL


873 
	tBOOLEAN
 *
	tNewProxyOf„rRe˚ived
, 
	tOPTIONAL


874 
	tBOOLEAN
 *
	tNewPxeDiscovîVÆid
, 
	tOPTIONAL


875 
	tBOOLEAN
 *
	tNewPxeRïlyRe˚ived
, 
	tOPTIONAL


876 
	tBOOLEAN
 *
	tNewPxeBisRïlyRe˚ived
, 
	tOPTIONAL


877 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewDh˝Discovî
, 
	tOPTIONAL


878 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewDh˝Ack
, 
	tOPTIONAL


879 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewProxyOf„r
, 
	tOPTIONAL


880 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewPxeDiscovî
, 
	tOPTIONAL


881 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewPxeRïly
, 
	tOPTIONAL


882 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tNewPxeBisRïly
 
	tOPTIONAL


888 
	#EFI_PXE_BASE_CODE_PROTOCOL_REVISION
 0x00010000

	)

893 
	#EFI_PXE_BASE_CODE_INTERFACE_REVISION
 
EFI_PXE_BASE_CODE_PROTOCOL_REVISION


	)

903 
	s_EFI_PXE_BASE_CODE_PROTOCOL
 {

909 
UINT64
 
	mRevisi⁄
;

910 
EFI_PXE_BASE_CODE_START
 
	mSèπ
;

911 
EFI_PXE_BASE_CODE_STOP
 
	mSt›
;

912 
EFI_PXE_BASE_CODE_DHCP
 
	mDh˝
;

913 
EFI_PXE_BASE_CODE_DISCOVER
 
	mDiscovî
;

914 
EFI_PXE_BASE_CODE_MTFTP
 
	mMt·p
;

915 
EFI_PXE_BASE_CODE_UDP_WRITE
 
	mUdpWrôe
;

916 
EFI_PXE_BASE_CODE_UDP_READ
 
	mUdpRód
;

917 
EFI_PXE_BASE_CODE_SET_IP_FILTER
 
	mSëIpFûãr
;

918 
EFI_PXE_BASE_CODE_ARP
 
	mAΩ
;

919 
EFI_PXE_BASE_CODE_SET_PARAMETERS
 
	mSëP¨amëîs
;

920 
EFI_PXE_BASE_CODE_SET_STATION_IP
 
	mSëSèti⁄Ip
;

921 
EFI_PXE_BASE_CODE_SET_PACKETS
 
	mSëPackës
;

925 
EFI_PXE_BASE_CODE_MODE
 *
	mMode
;

928 
EFI_GUID
 
gEfiPxeBa£CodePrŸocﬁGuid
;

	@PxeBaseCodeCallBack.h

13 #i‚de‡
_PXE_BASE_CODE_CALLBACK_H_


14 
	#_PXE_BASE_CODE_CALLBACK_H_


	)

19 
	#EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL_GUID
 \

	)

27 
	#EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL_REVISION
 0x00010000

	)

32 
	#EFI_PXE_BASE_CODE_CALLBACK_INTERFACE_REVISION
 \

	)

33 
EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL_REVISION


38 
_EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL
 
	tEFI_PXE_BASE_CODE_CALLBACK_PROTOCOL
;

43 
EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL
 
	tEFI_PXE_BASE_CODE_CALLBACK
;

49 
	mEFI_PXE_BASE_CODE_FUNCTION_FIRST
,

50 
	mEFI_PXE_BASE_CODE_FUNCTION_DHCP
,

51 
	mEFI_PXE_BASE_CODE_FUNCTION_DISCOVER
,

52 
	mEFI_PXE_BASE_CODE_FUNCTION_MTFTP
,

53 
	mEFI_PXE_BASE_CODE_FUNCTION_UDP_WRITE
,

54 
	mEFI_PXE_BASE_CODE_FUNCTION_UDP_READ
,

55 
	mEFI_PXE_BASE_CODE_FUNCTION_ARP
,

56 
	mEFI_PXE_BASE_CODE_FUNCTION_IGMP
,

57 
	mEFI_PXE_BASE_CODE_PXE_FUNCTION_LAST


58 } 
	tEFI_PXE_BASE_CODE_FUNCTION
;

64 
	mEFI_PXE_BASE_CODE_CALLBACK_STATUS_FIRST
,

65 
	mEFI_PXE_BASE_CODE_CALLBACK_STATUS_CONTINUE
,

66 
	mEFI_PXE_BASE_CODE_CALLBACK_STATUS_ABORT
,

67 
	mEFI_PXE_BASE_CODE_CALLBACK_STATUS_LAST


68 } 
	tEFI_PXE_BASE_CODE_CALLBACK_STATUS
;

98 
	gEFI_PXE_BASE_CODE_CALLBACK_STATUS


99 (
	tEFIAPI
 *
	tEFI_PXE_CALLBACK
)(

100 
	tIN
 
	tEFI_PXE_BASE_CODE_CALLBACK_PROTOCOL
 *
	tThis
,

101 
	tIN
 
	tEFI_PXE_BASE_CODE_FUNCTION
 
	tFun˘i⁄
,

102 
	tIN
 
	tBOOLEAN
 
	tRe˚ived
,

103 
	tIN
 
	tUINT32
 
	tPackëLí
,

104 
	tIN
 
	tEFI_PXE_BASE_CODE_PACKET
 *
	tPackë
 
	tOPTIONAL


111 
	s_EFI_PXE_BASE_CODE_CALLBACK_PROTOCOL
 {

117 
UINT64
 
	mRevisi⁄
;

118 
EFI_PXE_CALLBACK
 
	mCÆlback
;

121 
EFI_GUID
 
gEfiPxeBa£CodeCÆlbackPrŸocﬁGuid
;

	@RamDisk.h

12 #i‚de‡
__RAM_DISK_PROTOCOL_H__


13 
	#__RAM_DISK_PROTOCOL_H__


	)

18 
	#EFI_RAM_DISK_PROTOCOL_GUID
 \

	)

24 
_EFI_RAM_DISK_PROTOCOL
 
	tEFI_RAM_DISK_PROTOCOL
;

57 
	gEFI_STATUS


58 (
	tEFIAPI
 *
	tEFI_RAM_DISK_REGISTER_RAMDISK
) (

59 
	tIN
 
	tUINT64
 
	tRamDiskBa£
,

60 
	tIN
 
	tUINT64
 
	tRamDiskSize
,

61 
	tIN
 
	tEFI_GUID
 *
	tRamDiskTy≥
,

62 
	tIN
 
	tEFI_DEVICE_PATH
 *
	tP¨ítDevi˚P©h
 
	tOPTIONAL
,

63 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


82 
	gEFI_STATUS


83 (
	tEFIAPI
 *
	tEFI_RAM_DISK_UNREGISTER_RAMDISK
) (

84 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h


90 
	s_EFI_RAM_DISK_PROTOCOL
 {

91 
EFI_RAM_DISK_REGISTER_RAMDISK
 
	mRegi°î
;

92 
EFI_RAM_DISK_UNREGISTER_RAMDISK
 
	mUƒegi°î
;

98 
EFI_GUID
 
gEfiRamDiskPrŸocﬁGuid
;

	@RealTimeClock.h

19 #i‚de‡
__ARCH_PROTOCOL_REAL_TIME_CLOCK_H__


20 
	#__ARCH_PROTOCOL_REAL_TIME_CLOCK_H__


	)

25 
	#EFI_REAL_TIME_CLOCK_ARCH_PROTOCOL_GUID
 \

	)

28 
EFI_GUID
 
gEfiRólTimeClockArchPrŸocﬁGuid
;

	@RegularExpressionProtocol.h

13 #i‚de‡
__REGULAR_EXPRESSION_PROTOCOL_H__


14 
	#__REGULAR_EXPRESSION_PROTOCOL_H__


	)

16 
	#EFI_REGULAR_EXPRESSION_PROTOCOL_GUID
 \

	)

21 
	#EFI_REGEX_SYNTAX_TYPE_POSIX_EXTENDED_GUID
 \

	)

26 
	#EFI_REGEX_SYNTAX_TYPE_PERL_GUID
 \

	)

31 
	#EFI_REGEX_SYNTAX_TYPE_ECMA_262_GUID
 \

	)

36 
_EFI_REGULAR_EXPRESSION_PROTOCOL
 
	tEFI_REGULAR_EXPRESSION_PROTOCOL
;

40 
CONST
 
CHAR16
 *
	mC≠tuªPå
;

43 
UINTN
 
	mLígth
;

44 } 
	tEFI_REGEX_CAPTURE
;

46 
EFI_GUID
 
	tEFI_REGEX_SYNTAX_TYPE
;

84 
	gEFI_STATUS


85 (
	tEFIAPI
 *
	tEFI_REGULAR_EXPRESSION_GET_INFO
) (

86 
	tIN
 
	tEFI_REGULAR_EXPRESSION_PROTOCOL
 *
	tThis
,

87 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRegExSy¡axTy≥Li°Size
,

88 
	tOUT
 
	tEFI_REGEX_SYNTAX_TYPE
 *
	tRegExSy¡axTy≥Li°


141 
	gEFI_STATUS


142 (
	tEFIAPI
 *
	tEFI_REGULAR_EXPRESSION_MATCH
) (

143 
	tIN
 
	tEFI_REGULAR_EXPRESSION_PROTOCOL
 *
	tThis
,

144 
	tIN
 
	tCHAR16
 *
	tSåög
,

145 
	tIN
 
	tCHAR16
 *
	tP©ã∫
,

146 
	tIN
 
	tEFI_REGEX_SYNTAX_TYPE
 *
	tSy¡axTy≥
, 
	tOPTIONAL


147 
	tOUT
 
	tBOOLEAN
 *
	tResu…
,

148 
	tOUT
 
	tEFI_REGEX_CAPTURE
 **
	tC≠tuªs
, 
	tOPTIONAL


149 
	tOUT
 
	tUINTN
 *
	tC≠tuªsCou¡


152 
	s_EFI_REGULAR_EXPRESSION_PROTOCOL
 {

153 
EFI_REGULAR_EXPRESSION_MATCH
 
	mM©chSåög
;

154 
EFI_REGULAR_EXPRESSION_GET_INFO
 
	mGëInfo
;

157 
EFI_GUID
 
gEfiReguœrEx¥essi⁄PrŸocﬁGuid
;

163 
EFI_GUID
 
gEfiRegexSy¡axTy≥PosixExãndedGuid
;

168 
EFI_GUID
 
gEfiRegexSy¡axTy≥Ecma262Guid
;

173 
EFI_GUID
 
gEfiRegexSy¡axTy≥PîlGuid
;

	@ReportStatusCodeHandler.h

13 #i‚de‡
__REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


14 
	#__REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


	)

16 
	#EFI_RSC_HANDLER_PROTOCOL_GUID
 \

	)

22 
	gEFI_STATUS


23 (
	tEFIAPI
 *
	tEFI_RSC_HANDLER_CALLBACK
)(

24 
	tIN
 
	tEFI_STATUS_CODE_TYPE
 
	tCodeTy≥
,

25 
	tIN
 
	tEFI_STATUS_CODE_VALUE
 
	tVÆue
,

26 
	tIN
 
	tUINT32
 
	tIn°™˚
,

27 
	tIN
 
	tEFI_GUID
 *
	tCÆÀrId
,

28 
	tIN
 
	tEFI_STATUS_CODE_DATA
 *
	tD©a


59 
	gEFI_STATUS


60 (
	tEFIAPI
 *
	tEFI_RSC_HANDLER_REGISTER
)(

61 
	tIN
 
	tEFI_RSC_HANDLER_CALLBACK
 
	tCÆlback
,

62 
	tIN
 
	tEFI_TPL
 
	tT∂


79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_RSC_HANDLER_UNREGISTER
)(

81 
	tIN
 
	tEFI_RSC_HANDLER_CALLBACK
 
	tCÆlback


85 
EFI_RSC_HANDLER_REGISTER
 
	mRegi°î
;

86 
EFI_RSC_HANDLER_UNREGISTER
 
	mUƒegi°î
;

87 } 
	tEFI_RSC_HANDLER_PROTOCOL
;

89 
EFI_GUID
 
gEfiRscH™dÀrPrŸocﬁGuid
;

	@Reset.h

14 #i‚de‡
__ARCH_PROTOCOL_RESET_H__


15 
	#__ARCH_PROTOCOL_RESET_H__


	)

20 
	#EFI_RESET_ARCH_PROTOCOL_GUID
 \

	)

23 
EFI_GUID
 
gEfiRe£tArchPrŸocﬁGuid
;

	@ResetNotification.h

13 #i‚de‡
__EFI_RESET_NOTIFICATION_H__


14 
	#__EFI_RESET_NOTIFICATION_H__


	)

16 
	#EFI_RESET_NOTIFICATION_PROTOCOL_GUID
 \

	)

19 
_EFI_RESET_NOTIFICATION_PROTOCOL
 
	tEFI_RESET_NOTIFICATION_PROTOCOL
;

43 
	gEFI_STATUS


44 (
	tEFIAPI
 *
	tEFI_REGISTER_RESET_NOTIFY
) (

45 
	tIN
 
	tEFI_RESET_NOTIFICATION_PROTOCOL
 *
	tThis
,

46 
	tIN
 
	tEFI_RESET_SYSTEM
 
	tRe£tFun˘i⁄


65 
	gEFI_STATUS


66 (
	tEFIAPI
 *
	tEFI_UNREGISTER_RESET_NOTIFY
) (

67 
	tIN
 
	tEFI_RESET_NOTIFICATION_PROTOCOL
 *
	tThis
,

68 
	tIN
 
	tEFI_RESET_SYSTEM
 
	tRe£tFun˘i⁄


71 
	s_EFI_RESET_NOTIFICATION_PROTOCOL
 {

72 
EFI_REGISTER_RESET_NOTIFY
 
	mRegi°îRe£tNŸify
;

73 
EFI_UNREGISTER_RESET_NOTIFY
 
	mUƒegi°îRe£tNŸify
;

74 } 
	tEFI_RESET_NOTIFICATION_PROTOCOL
;

77 
EFI_GUID
 
gEfiRe£tNŸifiˇti⁄PrŸocﬁGuid
;

	@Rest.h

12 #i‚de‡
__EFI_REST_PROTOCOL_H__


13 
	#__EFI_REST_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/Hâp.h
>

17 
	#EFI_REST_PROTOCOL_GUID
 \

	)

22 
_EFI_REST_PROTOCOL
 
	tEFI_REST_PROTOCOL
;

45 
	gEFI_STATUS


46 (
	tEFIAPI
 *
	tEFI_REST_SEND_RECEIVE
) (

47 
	tIN
 
	tEFI_REST_PROTOCOL
 *
	tThis
,

48 
	tIN
 
	tEFI_HTTP_MESSAGE
 *
	tReque°Mesßge
,

49 
	tOUT
 
	tEFI_HTTP_MESSAGE
 *
	tRe•⁄£Mesßge


68 
	gEFI_STATUS


69 (
	tEFIAPI
 *
	tEFI_REST_GET_TIME
) (

70 
	tIN
 
	tEFI_REST_PROTOCOL
 *
	tThis
,

71 
	tOUT
 
	tEFI_TIME
 *
	tTime


81 
	s_EFI_REST_PROTOCOL
 {

82 
EFI_REST_SEND_RECEIVE
 
	mSídRe˚ive
;

83 
EFI_REST_GET_TIME
 
	mGëSîvi˚Time
;

86 
EFI_GUID
 
gEfiRe°PrŸocﬁGuid
;

	@RestEx.h

18 #i‚de‡
EFI_REST_EX_PROTOCOL_H_


19 
	#EFI_REST_EX_PROTOCOL_H_


	)

21 
	~<PrŸocﬁ/Hâp.h
>

26 
	#EFI_REST_EX_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

31 
	#EFI_REST_EX_PROTOCOL_GUID
 \

	)

36 
_EFI_REST_EX_PROTOCOL
 
	tEFI_REST_EX_PROTOCOL
;

42 
UINT8
 
	mMaj‹
;

43 
UINT8
 
	mMö‹
;

44 } 
	tEFI_REST_EX_SERVICE_INFO_VER
;

50 
UINT32
 
	mLígth
;

51 
EFI_REST_EX_SERVICE_INFO_VER
 
	mRe°Sîvi˚InfoVî
;

52 } 
	tEFI_REST_EX_SERVICE_INFO_HEADER
;

58 
	mEfiRe°ExSîvi˚Un•ecific
 = 1,

59 
	mEfiRe°ExSîvi˚Redfish
,

60 
	mEfiRe°ExSîvi˚Od©a
,

61 
	mEfiRe°ExSîvi˚Víd‹S≥cific
 = 0xff,

62 
	mEfiRe°ExSîvi˚Ty≥Max


63 } 
	tEFI_REST_EX_SERVICE_TYPE
;

69 
	mEfiRe°ExSîvi˚InB™dAc˚ss
 = 1,

70 
	mEfiRe°ExSîvi˚OutOfB™dAc˚ss
 = 2,

71 
	mEfiRe°ExSîvi˚ModeMax


72 } 
	tEFI_REST_EX_SERVICE_ACCESS_MODE
;

78 
	mEfiRe°ExC⁄figHâp
,

79 
	mEfiRe°ExC⁄figUn•ecific
,

80 
	mEfiRe°ExC⁄figTy≥Max


81 } 
	tEFI_REST_EX_CONFIG_TYPE
;

87 
EFI_REST_EX_SERVICE_INFO_HEADER
 
	mEfiRe°ExSîvi˚InfoHódî
;

88 
EFI_REST_EX_SERVICE_TYPE
 
	mRe°Sîvi˚Ty≥
;

89 
EFI_REST_EX_SERVICE_ACCESS_MODE
 
	mRe°Sîvi˚Ac˚ssMode
;

90 
EFI_GUID
 
	mVíd‹Re°Sîvi˚Name
;

91 
UINT32
 
	mVíd‹S≥cificD©aLígth
;

92 
UINT8
 *
	mVíd‹S≥cifcD©a
;

93 
EFI_REST_EX_CONFIG_TYPE
 
	mRe°ExC⁄figTy≥
;

94 
UINT8
 
	mRe°ExC⁄figD©aLígth
;

95 } 
	tEFI_REST_EX_SERVICE_INFO_V_1_0
;

101 
EFI_REST_EX_SERVICE_INFO_HEADER
 
	mEfiRe°ExSîvi˚InfoHódî
;

102 
EFI_REST_EX_SERVICE_INFO_V_1_0
 
	mEfiRe°ExSîvi˚InfoV10
;

103 } 
	tEFI_REST_EX_SERVICE_INFO
;

109 
EFI_HTTP_CONFIG_DATA
 
	mHâpC⁄figD©a
;

110 
UINT32
 
	mSídRe˚iveTimeout
;

111 } 
	tEFI_REST_EX_HTTP_CONFIG_DATA
;

116 
UINT8
 *
	tEFI_REST_EX_CONFIG_DATA
;

122 
EFI_EVENT
 
	mEvít
;

123 
EFI_STATUS
 
	mSètus
;

124 
EFI_HTTP_MESSAGE
 *
	mRe•⁄£Mesßge
;

125 } 
	tEFI_REST_EX_TOKEN
;

147 
	gEFI_STATUS


148 (
	tEFIAPI
 *
	tEFI_REST_SEND_RECEIVE
)(

149 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

150 
	tIN
 
	tEFI_HTTP_MESSAGE
 *
	tReque°Mesßge
,

151 
	tOUT
 
	tEFI_HTTP_MESSAGE
 *
	tRe•⁄£Mesßge


177 
	gEFI_STATUS


178 (
	tEFIAPI
 *
	tEFI_REST_GET_TIME
)(

179 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

180 
	tOUT
 
	tEFI_TIME
 *
	tTime


215 
	gEFI_STATUS


216 (
	tEFIAPI
 *
	tEFI_REST_EX_GET_SERVICE
)(

217 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

218 
	tOUT
 
	tEFI_REST_EX_SERVICE_INFO
 **
	tRe°ExSîvi˚Info


248 
	gEFI_STATUS


249 (
	tEFIAPI
 *
	tEFI_REST_EX_GET_MODE_DATA
)(

250 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

251 
	tOUT
 
	tEFI_REST_EX_CONFIG_DATA
 *
	tRe°ExC⁄figD©a


286 
	gEFI_STATUS


287 (
	tEFIAPI
 *
	tEFI_REST_EX_CONFIGURE
)(

288 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

289 
	tIN
 
	tEFI_REST_EX_CONFIG_DATA
 
	tRe°ExC⁄figD©a


324 
	gEFI_STATUS


325 (
	tEFIAPI
 *
	tEFI_REST_EX_ASYNC_SEND_RECEIVE
)(

326 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

327 
	tIN
 
	tEFI_HTTP_MESSAGE
 *
	tReque°Mesßge
 
	tOPTIONAL
,

328 
	tIN
 
	tEFI_REST_EX_TOKEN
 *
	tRe°ExTokí
,

329 
	tIN
 
	tUINTN
 *
	tTimeOutInMûliSec⁄ds
 
	tOPTIONAL


359 
	gEFI_STATUS


360 (
	tEFIAPI
 *
	tEFI_REST_EX_EVENT_SERVICE
)(

361 
	tIN
 
	tEFI_REST_EX_PROTOCOL
 *
	tThis
,

362 
	tIN
 
	tEFI_HTTP_MESSAGE
 *
	tReque°Mesßge
 
	tOPTIONAL
,

363 
	tIN
 
	tEFI_REST_EX_TOKEN
 *
	tRe°ExTokí


377 
	s_EFI_REST_EX_PROTOCOL
 {

378 
EFI_REST_SEND_RECEIVE
 
	mSídRe˚ive
;

379 
EFI_REST_GET_TIME
 
	mGëSîvi˚Time
;

380 
EFI_REST_EX_GET_SERVICE
 
	mGëSîvi˚
;

381 
EFI_REST_EX_GET_MODE_DATA
 
	mGëModeD©a
;

382 
EFI_REST_EX_CONFIGURE
 
	mC⁄figuª
;

383 
EFI_REST_EX_ASYNC_SEND_RECEIVE
 
	mAyncSídRe˚ive
;

384 
EFI_REST_EX_EVENT_SERVICE
 
	mEvítSîvi˚
;

387 
EFI_GUID
 
gEfiRe°ExSîvi˚BödögPrŸocﬁGuid
;

388 
EFI_GUID
 
gEfiRe°ExPrŸocﬁGuid
;

	@RestJsonStructure.h

13 #i‚de‡
EFI_REST_JSON_STRUCTURE_PROTOCOL_H_


14 
	#EFI_REST_JSON_STRUCTURE_PROTOCOL_H_


	)

19 
	#EFI_REST_JSON_STRUCTURE_PROTOCOL_GUID
 \

	)

24 
_EFI_REST_JSON_STRUCTURE_PROTOCOL
 
	tEFI_REST_JSON_STRUCTURE_PROTOCOL
;

25 
CHAR8
 * 
	tEFI_REST_JSON_RESOURCE_TYPE_DATATYPE
;

34 
	s_EFI_REST_JSON_RESOURCE_TYPE_NAMESPACE
 {

35 
CHAR8
 *
	mResour˚Ty≥Name
;

36 
CHAR8
 *
	mMaj‹Vîsi⁄
;

37 
CHAR8
 *
	mMö‹Vîsi⁄
;

38 
CHAR8
 *
	mEº©aVîsi⁄
;

39 } 
	tEFI_REST_JSON_RESOURCE_TYPE_NAMESPACE
;

46 
	s_EFI_REST_JSON_RESOURCE_TYPE_IDENTIFIER
 {

47 
EFI_REST_JSON_RESOURCE_TYPE_NAMESPACE
 
	mNameS∑˚
;

48 
EFI_REST_JSON_RESOURCE_TYPE_DATATYPE
 
	mD©aTy≥
;

50 } 
	tEFI_REST_JSON_RESOURCE_TYPE_IDENTIFIER
;

55 
	s_EFI_REST_JSON_STRUCTURE_SUPPORTED
 {

56 
LIST_ENTRY
 
	mNextSuµ‹ãdR§cI¡îp
;

57 
EFI_REST_JSON_RESOURCE_TYPE_IDENTIFIER
 
	mRe°Resour˚I¡îp
;

58 } 
	tEFI_REST_JSON_STRUCTURE_SUPPORTED
;

63 
	s_EFI_REST_JSON_STRUCTURE_HEADER
 {

64 
EFI_REST_JSON_RESOURCE_TYPE_IDENTIFIER
 
	mJs⁄R§cIdítifõr
;

68 
VOID
 *
	mJs⁄Såu˘uªPoöãr
;

69 } 
	tEFI_REST_JSON_STRUCTURE_HEADER
;

84 
	gEFI_STATUS


85 (
	tEFIAPI
 *
	tEFI_REST_JSON_STRUCTURE_TO_STRUCTURE
)(

86 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_PROTOCOL
 *
	tThis
,

87 
	tIN
 
	tEFI_REST_JSON_RESOURCE_TYPE_IDENTIFIER
 *
	tJs⁄R§cIdítifõr
 
	tOPTIONAL
,

88 
	tIN
 
	tCHAR8
 *
	tResour˚Js⁄Text
,

89 
	tOUT
 
	tEFI_REST_JSON_STRUCTURE_HEADER
 **
	tJs⁄Såu˘uª


104 
	gEFI_STATUS


105 (
	tEFIAPI
 *
	tEFI_REST_JSON_STRUCTURE_TO_JSON
)(

106 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_PROTOCOL
 *
	tThis
,

107 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_HEADER
 *
	tJs⁄Såu˘uªHódî
,

108 
	tOUT
 
	tCHAR8
 **
	tResour˚Js⁄Text


122 
	gEFI_STATUS


123 (
	tEFIAPI
 *
	tEFI_REST_JSON_STRUCTURE_DESTORY_STRUCTURE
)(

124 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_PROTOCOL
 *
	tThis
,

125 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_HEADER
 *
	tJs⁄Såu˘uªHódî


142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_REST_JSON_STRUCTURE_REGISTER
)(

144 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_PROTOCOL
 *
	tThis
,

145 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_SUPPORTED
 *
	tJs⁄Såu˘uªSuµ‹ãd
,

146 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_TO_STRUCTURE
 
	tToSåu˘uª
,

147 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_TO_JSON
 
	tToJs⁄
,

148 
	tIN
 
	tEFI_REST_JSON_STRUCTURE_DESTORY_STRUCTURE
 
	tDe°roySåu˘uª


154 
	s_EFI_REST_JSON_STRUCTURE_PROTOCOL
 {

155 
EFI_REST_JSON_STRUCTURE_REGISTER
 
	mRegi°î
;

156 
EFI_REST_JSON_STRUCTURE_TO_STRUCTURE
 
	mToSåu˘uª
;

157 
EFI_REST_JSON_STRUCTURE_TO_JSON
 
	mToJs⁄
;

158 
EFI_REST_JSON_STRUCTURE_DESTORY_STRUCTURE
 
	mDe°‹ySåu˘uª
;

	@Rng.h

11 #i‚de‡
__EFI_RNG_PROTOCOL_H__


12 
	#__EFI_RNG_PROTOCOL_H__


	)

17 
	#EFI_RNG_PROTOCOL_GUID
 \

	)

22 
_EFI_RNG_PROTOCOL
 
	tEFI_RNG_PROTOCOL
;

30 
EFI_GUID
 
	tEFI_RNG_ALGORITHM
;

37 
	#EFI_RNG_ALGORITHM_SP800_90_HASH_256_GUID
 \

	)

41 
	#EFI_RNG_ALGORITHM_SP800_90_HMAC_256_GUID
 \

	)

45 
	#EFI_RNG_ALGORITHM_SP800_90_CTR_256_GUID
 \

	)

54 
	#EFI_RNG_ALGORITHM_X9_31_3DES_GUID
 \

	)

58 
	#EFI_RNG_ALGORITHM_X9_31_AES_GUID
 \

	)

66 
	#EFI_RNG_ALGORITHM_RAW
 \

	)

95 
	gEFI_STATUS


96 (
	tEFIAPI
 *
	tEFI_RNG_GET_INFO
) (

97 
	tIN
 
	tEFI_RNG_PROTOCOL
 *
	tThis
,

98 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRNGAlg‹ôhmLi°Size
,

99 
	tOUT
 
	tEFI_RNG_ALGORITHM
 *
	tRNGAlg‹ôhmLi°


125 
	gEFI_STATUS


126 (
	tEFIAPI
 *
	tEFI_RNG_GET_RNG
) (

127 
	tIN
 
	tEFI_RNG_PROTOCOL
 *
	tThis
,

128 
	tIN
 
	tEFI_RNG_ALGORITHM
 *
	tRNGAlg‹ôhm
, 
	tOPTIONAL


129 
	tIN
 
	tUINTN
 
	tRNGVÆueLígth
,

130 
	tOUT
 
	tUINT8
 *
	tRNGVÆue


137 
	s_EFI_RNG_PROTOCOL
 {

138 
EFI_RNG_GET_INFO
 
	mGëInfo
;

139 
EFI_RNG_GET_RNG
 
	mGëRNG
;

142 
EFI_GUID
 
gEfiRngPrŸocﬁGuid
;

143 
EFI_GUID
 
gEfiRngAlg‹ôhmSp80090Hash256Guid
;

144 
EFI_GUID
 
gEfiRngAlg‹ôhmSp80090Hmac256Guid
;

145 
EFI_GUID
 
gEfiRngAlg‹ôhmSp80090Cå256Guid
;

146 
EFI_GUID
 
gEfiRngAlg‹ôhmX9313DesGuid
;

147 
EFI_GUID
 
gEfiRngAlg‹ôhmX931AesGuid
;

148 
EFI_GUID
 
gEfiRngAlg‹ôhmRaw
;

	@Runtime.h

18 #i‚de‡
__ARCH_PROTOCOL_RUNTIME_H__


19 
	#__ARCH_PROTOCOL_RUNTIME_H__


	)

24 
	#EFI_RUNTIME_ARCH_PROTOCOL_GUID
 \

	)

27 
_EFI_RUNTIME_ARCH_PROTOCOL
 
	tEFI_RUNTIME_ARCH_PROTOCOL
;

32 
LIST_ENTRY
 
	tEFI_LIST_ENTRY
;

34 
_EFI_RUNTIME_IMAGE_ENTRY
 
	tEFI_RUNTIME_IMAGE_ENTRY
;

39 
	s_EFI_RUNTIME_IMAGE_ENTRY
 {

44 
VOID
 *
	mImageBa£
;

48 
UINT64
 
	mImageSize
;

53 
VOID
 *
	mRñoˇti⁄D©a
;

57 
EFI_HANDLE
 
	mH™dÀ
;

61 
EFI_LIST_ENTRY
 
	mLök
;

64 
_EFI_RUNTIME_EVENT_ENTRY
 
	tEFI_RUNTIME_EVENT_ENTRY
;

69 
	s_EFI_RUNTIME_EVENT_ENTRY
 {

73 
UINT32
 
	mTy≥
;

77 
EFI_TPL
 
	mNŸifyT∂
;

81 
EFI_EVENT_NOTIFY
 
	mNŸifyFun˘i⁄
;

85 
VOID
 *
	mNŸifyC⁄ãxt
;

89 
EFI_EVENT
 *
	mEvít
;

94 
EFI_LIST_ENTRY
 
	mLök
;

107 
	s_EFI_RUNTIME_ARCH_PROTOCOL
 {

108 
EFI_LIST_ENTRY
 
	mImageHód
;

109 
EFI_LIST_ENTRY
 
	mEvítHód
;

110 
UINTN
 
	mMem‹yDes¸ùt‹Size
;

111 
UINT32
 
	mMem‹yDescùt‹Vîsi⁄
;

112 
UINTN
 
	mMem‹yM≠Size
;

113 
EFI_MEMORY_DESCRIPTOR
 *
	mMem‹yM≠Physiˇl
;

115 
EFI_MEMORY_DESCRIPTOR
 *
	mMem‹yM≠VútuÆ
;

116 
BOOLEAN
 
	mVútuÆMode
;

117 
BOOLEAN
 
	mAtRu¡ime
;

120 
EFI_GUID
 
gEfiRu¡imeArchPrŸocﬁGuid
;

	@S3SaveState.h

17 #i‚de‡
__S3_SAVE_STATE_H__


18 
	#__S3_SAVE_STATE_H__


	)

20 
	#EFI_S3_SAVE_STATE_PROTOCOL_GUID
 \

	)

24 
VOID
 *
	tEFI_S3_BOOT_SCRIPT_POSITION
;

26 
_EFI_S3_SAVE_STATE_PROTOCOL
 
	tEFI_S3_SAVE_STATE_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_S3_SAVE_STATE_WRITE
)(

48 
	tIN
 
	tCONST
 
	tEFI_S3_SAVE_STATE_PROTOCOL
 *
	tThis
,

49 
	tIN
 
	tUINTN
 
	tOpCode
,

90 
	gEFI_STATUS


91 (
	tEFIAPI
 *
	tEFI_S3_SAVE_STATE_INSERT
)(

92 
	tIN
 
	tCONST
 
	tEFI_S3_SAVE_STATE_PROTOCOL
 *
	tThis
,

93 
	tIN
 
	tBOOLEAN
 
	tBef‹eOrA·î
,

94 
	tIN
 
	tOUT
 
	tEFI_S3_BOOT_SCRIPT_POSITION
 *
	tPosôi⁄
 
	tOPTIONAL
,

95 
	tIN
 
	tUINTN
 
	tOpCode
,

127 
	gEFI_STATUS


128 (
	tEFIAPI
 *
	tEFI_S3_SAVE_STATE_LABEL
)(

129 
	tIN
 
	tCONST
 
	tEFI_S3_SAVE_STATE_PROTOCOL
 *
	tThis
,

130 
	tIN
 
	tBOOLEAN
 
	tBef‹eOrA·î
,

131 
	tIN
 
	tBOOLEAN
 
	tCª©eIfNŸFound
,

132 
	tIN
 
	tOUT
 
	tEFI_S3_BOOT_SCRIPT_POSITION
 *
	tPosôi⁄
 
	tOPTIONAL
,

133 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tLabñ


153 
	gEFI_STATUS


154 (
	tEFIAPI
 *
	tEFI_S3_SAVE_STATE_COMPARE
)(

155 
	tIN
 
	tCONST
 
	tEFI_S3_SAVE_STATE_PROTOCOL
 *
	tThis
,

156 
	tIN
 
	tEFI_S3_BOOT_SCRIPT_POSITION
 
	tPosôi⁄1
,

157 
	tIN
 
	tEFI_S3_BOOT_SCRIPT_POSITION
 
	tPosôi⁄2
,

158 
	tOUT
 
	tUINTN
 *
	tRñ©ivePosôi⁄


161 
	s_EFI_S3_SAVE_STATE_PROTOCOL
 {

162 
EFI_S3_SAVE_STATE_WRITE
 
	mWrôe
;

163 
EFI_S3_SAVE_STATE_INSERT
 
	mIn£π
;

164 
EFI_S3_SAVE_STATE_LABEL
 
	mLabñ
;

165 
EFI_S3_SAVE_STATE_COMPARE
 
	mCom∑ª
;

168 
EFI_GUID
 
gEfiS3SaveSèãPrŸocﬁGuid
;

	@S3SmmSaveState.h

26 #i‚de‡
__S3_SMM_SAVE_STATE_H__


27 
	#__S3_SMM_SAVE_STATE_H__


	)

29 
	~<PrŸocﬁ/S3SaveSèã.h
>

31 
	#EFI_S3_SMM_SAVE_STATE_PROTOCOL_GUID
 \

	)

35 
EFI_S3_SAVE_STATE_PROTOCOL
 
	tEFI_S3_SMM_SAVE_STATE_PROTOCOL
;

37 
EFI_GUID
 
gEfiS3SmmSaveSèãPrŸocﬁGuid
;

	@ScsiIo.h

12 #i‚de‡
__EFI_SCSI_IO_PROTOCOL_H__


13 
	#__EFI_SCSI_IO_PROTOCOL_H__


	)

15 
	#EFI_SCSI_IO_PROTOCOL_GUID
 \

	)

23 
_EFI_SCSI_IO_PROTOCOL
 
	tEFI_SCSI_IO_PROTOCOL
;

28 
	#EFI_SCSI_IO_TYPE_DISK
 0x00

29 
	#EFI_SCSI_IO_TYPE_TAPE
 0x01

30 
	#EFI_SCSI_IO_TYPE_PRINTER
 0x02

31 
	#EFI_SCSI_IO_TYPE_PROCESSOR
 0x03

32 
	#EFI_SCSI_IO_TYPE_WORM
 0x04

33 
	#EFI_SCSI_IO_TYPE_CDROM
 0x05

34 
	#EFI_SCSI_IO_TYPE_SCANNER
 0x06

35 
	#EFI_SCSI_IO_TYPE_OPTICAL
 0x07

36 
	#EFI_SCSI_IO_TYPE_MEDIUMCHANGER
 0x08

37 
	#EFI_SCSI_IO_TYPE_COMMUNICATION
 0x09

38 
	#MFI_SCSI_IO_TYPE_A
 0x0A

39 
	#MFI_SCSI_IO_TYPE_B
 0x0B

40 
	#MFI_SCSI_IO_TYPE_RAID
 0x0C

41 
	#MFI_SCSI_IO_TYPE_SES
 0x0D

42 
	#MFI_SCSI_IO_TYPE_RBC
 0x0E

43 
	#MFI_SCSI_IO_TYPE_OCRW
 0x0F

44 
	#MFI_SCSI_IO_TYPE_BRIDGE
 0x10

45 
	#MFI_SCSI_IO_TYPE_OSD
 0x11

46 
	#EFI_SCSI_IO_TYPE_RESERVED_LOW
 0x12

47 
	#EFI_SCSI_IO_TYPE_RESERVED_HIGH
 0x1E

48 
	#EFI_SCSI_IO_TYPE_UNKNOWN
 0x1F

49 

	)

53 
	#EFI_SCSI_IO_DATA_DIRECTION_READ
 0

	)

54 
	#EFI_SCSI_IO_DATA_DIRECTION_WRITE
 1

	)

55 
	#EFI_SCSI_IO_DATA_DIRECTION_BIDIRECTIONAL
 2

	)

60 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_OK
 0x00

	)

61 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_TIMEOUT_COMMAND
 0x09

62 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_TIMEOUT
 0x0b

63 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_MESSAGE_REJECT
 0x0d

64 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_BUS_RESET
 0x0e

65 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_PARITY_ERROR
 0x0f

	)

66 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_REQUEST_SENSE_FAILED
 0x10

67 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_SELECTION_TIMEOUT
 0x11

68 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_DATA_OVERRUN_UNDERRUN
 0x12

69 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_BUS_FREE
 0x13

70 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_PHASE_ERROR
 0x14

71 
	#EFI_SCSI_IO_STATUS_HOST_ADAPTER_OTHER
 0x7f

	)

77 
	#EFI_SCSI_IO_STATUS_TARGET_GOOD
 0x00

	)

78 
	#EFI_SCSI_IO_STATUS_TARGET_CHECK_CONDITION
 0x02

79 
	#EFI_SCSI_IO_STATUS_TARGET_CONDITION_MET
 0x04

80 
	#EFI_SCSI_IO_STATUS_TARGET_BUSY
 0x08

81 
	#EFI_SCSI_IO_STATUS_TARGET_INTERMEDIATE
 0x10

82 
	#EFI_SCSI_IO_STATUS_TARGET_INTERMEDIATE_CONDITION_MET
 0x14

83 
	#EFI_SCSI_IO_STATUS_TARGET_RESERVATION_CONFLICT
 0x18

84 
	#EFI_SCSI_IO_STATUS_TARGET_COMMOND_TERMINATED
 0x22

85 
	#EFI_SCSI_IO_STATUS_TARGET_QUEUE_FULL
 0x28

86 

	)

96 
UINT64
 
	mTimeout
;

101 
VOID
 *
	mInD©aBuf„r
;

106 
VOID
 *
	mOutD©aBuf„r
;

111 
VOID
 *
	mSí£D©a
;

116 
VOID
 *
	mCdb
;

121 
UINT32
 
	mInTøns„rLígth
;

126 
UINT32
 
	mOutTøns„rLígth
;

131 
UINT8
 
	mCdbLígth
;

136 
UINT8
 
	mD©aDúe˘i⁄
;

142 
UINT8
 
	mHo°Ad≠ãrSètus
;

147 
UINT8
 
	mT¨gëSètus
;

152 
UINT8
 
	mSí£D©aLígth
;

153 } 
	tEFI_SCSI_IO_SCSI_REQUEST_PACKET
;

167 
	gEFI_STATUS


168 (
	tEFIAPI
 *
	tEFI_SCSI_IO_PROTOCOL_GET_DEVICE_TYPE
)(

169 
	tIN
 
	tEFI_SCSI_IO_PROTOCOL
 *
	tThis
,

170 
	tOUT
 
	tUINT8
 *
	tDevi˚Ty≥


187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_SCSI_IO_PROTOCOL_GET_DEVICE_LOCATION
)(

189 
	tIN
 
	tEFI_SCSI_IO_PROTOCOL
 *
	tThis
,

190 
	tIN
 
	tOUT
 
	tUINT8
 **
	tT¨gë
,

191 
	tOUT
 
	tUINT64
 *
	tLun


208 
	gEFI_STATUS


209 (
	tEFIAPI
 *
	tEFI_SCSI_IO_PROTOCOL_RESET_BUS
)(

210 
	tIN
 
	tEFI_SCSI_IO_PROTOCOL
 *
	tThis


228 
	gEFI_STATUS


229 (
	tEFIAPI
 *
	tEFI_SCSI_IO_PROTOCOL_RESET_DEVICE
)(

230 
	tIN
 
	tEFI_SCSI_IO_PROTOCOL
 *
	tThis


283 
	gEFI_STATUS


284 (
	tEFIAPI
 *
	tEFI_SCSI_IO_PROTOCOL_EXEC_SCSI_COMMAND
)(

285 
	tIN
 
	tEFI_SCSI_IO_PROTOCOL
 *
	tThis
,

286 
	tIN
 
	tOUT
 
	tEFI_SCSI_IO_SCSI_REQUEST_PACKET
 *
	tPackë
,

287 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


293 
	s_EFI_SCSI_IO_PROTOCOL
 {

294 
EFI_SCSI_IO_PROTOCOL_GET_DEVICE_TYPE
 
	mGëDevi˚Ty≥
;

295 
EFI_SCSI_IO_PROTOCOL_GET_DEVICE_LOCATION
 
	mGëDevi˚Loˇti⁄
;

296 
EFI_SCSI_IO_PROTOCOL_RESET_BUS
 
	mRe£tBus
;

297 
EFI_SCSI_IO_PROTOCOL_RESET_DEVICE
 
	mRe£tDevi˚
;

298 
EFI_SCSI_IO_PROTOCOL_EXEC_SCSI_COMMAND
 
	mExecuãScsiComm™d
;

306 
UINT32
 
	mIoAlign
;

309 
EFI_GUID
 
gEfiScsiIoPrŸocﬁGuid
;

	@ScsiPassThru.h

16 #i‚de‡
__SCSI_PASS_THROUGH_H__


17 
	#__SCSI_PASS_THROUGH_H__


	)

19 
	#EFI_SCSI_PASS_THRU_PROTOCOL_GUID
 \

	)

27 
_EFI_SCSI_PASS_THRU_PROTOCOL
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
;

29 
	#EFI_SCSI_PASS_THRU_ATTRIBUTES_PHYSICAL
 0x0001

	)

30 
	#EFI_SCSI_PASS_THRU_ATTRIBUTES_LOGICAL
 0x0002

	)

31 
	#EFI_SCSI_PASS_THRU_ATTRIBUTES_NONBLOCKIO
 0x0004

	)

36 
	#EFI_SCSI_STATUS_HOST_ADAPTER_OK
 0x00

	)

37 
	#EFI_SCSI_STATUS_HOST_ADAPTER_TIMEOUT_COMMAND
 0x09

38 
	#EFI_SCSI_STATUS_HOST_ADAPTER_TIMEOUT
 0x0b

39 
	#EFI_SCSI_STATUS_HOST_ADAPTER_MESSAGE_REJECT
 0x0d

40 
	#EFI_SCSI_STATUS_HOST_ADAPTER_BUS_RESET
 0x0e

41 
	#EFI_SCSI_STATUS_HOST_ADAPTER_PARITY_ERROR
 0x0f

	)

42 
	#EFI_SCSI_STATUS_HOST_ADAPTER_REQUEST_SENSE_FAILED
 0x10

43 
	#EFI_SCSI_STATUS_HOST_ADAPTER_SELECTION_TIMEOUT
 0x11

44 
	#EFI_SCSI_STATUS_HOST_ADAPTER_DATA_OVERRUN_UNDERRUN
 0x12

45 
	#EFI_SCSI_STATUS_HOST_ADAPTER_BUS_FREE
 0x13

46 
	#EFI_SCSI_STATUS_HOST_ADAPTER_PHASE_ERROR
 0x14

47 
	#EFI_SCSI_STATUS_HOST_ADAPTER_OTHER
 0x7f

	)

52 
	#EFI_SCSI_STATUS_TARGET_GOOD
 0x00

	)

53 
	#EFI_SCSI_STATUS_TARGET_CHECK_CONDITION
 0x02

54 
	#EFI_SCSI_STATUS_TARGET_CONDITION_MET
 0x04

55 
	#EFI_SCSI_STATUS_TARGET_BUSY
 0x08

56 
	#EFI_SCSI_STATUS_TARGET_INTERMEDIATE
 0x10

57 
	#EFI_SCSI_STATUS_TARGET_INTERMEDIATE_CONDITION_MET
 0x14

58 
	#EFI_SCSI_STATUS_TARGET_RESERVATION_CONFLICT
 0x18

59 
	#EFI_SCSI_STATUS_TARGET_COMMOND_TERMINATED
 0x22

60 
	#EFI_SCSI_STATUS_TARGET_QUEUE_FULL
 0x28

61 

	)

71 
UINT64
 
	mTimeout
;

78 
VOID
 *
	mD©aBuf„r
;

83 
VOID
 *
	mSí£D©a
;

88 
VOID
 *
	mCdb
;

93 
UINT32
 
	mTøns„rLígth
;

98 
UINT8
 
	mCdbLígth
;

103 
UINT8
 
	mD©aDúe˘i⁄
;

109 
UINT8
 
	mHo°Ad≠ãrSètus
;

114 
UINT8
 
	mT¨gëSètus
;

119 
UINT8
 
	mSí£D©aLígth
;

120 } 
	tEFI_SCSI_PASS_THRU_SCSI_REQUEST_PACKET
;

126 
CHAR16
 *
	mC⁄åﬁÀrName
;

130 
CHAR16
 *
	mCh™√lName
;

134 
UINT32
 
	mAd≠ãrId
;

138 
UINT32
 
	mAâribuãs
;

142 
UINT32
 
	mIoAlign
;

143 } 
	tEFI_SCSI_PASS_THRU_MODE
;

198 
	gEFI_STATUS


199 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_PASSTHRU
)(

200 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

201 
	tIN
 
	tUINT32
 
	tT¨gë
,

202 
	tIN
 
	tUINT64
 
	tLun
,

203 
	tIN
 
	tOUT
 
	tEFI_SCSI_PASS_THRU_SCSI_REQUEST_PACKET
 *
	tPackë
,

204 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


232 
	gEFI_STATUS


233 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_GET_NEXT_DEVICE
)(

234 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

235 
	tIN
 
	tOUT
 
	tUINT32
 *
	tT¨gë
,

236 
	tIN
 
	tOUT
 
	tUINT64
 *
	tLun


267 
	gEFI_STATUS


268 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_BUILD_DEVICE_PATH
)(

269 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

270 
	tIN
 
	tUINT32
 
	tT¨gë
,

271 
	tIN
 
	tUINT64
 
	tLun
,

272 
	tIN
 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


299 
	gEFI_STATUS


300 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_GET_TARGET_LUN
)(

301 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

302 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

303 
	tOUT
 
	tUINT32
 *
	tT¨gë
,

304 
	tOUT
 
	tUINT64
 *
	tLun


323 
	gEFI_STATUS


324 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_RESET_CHANNEL
)(

325 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis


348 
	gEFI_STATUS


349 (
	tEFIAPI
 *
	tEFI_SCSI_PASS_THRU_RESET_TARGET
)(

350 
	tIN
 
	tEFI_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

351 
	tIN
 
	tUINT32
 
	tT¨gë
,

352 
	tIN
 
	tUINT64
 
	tLun


362 
	s_EFI_SCSI_PASS_THRU_PROTOCOL
 {

366 
EFI_SCSI_PASS_THRU_MODE
 *
	mMode
;

367 
EFI_SCSI_PASS_THRU_PASSTHRU
 
	mPassThru
;

368 
EFI_SCSI_PASS_THRU_GET_NEXT_DEVICE
 
	mGëNextDevi˚
;

369 
EFI_SCSI_PASS_THRU_BUILD_DEVICE_PATH
 
	mBuûdDevi˚P©h
;

370 
EFI_SCSI_PASS_THRU_GET_TARGET_LUN
 
	mGëT¨gëLun
;

371 
EFI_SCSI_PASS_THRU_RESET_CHANNEL
 
	mRe£tCh™√l
;

372 
EFI_SCSI_PASS_THRU_RESET_TARGET
 
	mRe£tT¨gë
;

375 
EFI_GUID
 
gEfiScsiPassThruPrŸocﬁGuid
;

	@ScsiPassThruExt.h

11 #i‚de‡
__EXT_SCSI_PASS_THROUGH_PROTOCOL_H__


12 
	#__EXT_SCSI_PASS_THROUGH_PROTOCOL_H__


	)

14 
	#EFI_EXT_SCSI_PASS_THRU_PROTOCOL_GUID
 \

	)

19 
_EFI_EXT_SCSI_PASS_THRU_PROTOCOL
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
;

21 
	#TARGET_MAX_BYTES
 0x10

	)

23 
	#EFI_EXT_SCSI_PASS_THRU_ATTRIBUTES_PHYSICAL
 0x0001

	)

24 
	#EFI_EXT_SCSI_PASS_THRU_ATTRIBUTES_LOGICAL
 0x0002

	)

25 
	#EFI_EXT_SCSI_PASS_THRU_ATTRIBUTES_NONBLOCKIO
 0x0004

	)

30 
	#EFI_EXT_SCSI_DATA_DIRECTION_READ
 0

	)

31 
	#EFI_EXT_SCSI_DATA_DIRECTION_WRITE
 1

	)

32 
	#EFI_EXT_SCSI_DATA_DIRECTION_BIDIRECTIONAL
 2

	)

36 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_OK
 0x00

	)

37 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_TIMEOUT_COMMAND
 0x09

	)

38 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_TIMEOUT
 0x0b

	)

39 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_MESSAGE_REJECT
 0x0d

	)

40 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_BUS_RESET
 0x0e

	)

41 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_PARITY_ERROR
 0x0f

	)

42 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_REQUEST_SENSE_FAILED
 0x10

	)

43 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_SELECTION_TIMEOUT
 0x11

	)

44 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_DATA_OVERRUN_UNDERRUN
 0x12

	)

45 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_BUS_FREE
 0x13

	)

46 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_PHASE_ERROR
 0x14

	)

47 
	#EFI_EXT_SCSI_STATUS_HOST_ADAPTER_OTHER
 0x7f

	)

51 
	#EFI_EXT_SCSI_STATUS_TARGET_GOOD
 0x00

	)

52 
	#EFI_EXT_SCSI_STATUS_TARGET_CHECK_CONDITION
 0x02

	)

53 
	#EFI_EXT_SCSI_STATUS_TARGET_CONDITION_MET
 0x04

	)

54 
	#EFI_EXT_SCSI_STATUS_TARGET_BUSY
 0x08

	)

55 
	#EFI_EXT_SCSI_STATUS_TARGET_INTERMEDIATE
 0x10

	)

56 
	#EFI_EXT_SCSI_STATUS_TARGET_INTERMEDIATE_CONDITION_MET
 0x14

	)

57 
	#EFI_EXT_SCSI_STATUS_TARGET_RESERVATION_CONFLICT
 0x18

	)

58 
	#EFI_EXT_SCSI_STATUS_TARGET_TASK_SET_FULL
 0x28

	)

59 
	#EFI_EXT_SCSI_STATUS_TARGET_ACA_ACTIVE
 0x30

	)

60 
	#EFI_EXT_SCSI_STATUS_TARGET_TASK_ABORTED
 0x40

	)

66 
UINT32
 
	mAd≠ãrId
;

70 
UINT32
 
	mAâribuãs
;

74 
UINT32
 
	mIoAlign
;

75 } 
	tEFI_EXT_SCSI_PASS_THRU_MODE
;

86 
UINT64
 
	mTimeout
;

91 
VOID
 *
	mInD©aBuf„r
;

96 
VOID
 *
	mOutD©aBuf„r
;

101 
VOID
 *
	mSí£D©a
;

106 
VOID
 *
	mCdb
;

111 
UINT32
 
	mInTøns„rLígth
;

116 
UINT32
 
	mOutTøns„rLígth
;

121 
UINT8
 
	mCdbLígth
;

126 
UINT8
 
	mD©aDúe˘i⁄
;

131 
UINT8
 
	mHo°Ad≠ãrSètus
;

136 
UINT8
 
	mT¨gëSètus
;

141 
UINT8
 
	mSí£D©aLígth
;

142 } 
	tEFI_EXT_SCSI_PASS_THRU_SCSI_REQUEST_PACKET
;

186 
	gEFI_STATUS


187 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_PASSTHRU
)(

188 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

189 
	tIN
 
	tUINT8
 *
	tT¨gë
,

190 
	tIN
 
	tUINT64
 
	tLun
,

191 
	tIN
 
	tOUT
 
	tEFI_EXT_SCSI_PASS_THRU_SCSI_REQUEST_PACKET
 *
	tPackë
,

192 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


222 
	gEFI_STATUS


223 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_GET_NEXT_TARGET_LUN
)(

224 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

225 
	tIN
 
	tOUT
 
	tUINT8
 **
	tT¨gë
,

226 
	tIN
 
	tOUT
 
	tUINT64
 *
	tLun


257 
	gEFI_STATUS


258 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_BUILD_DEVICE_PATH
)(

259 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

260 
	tIN
 
	tUINT8
 *
	tT¨gë
,

261 
	tIN
 
	tUINT64
 
	tLun
,

262 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


285 
	gEFI_STATUS


286 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_GET_TARGET_LUN
)(

287 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

288 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

289 
	tOUT
 
	tUINT8
 **
	tT¨gë
,

290 
	tOUT
 
	tUINT64
 *
	tLun


305 
	gEFI_STATUS


306 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_RESET_CHANNEL
)(

307 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis


330 
	gEFI_STATUS


331 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_RESET_TARGET_LUN
)(

332 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

333 
	tIN
 
	tUINT8
 *
	tT¨gë
,

334 
	tIN
 
	tUINT64
 
	tLun


360 
	gEFI_STATUS


361 (
	tEFIAPI
 *
	tEFI_EXT_SCSI_PASS_THRU_GET_NEXT_TARGET
)(

362 
	tIN
 
	tEFI_EXT_SCSI_PASS_THRU_PROTOCOL
 *
	tThis
,

363 
	tIN
 
	tOUT
 
	tUINT8
 **
	tT¨gë


372 
	s_EFI_EXT_SCSI_PASS_THRU_PROTOCOL
 {

376 
EFI_EXT_SCSI_PASS_THRU_MODE
 *
	mMode
;

377 
EFI_EXT_SCSI_PASS_THRU_PASSTHRU
 
	mPassThru
;

378 
EFI_EXT_SCSI_PASS_THRU_GET_NEXT_TARGET_LUN
 
	mGëNextT¨gëLun
;

379 
EFI_EXT_SCSI_PASS_THRU_BUILD_DEVICE_PATH
 
	mBuûdDevi˚P©h
;

380 
EFI_EXT_SCSI_PASS_THRU_GET_TARGET_LUN
 
	mGëT¨gëLun
;

381 
EFI_EXT_SCSI_PASS_THRU_RESET_CHANNEL
 
	mRe£tCh™√l
;

382 
EFI_EXT_SCSI_PASS_THRU_RESET_TARGET_LUN
 
	mRe£tT¨gëLun
;

383 
EFI_EXT_SCSI_PASS_THRU_GET_NEXT_TARGET
 
	mGëNextT¨gë
;

386 
EFI_GUID
 
gEfiExtScsiPassThruPrŸocﬁGuid
;

	@SdMmcPassThru.h

10 #i‚de‡
__SD_MMC_PASS_THRU_H__


11 
	#__SD_MMC_PASS_THRU_H__


	)

13 
	#EFI_SD_MMC_PASS_THRU_PROTOCOL_GUID
 \

	)

18 
_EFI_SD_MMC_PASS_THRU_PROTOCOL
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
;

21 
	mSdMmcComm™dTy≥Bc
,

22 
	mSdMmcComm™dTy≥B¸
,

23 
	mSdMmcComm™dTy≥Ac
,

24 
	mSdMmcComm™dTy≥Adtc


25 } 
	tEFI_SD_MMC_COMMAND_TYPE
;

28 
	mSdMmcRe•⁄£Ty≥R1
,

29 
	mSdMmcRe•⁄£Ty≥R1b
,

30 
	mSdMmcRe•⁄£Ty≥R2
,

31 
	mSdMmcRe•⁄£Ty≥R3
,

32 
	mSdMmcRe•⁄£Ty≥R4
,

33 
	mSdMmcRe•⁄£Ty≥R5
,

34 
	mSdMmcRe•⁄£Ty≥R5b
,

35 
	mSdMmcRe•⁄£Ty≥R6
,

36 
	mSdMmcRe•⁄£Ty≥R7


37 } 
	tEFI_SD_MMC_RESPONSE_TYPE
;

39 
	s_EFI_SD_MMC_COMMAND_BLOCK
 {

40 
UINT16
 
	mComm™dIndex
;

41 
UINT32
 
	mComm™dArgumít
;

42 
UINT32
 
	mComm™dTy≥
;

43 
UINT32
 
	mRe•⁄£Ty≥
;

44 } 
	tEFI_SD_MMC_COMMAND_BLOCK
;

46 
	s_EFI_SD_MMC_STATUS_BLOCK
 {

47 
UINT32
 
	mRe•0
;

48 
UINT32
 
	mRe•1
;

49 
UINT32
 
	mRe•2
;

50 
UINT32
 
	mRe•3
;

51 } 
	tEFI_SD_MMC_STATUS_BLOCK
;

53 
	s_EFI_SD_MMC_PASS_THRU_COMMAND_PACKET
 {

54 
UINT64
 
	mTimeout
;

55 
EFI_SD_MMC_COMMAND_BLOCK
 *
	mSdMmcCmdBlk
;

56 
EFI_SD_MMC_STATUS_BLOCK
 *
	mSdMmcSètusBlk
;

57 
VOID
 *
	mInD©aBuf„r
;

58 
VOID
 *
	mOutD©aBuf„r
;

59 
UINT32
 
	mInTøns„rLígth
;

60 
UINT32
 
	mOutTøns„rLígth
;

61 
EFI_STATUS
 
	mTønß˘i⁄Sètus
;

62 } 
	tEFI_SD_MMC_PASS_THRU_COMMAND_PACKET
;

102 
	gEFI_STATUS


103 (
	tEFIAPI
 *
	tEFI_SD_MMC_PASS_THRU_PASSTHRU
) (

104 
	tIN
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
 *
	tThis
,

105 
	tIN
 
	tUINT8
 
	tSlŸ
,

106 
	tIN
 
	tOUT
 
	tEFI_SD_MMC_PASS_THRU_COMMAND_PACKET
 *
	tPackë
,

107 
	tIN
 
	tEFI_EVENT
 
	tEvít
 
	tOPTIONAL


140 
	gEFI_STATUS


141 (
	tEFIAPI
 *
	tEFI_SD_MMC_PASS_THRU_GET_NEXT_SLOT
) (

142 
	tIN
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
 *
	tThis
,

143 
	tIN
 
	tOUT
 
	tUINT8
 *
	tSlŸ


181 
	gEFI_STATUS


182 (
	tEFIAPI
 *
	tEFI_SD_MMC_PASS_THRU_BUILD_DEVICE_PATH
) (

183 
	tIN
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
 *
	tThis
,

184 
	tIN
 
	tUINT8
 
	tSlŸ
,

185 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


210 
	gEFI_STATUS


211 (
	tEFIAPI
 *
	tEFI_SD_MMC_PASS_THRU_GET_SLOT_NUMBER
) (

212 
	tIN
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
 *
	tThis
,

213 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

214 
	tOUT
 
	tUINT8
 *
	tSlŸ


241 
	gEFI_STATUS


242 (
	tEFIAPI
 *
	tEFI_SD_MMC_PASS_THRU_RESET_DEVICE
) (

243 
	tIN
 
	tEFI_SD_MMC_PASS_THRU_PROTOCOL
 *
	tThis
,

244 
	tIN
 
	tUINT8
 
	tSlŸ


247 
	s_EFI_SD_MMC_PASS_THRU_PROTOCOL
 {

248 
UINT32
 
	mIoAlign
;

249 
EFI_SD_MMC_PASS_THRU_PASSTHRU
 
	mPassThru
;

250 
EFI_SD_MMC_PASS_THRU_GET_NEXT_SLOT
 
	mGëNextSlŸ
;

251 
EFI_SD_MMC_PASS_THRU_BUILD_DEVICE_PATH
 
	mBuûdDevi˚P©h
;

252 
EFI_SD_MMC_PASS_THRU_GET_SLOT_NUMBER
 
	mGëSlŸNumbî
;

253 
EFI_SD_MMC_PASS_THRU_RESET_DEVICE
 
	mRe£tDevi˚
;

256 
EFI_GUID
 
gEfiSdMmcPassThruPrŸocﬁGuid
;

	@Security.h

22 #i‚de‡
__ARCH_PROTOCOL_SECURITY_H__


23 
	#__ARCH_PROTOCOL_SECURITY_H__


	)

28 
	#EFI_SECURITY_ARCH_PROTOCOL_GUID
 \

	)

31 
_EFI_SECURITY_ARCH_PROTOCOL
 
	tEFI_SECURITY_ARCH_PROTOCOL
;

79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_SECURITY_FILE_AUTHENTICATION_STATE
)(

81 
	tIN
 
	tCONST
 
	tEFI_SECURITY_ARCH_PROTOCOL
 *
	tThis
,

82 
	tIN
 
	tUINT32
 
	tAuthítiˇti⁄Sètus
,

83 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tFûe


91 
	s_EFI_SECURITY_ARCH_PROTOCOL
 {

92 
EFI_SECURITY_FILE_AUTHENTICATION_STATE
 
	mFûeAuthítiˇti⁄Sèã
;

95 
EFI_GUID
 
gEfiSecurôyArchPrŸocﬁGuid
;

	@Security2.h

25 #i‚de‡
__ARCH_PROTOCOL_SECURITY2_H__


26 
	#__ARCH_PROTOCOL_SECURITY2_H__


	)

31 
	#EFI_SECURITY2_ARCH_PROTOCOL_GUID
 \

	)

34 
_EFI_SECURITY2_ARCH_PROTOCOL
 
	tEFI_SECURITY2_ARCH_PROTOCOL
;

81 
	$EFI_STATUS
 (
	tEFIAPI
 *
	tEFI_SECURITY2_FILE_AUTHENTICATION
) (

82 
	tIN
 
	tCONST
 
	tEFI_SECURITY2_ARCH_PROTOCOL
 *
	tThis
,

83 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tFûe
, 
	tOPTIONAL


84 
	tIN
 
	tVOID
 *
	tFûeBuf„r
,

85 
	tIN
 
	tUINTN
 
	tFûeSize
,

86 
	tIN
 
	tBOOLEAN
 
	tBoŸPﬁicy


95 
	s_EFI_SECURITY2_ARCH_PROTOCOL
 {

96 
EFI_SECURITY2_FILE_AUTHENTICATION
 
FûeAuthítiˇti⁄
;

99 
EFI_GUID
 
gEfiSecurôy2ArchPrŸocﬁGuid
;

	@SecurityPolicy.h

9 #i‚de‡
_SECURITY_POLICY_H_


10 
	#_SECURITY_POLICY_H_


	)

15 
	#EFI_SECURITY_POLICY_PROTOCOL_GUID
 \

	)

18 
EFI_GUID
 
gEfiSecurôyPﬁicyPrŸocﬁGuid
;

	@SerialIo.h

12 #i‚de‡
__SERIAL_IO_PROTOCOL_H__


13 
	#__SERIAL_IO_PROTOCOL_H__


	)

15 
	#EFI_SERIAL_IO_PROTOCOL_GUID
 \

	)

20 
	#EFI_SERIAL_TERMINAL_DEVICE_TYPE_GUID
 \

	)

28 
	#SERIAL_IO_PROTOCOL
 
EFI_SERIAL_IO_PROTOCOL_GUID


	)

30 
_EFI_SERIAL_IO_PROTOCOL
 
	tEFI_SERIAL_IO_PROTOCOL
;

36 
EFI_SERIAL_IO_PROTOCOL
 
	tSERIAL_IO_INTERFACE
;

43 
	mDeÁu…P¨ôy
,

44 
	mNoP¨ôy
,

45 
	mEvíP¨ôy
,

46 
	mOddP¨ôy
,

47 
	mM¨kP¨ôy
,

48 
	mS∑˚P¨ôy


49 } 
	tEFI_PARITY_TYPE
;

55 
	mDeÁu…St›Bôs
,

56 
	mO√St›Bô
,

57 
	mO√FiveSt›Bôs
,

58 
	mTwoSt›Bôs


59 } 
	tEFI_STOP_BITS_TYPE
;

67 
	#EFI_SERIAL_CLEAR_TO_SEND
 0x00000010

	)

68 
	#EFI_SERIAL_DATA_SET_READY
 0x00000020

	)

69 
	#EFI_SERIAL_RING_INDICATE
 0x00000040

	)

70 
	#EFI_SERIAL_CARRIER_DETECT
 0x00000080

	)

71 
	#EFI_SERIAL_INPUT_BUFFER_EMPTY
 0x00000100

	)

72 
	#EFI_SERIAL_OUTPUT_BUFFER_EMPTY
 0x00000200

	)

77 
	#EFI_SERIAL_REQUEST_TO_SEND
 0x00000002

	)

78 
	#EFI_SERIAL_DATA_TERMINAL_READY
 0x00000001

	)

83 
	#EFI_SERIAL_HARDWARE_LOOPBACK_ENABLE
 0x00001000

	)

84 
	#EFI_SERIAL_SOFTWARE_LOOPBACK_ENABLE
 0x00002000

	)

85 
	#EFI_SERIAL_HARDWARE_FLOW_CONTROL_ENABLE
 0x00004000

	)

100 
	gEFI_STATUS


101 (
	tEFIAPI
 *
	tEFI_SERIAL_RESET
)(

102 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis


133 
	gEFI_STATUS


134 (
	tEFIAPI
 *
	tEFI_SERIAL_SET_ATTRIBUTES
)(

135 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis
,

136 
	tIN
 
	tUINT64
 
	tBaudR©e
,

137 
	tIN
 
	tUINT32
 
	tRe˚iveFifoDïth
,

138 
	tIN
 
	tUINT32
 
	tTimeout
,

139 
	tIN
 
	tEFI_PARITY_TYPE
 
	tP¨ôy
,

140 
	tIN
 
	tUINT8
 
	tD©aBôs
,

141 
	tIN
 
	tEFI_STOP_BITS_TYPE
 
	tSt›Bôs


156 
	gEFI_STATUS


157 (
	tEFIAPI
 *
	tEFI_SERIAL_SET_CONTROL_BITS
)(

158 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis
,

159 
	tIN
 
	tUINT32
 
	tC⁄åﬁ


173 
	gEFI_STATUS


174 (
	tEFIAPI
 *
	tEFI_SERIAL_GET_CONTROL_BITS
)(

175 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis
,

176 
	tOUT
 
	tUINT32
 *
	tC⁄åﬁ


193 
	gEFI_STATUS


194 (
	tEFIAPI
 *
	tEFI_SERIAL_WRITE
)(

195 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis
,

196 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

197 
	tIN
 
	tVOID
 *
	tBuf„r


214 
	gEFI_STATUS


215 (
	tEFIAPI
 *
	tEFI_SERIAL_READ
)(

216 
	tIN
 
	tEFI_SERIAL_IO_PROTOCOL
 *
	tThis
,

217 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

218 
	tOUT
 
	tVOID
 *
	tBuf„r


257 
UINT32
 
	mC⁄åﬁMask
;

262 
UINT32
 
	mTimeout
;

263 
UINT64
 
	mBaudR©e
;

264 
UINT32
 
	mRe˚iveFifoDïth
;

265 
UINT32
 
	mD©aBôs
;

266 
UINT32
 
	mP¨ôy
;

267 
UINT32
 
	mSt›Bôs
;

268 } 
	tEFI_SERIAL_IO_MODE
;

270 
	#EFI_SERIAL_IO_PROTOCOL_REVISION
 0x00010000

	)

271 
	#EFI_SERIAL_IO_PROTOCOL_REVISION1p1
 0x00010001

	)

272 
	#SERIAL_IO_INTERFACE_REVISION
 
EFI_SERIAL_IO_PROTOCOL_REVISION


	)

279 
	s_EFI_SERIAL_IO_PROTOCOL
 {

285 
UINT32
 
	mRevisi⁄
;

286 
EFI_SERIAL_RESET
 
	mRe£t
;

287 
EFI_SERIAL_SET_ATTRIBUTES
 
	mSëAâribuãs
;

288 
EFI_SERIAL_SET_CONTROL_BITS
 
	mSëC⁄åﬁ
;

289 
EFI_SERIAL_GET_CONTROL_BITS
 
	mGëC⁄åﬁ
;

290 
EFI_SERIAL_WRITE
 
	mWrôe
;

291 
EFI_SERIAL_READ
 
	mRód
;

295 
EFI_SERIAL_IO_MODE
 *
	mMode
;

303 
CONST
 
EFI_GUID
 *
	mDevi˚Ty≥Guid
;

306 
EFI_GUID
 
gEfiSîülIoPrŸocﬁGuid
;

307 
EFI_GUID
 
gEfiSîülTîmöÆDevi˚Ty≥Guid
;

	@ServiceBinding.h

13 #i‚de‡
__EFI_SERVICE_BINDING_H__


14 
	#__EFI_SERVICE_BINDING_H__


	)

19 
_EFI_SERVICE_BINDING_PROTOCOL
 
	tEFI_SERVICE_BINDING_PROTOCOL
;

41 
	gEFI_STATUS


42 (
	tEFIAPI
 *
	tEFI_SERVICE_BINDING_CREATE_CHILD
)(

43 
	tIN
 
	tEFI_SERVICE_BINDING_PROTOCOL
 *
	tThis
,

44 
	tIN
 
	tOUT
 
	tEFI_HANDLE
 *
	tChûdH™dÀ


66 
	gEFI_STATUS


67 (
	tEFIAPI
 *
	tEFI_SERVICE_BINDING_DESTROY_CHILD
)(

68 
	tIN
 
	tEFI_SERVICE_BINDING_PROTOCOL
 *
	tThis
,

69 
	tIN
 
	tEFI_HANDLE
 
	tChûdH™dÀ


83 
	s_EFI_SERVICE_BINDING_PROTOCOL
 {

84 
EFI_SERVICE_BINDING_CREATE_CHILD
 
	mCª©eChûd
;

85 
EFI_SERVICE_BINDING_DESTROY_CHILD
 
	mDe°royChûd
;

	@Shell.h

10 #i‚de‡
__EFI_SHELL_PROTOCOL_H__


11 
	#__EFI_SHELL_PROTOCOL_H__


	)

13 
	~<Guid/FûeInfo.h
>

15 
	#EFI_SHELL_PROTOCOL_GUID
 \

	)

19 
VOID
 *
	tSHELL_FILE_HANDLE
;

25 
	mSHELL_SUCCESS
 = 0,

30 
	mSHELL_LOAD_ERROR
 = 1,

35 
	mSHELL_INVALID_PARAMETER
 = 2,

40 
	mSHELL_UNSUPPORTED
 = 3,

45 
	mSHELL_BAD_BUFFER_SIZE
 = 4,

52 
	mSHELL_BUFFER_TOO_SMALL
 = 5,

57 
	mSHELL_NOT_READY
 = 6,

63 
	mSHELL_DEVICE_ERROR
 = 7,

68 
	mSHELL_WRITE_PROTECTED
 = 8,

73 
	mSHELL_OUT_OF_RESOURCES
 = 9,

79 
	mSHELL_VOLUME_CORRUPTED
 = 10,

84 
	mSHELL_VOLUME_FULL
 = 11,

90 
	mSHELL_NO_MEDIA
 = 12,

96 
	mSHELL_MEDIA_CHANGED
 = 13,

101 
	mSHELL_NOT_FOUND
 = 14,

106 
	mSHELL_ACCESS_DENIED
 = 15,

113 
	mSHELL_TIMEOUT
 = 18,

118 
	mSHELL_NOT_STARTED
 = 19,

123 
	mSHELL_ALREADY_STARTED
 = 20,

128 
	mSHELL_ABORTED
 = 21,

136 
	mSHELL_INCOMPATIBLE_VERSION
 = 25,

141 
	mSHELL_SECURITY_VIOLATION
 = 26,

147 
	mSHELL_NOT_EQUAL
 = 27

148 } 
	tSHELL_STATUS
;

154 
LIST_ENTRY
 
	mLök
;

155 
EFI_STATUS
 
	mSètus
;

156 
CONST
 
CHAR16
 *
	mFuŒName
;

157 
CONST
 
CHAR16
 *
	mFûeName
;

158 
SHELL_FILE_HANDLE
 
	mH™dÀ
;

159 
EFI_FILE_INFO
 *
	mInfo
;

160 } 
	tEFI_SHELL_FILE_INFO
;

170 
	gBOOLEAN


171 (
	tEFIAPI
 *
	tEFI_SHELL_BATCH_IS_ACTIVE
) (

172 
	tVOID


187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_SHELL_CLOSE_FILE
)(

189 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ


229 
	gEFI_STATUS


230 (
	tEFIAPI
 *
	tEFI_SHELL_CREATE_FILE
)(

231 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeName
,

232 
	tIN
 
	tUINT64
 
	tFûeAâribs
,

233 
	tOUT
 
	tSHELL_FILE_HANDLE
 *
	tFûeH™dÀ


249 
	gEFI_STATUS


250 (
	tEFIAPI
 *
	tEFI_SHELL_DELETE_FILE
)(

251 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ


265 
	gEFI_STATUS


266 (
	tEFIAPI
 *
	tEFI_SHELL_DELETE_FILE_BY_NAME
)(

267 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeName


274 
	gVOID


275 (
	tEFIAPI
 *
	tEFI_SHELL_DISABLE_PAGE_BREAK
) (

276 
	tVOID


283 
	gVOID


284 (
	tEFIAPI
 *
	tEFI_SHELL_ENABLE_PAGE_BREAK
) (

285 
	tVOID


320 
	gEFI_STATUS


321 (
	tEFIAPI
 *
	tEFI_SHELL_EXECUTE
) (

322 
	tIN
 
	tEFI_HANDLE
 *
	tP¨ítImageH™dÀ
,

323 
	tIN
 
	tCHAR16
 *
	tComm™dLöe
 
	tOPTIONAL
,

324 
	tIN
 
	tCHAR16
 **
	tEnvú⁄mít
 
	tOPTIONAL
,

325 
	tOUT
 
	tEFI_STATUS
 *
	tSètusCode
 
	tOPTIONAL


350 
	gEFI_STATUS


351 (
	tEFIAPI
 *
	tEFI_SHELL_FIND_FILES
)(

352 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeP©ã∫
,

353 
	tOUT
 
	tEFI_SHELL_FILE_INFO
 **
	tFûeLi°


369 
	gEFI_STATUS


370 (
	tEFIAPI
 *
	tEFI_SHELL_FIND_FILES_IN_DIR
)(

371 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeDúH™dÀ
,

372 
	tOUT
 
	tEFI_SHELL_FILE_INFO
 **
	tFûeLi°


391 
	gEFI_STATUS


392 (
	tEFIAPI
 *
	tEFI_SHELL_FLUSH_FILE
)(

393 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ


408 
	gEFI_STATUS


409 (
	tEFIAPI
 *
	tEFI_SHELL_FREE_FILE_LIST
) (

410 
	tIN
 
	tEFI_SHELL_FILE_INFO
 **
	tFûeLi°


430 
CONST
 
	tCHAR16
 *

431 (
	tEFIAPI
 *
	tEFI_SHELL_GET_CUR_DIR
) (

432 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeSy°emM≠pög
 
	tOPTIONAL


435 
UINT32
 
	tEFI_SHELL_DEVICE_NAME_FLAGS
;

436 
	#EFI_DEVICE_NAME_USE_COMPONENT_NAME
 0x00000001

	)

437 
	#EFI_DEVICE_NAME_USE_DEVICE_PATH
 0x00000002

	)

470 
	gEFI_STATUS


471 (
	tEFIAPI
 *
	tEFI_SHELL_GET_DEVICE_NAME
) (

472 
	tIN
 
	tEFI_HANDLE
 
	tDevi˚H™dÀ
,

473 
	tIN
 
	tEFI_SHELL_DEVICE_NAME_FLAGS
 
	tFœgs
,

474 
	tIN
 
	tCHAR8
 *
	tL™guage
,

475 
	tOUT
 
	tCHAR16
 **
	tBe°Devi˚Name


492 
CONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *

493 (
	tEFIAPI
 *
	tEFI_SHELL_GET_DEVICE_PATH_FROM_MAP
) (

494 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tM≠pög


509 
	gEFI_DEVICE_PATH_PROTOCOL
 *

510 (
	tEFIAPI
 *
	tEFI_SHELL_GET_DEVICE_PATH_FROM_FILE_PATH
) (

511 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tP©h


538 
CONST
 
	tCHAR16
 *

539 (
	tEFIAPI
 *
	tEFI_SHELL_GET_ENV
) (

540 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tName
 
	tOPTIONAL


566 
CONST
 
	tCHAR16
 *

567 (
	tEFIAPI
 *
	tEFI_SHELL_GET_ENV_EX
) (

568 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tName
,

569 
	tOUT
 
	tUINT32
 *
	tAâribuãs
 
	tOPTIONAL


584 
	gEFI_FILE_INFO
 *

585 (
	tEFIAPI
 *
	tEFI_SHELL_GET_FILE_INFO
)(

586 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ


602 
	gCHAR16
 *

603 (
	tEFIAPI
 *
	tEFI_SHELL_GET_FILE_PATH_FROM_DEVICE_PATH
) (

604 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tP©h


621 
	gEFI_STATUS


622 (
	tEFIAPI
 *
	tEFI_SHELL_GET_FILE_POSITION
)(

623 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

624 
	tOUT
 
	tUINT64
 *
	tPosôi⁄


639 
	gEFI_STATUS


640 (
	tEFIAPI
 *
	tEFI_SHELL_GET_FILE_SIZE
)(

641 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

642 
	tOUT
 
	tUINT64
 *
	tSize


663 
	gEFI_STATUS


664 (
	tEFIAPI
 *
	tEFI_SHELL_GET_GUID_FROM_NAME
)(

665 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tGuidName
,

666 
	tOUT
 
	tEFI_GUID
 *
	tGuid


687 
	gEFI_STATUS


688 (
	tEFIAPI
 *
	tEFI_SHELL_GET_GUID_NAME
)(

689 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

690 
	tOUT
 
	tCONST
 
	tCHAR16
 **
	tGuidName


719 
	gEFI_STATUS


720 (
	tEFIAPI
 *
	tEFI_SHELL_GET_HELP_TEXT
) (

721 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tComm™d
,

722 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tSe˘i⁄s
 
	tOPTIONAL
,

723 
	tOUT
 
	tCHAR16
 **
	tHñpText


747 
CONST
 
	tCHAR16
 *

748 (
	tEFIAPI
 *
	tEFI_SHELL_GET_MAP_FROM_DEVICE_PATH
) (

749 
	tIN
 
	tOUT
 
	tEFI_DEVICE_PATH_PROTOCOL
 **
	tDevi˚P©h


761 
	gBOOLEAN


762 (
	tEFIAPI
 *
	tEFI_SHELL_GET_PAGE_BREAK
) (

763 
	tVOID


775 
	gBOOLEAN


776 (
	tEFIAPI
 *
	tEFI_SHELL_IS_ROOT_SHELL
) (

777 
	tVOID


833 
	gEFI_STATUS


834 (
	tEFIAPI
 *
	tEFI_SHELL_OPEN_FILE_BY_NAME
) (

835 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeName
,

836 
	tOUT
 
	tSHELL_FILE_HANDLE
 *
	tFûeH™dÀ
,

837 
	tIN
 
	tUINT64
 
	tO≥nMode


856 
	gEFI_STATUS


857 (
	tEFIAPI
 *
	tEFI_SHELL_OPEN_FILE_LIST
) (

858 
	tIN
 
	tCHAR16
 *
	tP©h
,

859 
	tIN
 
	tUINT64
 
	tO≥nMode
,

860 
	tIN
 
	tOUT
 
	tEFI_SHELL_FILE_INFO
 **
	tFûeLi°


880 
	gEFI_STATUS


881 (
	tEFIAPI
 *
	tEFI_SHELL_OPEN_ROOT
)(

882 
	tIN
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

883 
	tOUT
 
	tSHELL_FILE_HANDLE
 *
	tFûeH™dÀ


902 
	gEFI_STATUS


903 (
	tEFIAPI
 *
	tEFI_SHELL_OPEN_ROOT_BY_HANDLE
)(

904 
	tIN
 
	tEFI_HANDLE
 
	tDevi˚H™dÀ
,

905 
	tOUT
 
	tSHELL_FILE_HANDLE
 *
	tFûeH™dÀ


928 
	gEFI_STATUS


929 (
	tEFIAPI
 *
	tEFI_SHELL_READ_FILE
) (

930 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

931 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRódSize
,

932 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


953 
	gEFI_STATUS


954 (
	tEFIAPI
 *
	tEFI_SHELL_REGISTER_GUID_NAME
)(

955 
	tIN
 
	tCONST
 
	tEFI_GUID
 *
	tGuid
,

956 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tGuidName


967 
	gEFI_STATUS


968 (
	tEFIAPI
 *
	tEFI_SHELL_REMOVE_DUP_IN_FILE_LIST
) (

969 
	tIN
 
	tEFI_SHELL_FILE_INFO
 **
	tFûeLi°


991 
	gEFI_STATUS


992 (
	tEFIAPI
 *
	tEFI_SHELL_SET_ALIAS
)(

993 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tComm™d
,

994 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tAlüs
,

995 
	tIN
 
	tBOOLEAN
 
	tRïœ˚
,

996 
	tIN
 
	tBOOLEAN
 
	tVﬁ©ûe


1017 
CONST
 
	tCHAR16
 *

1018 (
	tEFIAPI
 *
	tEFI_SHELL_GET_ALIAS
)(

1019 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tAlüs
,

1020 
	tOUT
 
	tBOOLEAN
 *
	tVﬁ©ûe
 
	tOPTIONAL


1048 
	gEFI_STATUS


1049 (
	tEFIAPI
 *
	tEFI_SHELL_SET_CUR_DIR
) (

1050 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tFûeSy°em
 
	tOPTIONAL
,

1051 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tDú


1076 
	gEFI_STATUS


1077 (
	tEFIAPI
 *
	tEFI_SHELL_SET_ENV
) (

1078 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tName
,

1079 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tVÆue
,

1080 
	tIN
 
	tBOOLEAN
 
	tVﬁ©ûe


1102 
	gEFI_STATUS


1103 (
	tEFIAPI
 *
	tEFI_SHELL_SET_FILE_INFO
)(

1104 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

1105 
	tIN
 
	tCONST
 
	tEFI_FILE_INFO
 *
	tFûeInfo


1124 
	gEFI_STATUS


1125 (
	tEFIAPI
 *
	tEFI_SHELL_SET_FILE_POSITION
)(

1126 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

1127 
	tIN
 
	tUINT64
 
	tPosôi⁄


1143 
	gEFI_STATUS


1144 (
	tEFIAPI
 *
	tEFI_SHELL_SET_MAP
)(

1145 
	tIN
 
	tCONST
 
	tEFI_DEVICE_PATH_PROTOCOL
 *
	tDevi˚P©h
,

1146 
	tIN
 
	tCONST
 
	tCHAR16
 *
	tM≠pög


1174 
	gEFI_STATUS


1175 (
	tEFIAPI
 *
	tEFI_SHELL_WRITE_FILE
)(

1176 
	tIN
 
	tSHELL_FILE_HANDLE
 
	tFûeH™dÀ
,

1177 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

1178 
	tIN
 
	tVOID
 *
	tBuf„r


1205 
	s_EFI_SHELL_PROTOCOL
 {

1206 
EFI_SHELL_EXECUTE
 
	mExecuã
;

1207 
EFI_SHELL_GET_ENV
 
	mGëEnv
;

1208 
EFI_SHELL_SET_ENV
 
	mSëEnv
;

1209 
EFI_SHELL_GET_ALIAS
 
	mGëAlüs
;

1210 
EFI_SHELL_SET_ALIAS
 
	mSëAlüs
;

1211 
EFI_SHELL_GET_HELP_TEXT
 
	mGëHñpText
;

1212 
EFI_SHELL_GET_DEVICE_PATH_FROM_MAP
 
	mGëDevi˚P©hFromM≠
;

1213 
EFI_SHELL_GET_MAP_FROM_DEVICE_PATH
 
	mGëM≠FromDevi˚P©h
;

1214 
EFI_SHELL_GET_DEVICE_PATH_FROM_FILE_PATH
 
	mGëDevi˚P©hFromFûeP©h
;

1215 
EFI_SHELL_GET_FILE_PATH_FROM_DEVICE_PATH
 
	mGëFûeP©hFromDevi˚P©h
;

1216 
EFI_SHELL_SET_MAP
 
	mSëM≠
;

1217 
EFI_SHELL_GET_CUR_DIR
 
	mGëCurDú
;

1218 
EFI_SHELL_SET_CUR_DIR
 
	mSëCurDú
;

1219 
EFI_SHELL_OPEN_FILE_LIST
 
	mO≥nFûeLi°
;

1220 
EFI_SHELL_FREE_FILE_LIST
 
	mFªeFûeLi°
;

1221 
EFI_SHELL_REMOVE_DUP_IN_FILE_LIST
 
	mRemoveDupInFûeLi°
;

1222 
EFI_SHELL_BATCH_IS_ACTIVE
 
	mB©chIsA˘ive
;

1223 
EFI_SHELL_IS_ROOT_SHELL
 
	mIsRoŸShñl
;

1224 
EFI_SHELL_ENABLE_PAGE_BREAK
 
	mE«bÀPageBªak
;

1225 
EFI_SHELL_DISABLE_PAGE_BREAK
 
	mDißbÀPageBªak
;

1226 
EFI_SHELL_GET_PAGE_BREAK
 
	mGëPageBªak
;

1227 
EFI_SHELL_GET_DEVICE_NAME
 
	mGëDevi˚Name
;

1228 
EFI_SHELL_GET_FILE_INFO
 
	mGëFûeInfo
;

1229 
EFI_SHELL_SET_FILE_INFO
 
	mSëFûeInfo
;

1230 
EFI_SHELL_OPEN_FILE_BY_NAME
 
	mO≥nFûeByName
;

1231 
EFI_SHELL_CLOSE_FILE
 
	mClo£Fûe
;

1232 
EFI_SHELL_CREATE_FILE
 
	mCª©eFûe
;

1233 
EFI_SHELL_READ_FILE
 
	mRódFûe
;

1234 
EFI_SHELL_WRITE_FILE
 
	mWrôeFûe
;

1235 
EFI_SHELL_DELETE_FILE
 
	mDñëeFûe
;

1236 
EFI_SHELL_DELETE_FILE_BY_NAME
 
	mDñëeFûeByName
;

1237 
EFI_SHELL_GET_FILE_POSITION
 
	mGëFûePosôi⁄
;

1238 
EFI_SHELL_SET_FILE_POSITION
 
	mSëFûePosôi⁄
;

1239 
EFI_SHELL_FLUSH_FILE
 
	mFlushFûe
;

1240 
EFI_SHELL_FIND_FILES
 
	mFödFûes
;

1241 
EFI_SHELL_FIND_FILES_IN_DIR
 
	mFödFûesInDú
;

1242 
EFI_SHELL_GET_FILE_SIZE
 
	mGëFûeSize
;

1243 
EFI_SHELL_OPEN_ROOT
 
	mO≥nRoŸ
;

1244 
EFI_SHELL_OPEN_ROOT_BY_HANDLE
 
	mO≥nRoŸByH™dÀ
;

1245 
EFI_EVENT
 
	mExecuti⁄Bªak
;

1246 
UINT32
 
	mMaj‹Vîsi⁄
;

1247 
UINT32
 
	mMö‹Vîsi⁄
;

1249 
EFI_SHELL_REGISTER_GUID_NAME
 
	mRegi°îGuidName
;

1250 
EFI_SHELL_GET_GUID_NAME
 
	mGëGuidName
;

1251 
EFI_SHELL_GET_GUID_FROM_NAME
 
	mGëGuidFromName
;

1252 
EFI_SHELL_GET_ENV_EX
 
	mGëEnvEx
;

1253 } 
	tEFI_SHELL_PROTOCOL
;

1255 
EFI_GUID
 
gEfiShñlPrŸocﬁGuid
;

1257 
	eShñlVîsi⁄
 {

1258 
	mSHELL_MAJOR_VERSION
 = 2,

1259 
	mSHELL_MINOR_VERSION
 = 2

	@ShellDynamicCommand.h

10 #i‚de‡
__EFI_SHELL_DYNAMIC_COMMAND_PROTOCOL_H__


11 
	#__EFI_SHELL_DYNAMIC_COMMAND_PROTOCOL_H__


	)

13 
	~<PrŸocﬁ/Shñl.h
>

14 
	~<PrŸocﬁ/ShñlP¨amëîs.h
>

17 
	#EFI_SHELL_DYNAMIC_COMMAND_PROTOCOL_GUID
 \

	)

26 
_EFI_SHELL_DYNAMIC_COMMAND_PROTOCOL
 
	tEFI_SHELL_DYNAMIC_COMMAND_PROTOCOL
;

43 
	gSHELL_STATUS


44 (
	tEFIAPI
 * 
	tSHELL_COMMAND_HANDLER
)(

45 
	tIN
 
	tEFI_SHELL_DYNAMIC_COMMAND_PROTOCOL
 *
	tThis
,

46 
	tIN
 
	tEFI_SYSTEM_TABLE
 *
	tSy°emTabÀ
,

47 
	tIN
 
	tEFI_SHELL_PARAMETERS_PROTOCOL
 *
	tShñlP¨amëîs
,

48 
	tIN
 
	tEFI_SHELL_PROTOCOL
 *
	tShñl


62 
	gCHAR16
*

63 (
	tEFIAPI
 * 
	tSHELL_COMMAND_GETHELP
)(

64 
	tIN
 
	tEFI_SHELL_DYNAMIC_COMMAND_PROTOCOL
 *
	tThis
,

65 
	tIN
 
	tCONST
 
	tCHAR8
 *
	tL™guage


69 
	s_EFI_SHELL_DYNAMIC_COMMAND_PROTOCOL
 {

71 
CONST
 
CHAR16
 *
	mComm™dName
;

72 
SHELL_COMMAND_HANDLER
 
	mH™dÀr
;

73 
SHELL_COMMAND_GETHELP
 
	mGëHñp
;

77 
EFI_GUID
 
gEfiShñlDy«micComm™dPrŸocﬁGuid
;

	@ShellParameters.h

9 #i‚de‡
__EFI_SHELL_PARAMETERS_PROTOCOL_H__


10 
	#__EFI_SHELL_PARAMETERS_PROTOCOL_H__


	)

12 
	~<PrŸocﬁ/Shñl.h
>

14 
	#EFI_SHELL_PARAMETERS_PROTOCOL_GUID
 \

	)

19 
	s_EFI_SHELL_PARAMETERS_PROTOCOL
 {

26 
CHAR16
 **
	mArgv
;

31 
UINTN
 
	mArgc
;

37 
SHELL_FILE_HANDLE
 
	mStdIn
;

43 
SHELL_FILE_HANDLE
 
	mStdOut
;

49 
SHELL_FILE_HANDLE
 
	mStdEº
;

50 } 
	tEFI_SHELL_PARAMETERS_PROTOCOL
;

52 
EFI_GUID
 
gEfiShñlP¨amëîsPrŸocﬁGuid
;

	@SimpleFileSystem.h

15 #i‚de‡
__SIMPLE_FILE_SYSTEM_H__


16 
	#__SIMPLE_FILE_SYSTEM_H__


	)

18 
	#EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID
 \

	)

23 
_EFI_SIMPLE_FILE_SYSTEM_PROTOCOL
 
	tEFI_SIMPLE_FILE_SYSTEM_PROTOCOL
;

25 
_EFI_FILE_PROTOCOL
 
	tEFI_FILE_PROTOCOL
;

26 
_EFI_FILE_PROTOCOL
 *
	tEFI_FILE_HANDLE
;

31 
	#SIMPLE_FILE_SYSTEM_PROTOCOL
 
EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID


	)

36 
EFI_SIMPLE_FILE_SYSTEM_PROTOCOL
 
	tEFI_FILE_IO_INTERFACE
;

37 
EFI_FILE_PROTOCOL
 
	tEFI_FILE
;

60 
	gEFI_STATUS


61 (
	tEFIAPI
 *
	tEFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME
)(

62 
	tIN
 
	tEFI_SIMPLE_FILE_SYSTEM_PROTOCOL
 *
	tThis
,

63 
	tOUT
 
	tEFI_FILE_PROTOCOL
 **
	tRoŸ


66 
	#EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION
 0x00010000

	)

71 
	#EFI_FILE_IO_INTERFACE_REVISION
 
EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION


	)

73 
	s_EFI_SIMPLE_FILE_SYSTEM_PROTOCOL
 {

79 
UINT64
 
	mRevisi⁄
;

80 
EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME
 
	mO≥nVﬁume
;

114 
	gEFI_STATUS


115 (
	tEFIAPI
 *
	tEFI_FILE_OPEN
)(

116 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

117 
	tOUT
 
	tEFI_FILE_PROTOCOL
 **
	tNewH™dÀ
,

118 
	tIN
 
	tCHAR16
 *
	tFûeName
,

119 
	tIN
 
	tUINT64
 
	tO≥nMode
,

120 
	tIN
 
	tUINT64
 
	tAâribuãs


126 
	#EFI_FILE_MODE_READ
 0x0000000000000001ULL

	)

127 
	#EFI_FILE_MODE_WRITE
 0x0000000000000002ULL

	)

128 
	#EFI_FILE_MODE_CREATE
 0x8000000000000000ULL

	)

133 
	#EFI_FILE_READ_ONLY
 0x0000000000000001ULL

	)

134 
	#EFI_FILE_HIDDEN
 0x0000000000000002ULL

	)

135 
	#EFI_FILE_SYSTEM
 0x0000000000000004ULL

	)

136 
	#EFI_FILE_RESERVED
 0x0000000000000008ULL

	)

137 
	#EFI_FILE_DIRECTORY
 0x0000000000000010ULL

	)

138 
	#EFI_FILE_ARCHIVE
 0x0000000000000020ULL

	)

139 
	#EFI_FILE_VALID_ATTR
 0x0000000000000037ULL

	)

151 
	gEFI_STATUS


152 (
	tEFIAPI
 *
	tEFI_FILE_CLOSE
)(

153 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis


167 
	gEFI_STATUS


168 (
	tEFIAPI
 *
	tEFI_FILE_DELETE
)(

169 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis


193 
	gEFI_STATUS


194 (
	tEFIAPI
 *
	tEFI_FILE_READ
)(

195 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

196 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

197 
	tOUT
 
	tVOID
 *
	tBuf„r


221 
	gEFI_STATUS


222 (
	tEFIAPI
 *
	tEFI_FILE_WRITE
)(

223 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

224 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

225 
	tIN
 
	tVOID
 *
	tBuf„r


242 
	gEFI_STATUS


243 (
	tEFIAPI
 *
	tEFI_FILE_SET_POSITION
)(

244 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

245 
	tIN
 
	tUINT64
 
	tPosôi⁄


261 
	gEFI_STATUS


262 (
	tEFIAPI
 *
	tEFI_FILE_GET_POSITION
)(

263 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

264 
	tOUT
 
	tUINT64
 *
	tPosôi⁄


288 
	gEFI_STATUS


289 (
	tEFIAPI
 *
	tEFI_FILE_GET_INFO
)(

290 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

291 
	tIN
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

292 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

293 
	tOUT
 
	tVOID
 *
	tBuf„r


331 
	gEFI_STATUS


332 (
	tEFIAPI
 *
	tEFI_FILE_SET_INFO
)(

333 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

334 
	tIN
 
	tEFI_GUID
 *
	tInf‹m©i⁄Ty≥
,

335 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

336 
	tIN
 
	tVOID
 *
	tBuf„r


355 
	gEFI_STATUS


356 (
	tEFIAPI
 *
	tEFI_FILE_FLUSH
)(

357 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis


368 
EFI_EVENT
 
	mEvít
;

373 
EFI_STATUS
 
	mSètus
;

383 
UINTN
 
	mBuf„rSize
;

391 
VOID
 *
	mBuf„r
;

392 } 
	tEFI_FILE_IO_TOKEN
;

427 
	gEFI_STATUS


428 (
	tEFIAPI
 *
	tEFI_FILE_OPEN_EX
)(

429 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

430 
	tOUT
 
	tEFI_FILE_PROTOCOL
 **
	tNewH™dÀ
,

431 
	tIN
 
	tCHAR16
 *
	tFûeName
,

432 
	tIN
 
	tUINT64
 
	tO≥nMode
,

433 
	tIN
 
	tUINT64
 
	tAâribuãs
,

434 
	tIN
 
	tOUT
 
	tEFI_FILE_IO_TOKEN
 *
	tTokí


455 
	gEFI_STATUS


456 (
	tEFIAPI
 *
	tEFI_FILE_READ_EX
) (

457 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

458 
	tIN
 
	tOUT
 
	tEFI_FILE_IO_TOKEN
 *
	tTokí


482 
	gEFI_STATUS


483 (
	tEFIAPI
 *
	tEFI_FILE_WRITE_EX
) (

484 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

485 
	tIN
 
	tOUT
 
	tEFI_FILE_IO_TOKEN
 *
	tTokí


508 
	gEFI_STATUS


509 (
	tEFIAPI
 *
	tEFI_FILE_FLUSH_EX
) (

510 
	tIN
 
	tEFI_FILE_PROTOCOL
 *
	tThis
,

511 
	tIN
 
	tOUT
 
	tEFI_FILE_IO_TOKEN
 *
	tTokí


514 
	#EFI_FILE_PROTOCOL_REVISION
 0x00010000

	)

515 
	#EFI_FILE_PROTOCOL_REVISION2
 0x00020000

	)

516 
	#EFI_FILE_PROTOCOL_LATEST_REVISION
 
EFI_FILE_PROTOCOL_REVISION2


	)

521 
	#EFI_FILE_REVISION
 
EFI_FILE_PROTOCOL_REVISION


	)

530 
	s_EFI_FILE_PROTOCOL
 {

536 
UINT64
 
	mRevisi⁄
;

537 
EFI_FILE_OPEN
 
	mO≥n
;

538 
EFI_FILE_CLOSE
 
	mClo£
;

539 
EFI_FILE_DELETE
 
	mDñëe
;

540 
EFI_FILE_READ
 
	mRód
;

541 
EFI_FILE_WRITE
 
	mWrôe
;

542 
EFI_FILE_GET_POSITION
 
	mGëPosôi⁄
;

543 
EFI_FILE_SET_POSITION
 
	mSëPosôi⁄
;

544 
EFI_FILE_GET_INFO
 
	mGëInfo
;

545 
EFI_FILE_SET_INFO
 
	mSëInfo
;

546 
EFI_FILE_FLUSH
 
	mFlush
;

547 
EFI_FILE_OPEN_EX
 
	mO≥nEx
;

548 
EFI_FILE_READ_EX
 
	mRódEx
;

549 
EFI_FILE_WRITE_EX
 
	mWrôeEx
;

550 
EFI_FILE_FLUSH_EX
 
	mFlushEx
;

554 
EFI_GUID
 
gEfiSim∂eFûeSy°emPrŸocﬁGuid
;

	@SimpleNetwork.h

20 #i‚de‡
__SIMPLE_NETWORK_H__


21 
	#__SIMPLE_NETWORK_H__


	)

23 
	#EFI_SIMPLE_NETWORK_PROTOCOL_GUID
 \

	)

28 
_EFI_SIMPLE_NETWORK_PROTOCOL
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
;

34 
EFI_SIMPLE_NETWORK_PROTOCOL
 
	tEFI_SIMPLE_NETWORK
;

44 
UINT64
 
	mRxTŸÆFømes
;

49 
UINT64
 
	mRxGoodFømes
;

55 
UINT64
 
	mRxUndîsizeFømes
;

61 
UINT64
 
	mRxOvîsizeFømes
;

66 
UINT64
 
	mRxDr›≥dFømes
;

71 
UINT64
 
	mRxUniˇ°Fømes
;

76 
UINT64
 
	mRxBrﬂdˇ°Fømes
;

81 
UINT64
 
	mRxMu…iˇ°Fømes
;

86 
UINT64
 
	mRxCrcEº‹Fømes
;

92 
UINT64
 
	mRxTŸÆByãs
;

97 
UINT64
 
	mTxTŸÆFømes
;

98 
UINT64
 
	mTxGoodFømes
;

99 
UINT64
 
	mTxUndîsizeFømes
;

100 
UINT64
 
	mTxOvîsizeFømes
;

101 
UINT64
 
	mTxDr›≥dFømes
;

102 
UINT64
 
	mTxUniˇ°Fømes
;

103 
UINT64
 
	mTxBrﬂdˇ°Fømes
;

104 
UINT64
 
	mTxMu…iˇ°Fømes
;

105 
UINT64
 
	mTxCrcEº‹Fømes
;

106 
UINT64
 
	mTxTŸÆByãs
;

111 
UINT64
 
	mCﬁlisi⁄s
;

116 
UINT64
 
	mUnsuµ‹ãdPrŸocﬁ
;

121 
UINT64
 
	mRxDu∂iˇãdFømes
;

126 
UINT64
 
	mRxDe¸y±Eº‹Fømes
;

131 
UINT64
 
	mTxEº‹Fømes
;

136 
UINT64
 
	mTxRëryFømes
;

137 } 
	tEFI_NETWORK_STATISTICS
;

145 
	mEfiSim∂eNëw‹kSt›≥d
,

146 
	mEfiSim∂eNëw‹kSèπed
,

147 
	mEfiSim∂eNëw‹kInôülized
,

148 
	mEfiSim∂eNëw‹kMaxSèã


149 } 
	tEFI_SIMPLE_NETWORK_STATE
;

151 
	#EFI_SIMPLE_NETWORK_RECEIVE_UNICAST
 0x01

	)

152 
	#EFI_SIMPLE_NETWORK_RECEIVE_MULTICAST
 0x02

	)

153 
	#EFI_SIMPLE_NETWORK_RECEIVE_BROADCAST
 0x04

	)

154 
	#EFI_SIMPLE_NETWORK_RECEIVE_PROMISCUOUS
 0x08

	)

155 
	#EFI_SIMPLE_NETWORK_RECEIVE_PROMISCUOUS_MULTICAST
 0x10

	)

157 
	#EFI_SIMPLE_NETWORK_RECEIVE_INTERRUPT
 0x01

	)

158 
	#EFI_SIMPLE_NETWORK_TRANSMIT_INTERRUPT
 0x02

	)

159 
	#EFI_SIMPLE_NETWORK_COMMAND_INTERRUPT
 0x04

	)

160 
	#EFI_SIMPLE_NETWORK_SOFTWARE_INTERRUPT
 0x08

	)

162 
	#MAX_MCAST_FILTER_CNT
 16

	)

167 
UINT32
 
	mSèã
;

171 
UINT32
 
	mHwAddªssSize
;

175 
UINT32
 
	mMedüHódîSize
;

179 
UINT32
 
	mMaxPackëSize
;

183 
UINT32
 
	mNvRamSize
;

190 
UINT32
 
	mNvRamAc˚ssSize
;

194 
UINT32
 
	mRe˚iveFûãrMask
;

198 
UINT32
 
	mRe˚iveFûãrSëtög
;

202 
UINT32
 
	mMaxMCa°FûãrCou¡
;

206 
UINT32
 
	mMCa°FûãrCou¡
;

210 
EFI_MAC_ADDRESS
 
	mMCa°Fûãr
[
MAX_MCAST_FILTER_CNT
];

214 
EFI_MAC_ADDRESS
 
	mCuºítAddªss
;

218 
EFI_MAC_ADDRESS
 
	mBrﬂdˇ°Addªss
;

222 
EFI_MAC_ADDRESS
 
	mPîm™ítAddªss
;

226 
UINT8
 
	mIfTy≥
;

230 
BOOLEAN
 
	mMacAddªssCh™góbÀ
;

234 
BOOLEAN
 
	mMu…ùÀTxSuµ‹ãd
;

238 
BOOLEAN
 
	mMedüPª£¡Suµ‹ãd
;

242 
BOOLEAN
 
	mMedüPª£¡
;

243 } 
	tEFI_SIMPLE_NETWORK_MODE
;

261 
	gEFI_STATUS


262 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_START
)(

263 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis


279 
	gEFI_STATUS


280 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_STOP
)(

281 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis


311 
	gEFI_STATUS


312 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_INITIALIZE
)(

313 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

314 
	tIN
 
	tUINTN
 
	tExåaRxBuf„rSize
 
	tOPTIONAL
,

315 
	tIN
 
	tUINTN
 
	tExåaTxBuf„rSize
 
	tOPTIONAL


335 
	gEFI_STATUS


336 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_RESET
)(

337 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

338 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


355 
	gEFI_STATUS


356 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_SHUTDOWN
)(

357 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis


385 
	gEFI_STATUS


386 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_RECEIVE_FILTERS
)(

387 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

388 
	tIN
 
	tUINT32
 
	tE«bÀ
,

389 
	tIN
 
	tUINT32
 
	tDißbÀ
,

390 
	tIN
 
	tBOOLEAN
 
	tRe£tMCa°Fûãr
,

391 
	tIN
 
	tUINTN
 
	tMCa°FûãrC¡
 
	tOPTIONAL
,

392 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tMCa°Fûãr
 
	tOPTIONAL


411 
	gEFI_STATUS


412 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_STATION_ADDRESS
)(

413 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

414 
	tIN
 
	tBOOLEAN
 
	tRe£t
,

415 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tNew
 
	tOPTIONAL


440 
	gEFI_STATUS


441 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_STATISTICS
)(

442 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

443 
	tIN
 
	tBOOLEAN
 
	tRe£t
,

444 
	tIN
 
	tOUT
 
	tUINTN
 *
	tSèti°icsSize
 
	tOPTIONAL
,

445 
	tOUT
 
	tEFI_NETWORK_STATISTICS
 *
	tSèti°icsTabÀ
 
	tOPTIONAL


470 
	gEFI_STATUS


471 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_MCAST_IP_TO_MAC
)(

472 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

473 
	tIN
 
	tBOOLEAN
 
	tIPv6
,

474 
	tIN
 
	tEFI_IP_ADDRESS
 *
	tIP
,

475 
	tOUT
 
	tEFI_MAC_ADDRESS
 *
	tMAC


499 
	gEFI_STATUS


500 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_NVDATA
)(

501 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

502 
	tIN
 
	tBOOLEAN
 
	tRódWrôe
,

503 
	tIN
 
	tUINTN
 
	tOff£t
,

504 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

505 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


534 
	gEFI_STATUS


535 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_GET_STATUS
)(

536 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

537 
	tOUT
 
	tUINT32
 *
	tI¡îru±Sètus
 
	tOPTIONAL
,

538 
	tOUT
 
	tVOID
 **
	tTxBuf
 
	tOPTIONAL


575 
	gEFI_STATUS


576 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_TRANSMIT
)(

577 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

578 
	tIN
 
	tUINTN
 
	tHódîSize
,

579 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

580 
	tIN
 
	tVOID
 *
	tBuf„r
,

581 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tSrcAddr
 
	tOPTIONAL
,

582 
	tIN
 
	tEFI_MAC_ADDRESS
 *
	tDe°Addr
 
	tOPTIONAL
,

583 
	tIN
 
	tUINT16
 *
	tPrŸocﬁ
 
	tOPTIONAL


619 
	gEFI_STATUS


620 (
	tEFIAPI
 *
	tEFI_SIMPLE_NETWORK_RECEIVE
)(

621 
	tIN
 
	tEFI_SIMPLE_NETWORK_PROTOCOL
 *
	tThis
,

622 
	tOUT
 
	tUINTN
 *
	tHódîSize
 
	tOPTIONAL
,

623 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

624 
	tOUT
 
	tVOID
 *
	tBuf„r
,

625 
	tOUT
 
	tEFI_MAC_ADDRESS
 *
	tSrcAddr
 
	tOPTIONAL
,

626 
	tOUT
 
	tEFI_MAC_ADDRESS
 *
	tDe°Addr
 
	tOPTIONAL
,

627 
	tOUT
 
	tUINT16
 *
	tPrŸocﬁ
 
	tOPTIONAL


630 
	#EFI_SIMPLE_NETWORK_PROTOCOL_REVISION
 0x00010000

	)

635 
	#EFI_SIMPLE_NETWORK_INTERFACE_REVISION
 
EFI_SIMPLE_NETWORK_PROTOCOL_REVISION


	)

643 
	s_EFI_SIMPLE_NETWORK_PROTOCOL
 {

649 
UINT64
 
	mRevisi⁄
;

650 
EFI_SIMPLE_NETWORK_START
 
	mSèπ
;

651 
EFI_SIMPLE_NETWORK_STOP
 
	mSt›
;

652 
EFI_SIMPLE_NETWORK_INITIALIZE
 
	mInôülize
;

653 
EFI_SIMPLE_NETWORK_RESET
 
	mRe£t
;

654 
EFI_SIMPLE_NETWORK_SHUTDOWN
 
	mShutdown
;

655 
EFI_SIMPLE_NETWORK_RECEIVE_FILTERS
 
	mRe˚iveFûãrs
;

656 
EFI_SIMPLE_NETWORK_STATION_ADDRESS
 
	mSèti⁄Addªss
;

657 
EFI_SIMPLE_NETWORK_STATISTICS
 
	mSèti°ics
;

658 
EFI_SIMPLE_NETWORK_MCAST_IP_TO_MAC
 
	mMCa°IpToMac
;

659 
EFI_SIMPLE_NETWORK_NVDATA
 
	mNvD©a
;

660 
EFI_SIMPLE_NETWORK_GET_STATUS
 
	mGëSètus
;

661 
EFI_SIMPLE_NETWORK_TRANSMIT
 
	mTønsmô
;

662 
EFI_SIMPLE_NETWORK_RECEIVE
 
	mRe˚ive
;

666 
EFI_EVENT
 
	mWaôF‹Packë
;

670 
EFI_SIMPLE_NETWORK_MODE
 *
	mMode
;

673 
EFI_GUID
 
gEfiSim∂eNëw‹kPrŸocﬁGuid
;

	@SimplePointer.h

11 #i‚de‡
__SIMPLE_POINTER_H__


12 
	#__SIMPLE_POINTER_H__


	)

14 
	#EFI_SIMPLE_POINTER_PROTOCOL_GUID
 \

	)

19 
_EFI_SIMPLE_POINTER_PROTOCOL
 
	tEFI_SIMPLE_POINTER_PROTOCOL
;

28 
INT32
 
	mRñ©iveMovemítX
;

32 
INT32
 
	mRñ©iveMovemítY
;

36 
INT32
 
	mRñ©iveMovemítZ
;

41 
BOOLEAN
 
	mLe·Buâ⁄
;

46 
BOOLEAN
 
	mRightBuâ⁄
;

47 } 
	tEFI_SIMPLE_POINTER_STATE
;

54 
UINT64
 
	mResﬁuti⁄X
;

59 
UINT64
 
	mResﬁuti⁄Y
;

64 
UINT64
 
	mResﬁuti⁄Z
;

68 
BOOLEAN
 
	mLe·Buâ⁄
;

72 
BOOLEAN
 
	mRightBuâ⁄
;

73 } 
	tEFI_SIMPLE_POINTER_MODE
;

88 
	gEFI_STATUS


89 (
	tEFIAPI
 *
	tEFI_SIMPLE_POINTER_RESET
)(

90 
	tIN
 
	tEFI_SIMPLE_POINTER_PROTOCOL
 *
	tThis
,

91 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


109 
	gEFI_STATUS


110 (
	tEFIAPI
 *
	tEFI_SIMPLE_POINTER_GET_STATE
)(

111 
	tIN
 
	tEFI_SIMPLE_POINTER_PROTOCOL
 *
	tThis
,

112 
	tOUT
 
	tEFI_SIMPLE_POINTER_STATE
 *
	tSèã


122 
	s_EFI_SIMPLE_POINTER_PROTOCOL
 {

123 
EFI_SIMPLE_POINTER_RESET
 
	mRe£t
;

124 
EFI_SIMPLE_POINTER_GET_STATE
 
	mGëSèã
;

128 
EFI_EVENT
 
	mWaôF‹I≈ut
;

132 
EFI_SIMPLE_POINTER_MODE
 *
	mMode
;

135 
EFI_GUID
 
gEfiSim∂ePoöãrPrŸocﬁGuid
;

	@SimpleTextIn.h

12 #i‚de‡
__SIMPLE_TEXT_IN_PROTOCOL_H__


13 
	#__SIMPLE_TEXT_IN_PROTOCOL_H__


	)

15 
	#EFI_SIMPLE_TEXT_INPUT_PROTOCOL_GUID
 \

	)

20 
_EFI_SIMPLE_TEXT_INPUT_PROTOCOL
 
	tEFI_SIMPLE_TEXT_INPUT_PROTOCOL
;

25 
	#SIMPLE_INPUT_PROTOCOL
 
EFI_SIMPLE_TEXT_INPUT_PROTOCOL_GUID


	)

30 
_EFI_SIMPLE_TEXT_INPUT_PROTOCOL
 
	tSIMPLE_INPUT_INTERFACE
;

36 
UINT16
 
	mSˇnCode
;

37 
CHAR16
 
	mUnicodeCh¨
;

38 } 
	tEFI_INPUT_KEY
;

43 
	#CHAR_BACKSPACE
 0x0008

	)

44 
	#CHAR_TAB
 0x0009

	)

45 
	#CHAR_LINEFEED
 0x000A

	)

46 
	#CHAR_CARRIAGE_RETURN
 0x000D

	)

51 
	#SCAN_NULL
 0x0000

	)

52 
	#SCAN_UP
 0x0001

	)

53 
	#SCAN_DOWN
 0x0002

	)

54 
	#SCAN_RIGHT
 0x0003

	)

55 
	#SCAN_LEFT
 0x0004

	)

56 
	#SCAN_HOME
 0x0005

	)

57 
	#SCAN_END
 0x0006

	)

58 
	#SCAN_INSERT
 0x0007

	)

59 
	#SCAN_DELETE
 0x0008

	)

60 
	#SCAN_PAGE_UP
 0x0009

	)

61 
	#SCAN_PAGE_DOWN
 0x000A

	)

62 
	#SCAN_F1
 0x000B

	)

63 
	#SCAN_F2
 0x000C

	)

64 
	#SCAN_F3
 0x000D

	)

65 
	#SCAN_F4
 0x000E

	)

66 
	#SCAN_F5
 0x000F

	)

67 
	#SCAN_F6
 0x0010

	)

68 
	#SCAN_F7
 0x0011

	)

69 
	#SCAN_F8
 0x0012

	)

70 
	#SCAN_F9
 0x0013

	)

71 
	#SCAN_F10
 0x0014

	)

72 
	#SCAN_ESC
 0x0017

	)

85 
	gEFI_STATUS


86 (
	tEFIAPI
 *
	tEFI_INPUT_RESET
)(

87 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_PROTOCOL
 *
	tThis
,

88 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


106 
	gEFI_STATUS


107 (
	tEFIAPI
 *
	tEFI_INPUT_READ_KEY
)(

108 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_PROTOCOL
 *
	tThis
,

109 
	tOUT
 
	tEFI_INPUT_KEY
 *
	tKey


116 
	s_EFI_SIMPLE_TEXT_INPUT_PROTOCOL
 {

117 
EFI_INPUT_RESET
 
	mRe£t
;

118 
EFI_INPUT_READ_KEY
 
	mRódKeySåoke
;

122 
EFI_EVENT
 
	mWaôF‹Key
;

125 
EFI_GUID
 
gEfiSim∂eTextInPrŸocﬁGuid
;

	@SimpleTextInEx.h

13 #i‚de‡
__SIMPLE_TEXT_IN_EX_H__


14 
	#__SIMPLE_TEXT_IN_EX_H__


	)

16 
	~<PrŸocﬁ/Sim∂eTextIn.h
>

18 
	#EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL_GUID
 \

	)

22 
_EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_INPUT_RESET_EX
)(

52 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 *
	tThis
,

53 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


62 
UINT8
 
	tEFI_KEY_TOGGLE_STATE
;

64 
	s_EFI_KEY_STATE
 {

71 
UINT32
 
	mKeyShi·Sèã
;

78 
EFI_KEY_TOGGLE_STATE
 
	mKeyToggÀSèã
;

79 } 
	tEFI_KEY_STATE
;

85 
EFI_INPUT_KEY
 
	mKey
;

89 
EFI_KEY_STATE
 
	mKeySèã
;

90 } 
	tEFI_KEY_DATA
;

98 
	#EFI_SHIFT_STATE_VALID
 0x80000000

	)

99 
	#EFI_RIGHT_SHIFT_PRESSED
 0x00000001

	)

100 
	#EFI_LEFT_SHIFT_PRESSED
 0x00000002

	)

101 
	#EFI_RIGHT_CONTROL_PRESSED
 0x00000004

	)

102 
	#EFI_LEFT_CONTROL_PRESSED
 0x00000008

	)

103 
	#EFI_RIGHT_ALT_PRESSED
 0x00000010

	)

104 
	#EFI_LEFT_ALT_PRESSED
 0x00000020

	)

105 
	#EFI_RIGHT_LOGO_PRESSED
 0x00000040

	)

106 
	#EFI_LEFT_LOGO_PRESSED
 0x00000080

	)

107 
	#EFI_MENU_KEY_PRESSED
 0x00000100

	)

108 
	#EFI_SYS_REQ_PRESSED
 0x00000200

	)

113 
	#EFI_TOGGLE_STATE_VALID
 0x80

	)

114 
	#EFI_KEY_STATE_EXPOSED
 0x40

	)

115 
	#EFI_SCROLL_LOCK_ACTIVE
 0x01

	)

116 
	#EFI_NUM_LOCK_ACTIVE
 0x02

	)

117 
	#EFI_CAPS_LOCK_ACTIVE
 0x04

	)

122 
	#SCAN_F11
 0x0015

	)

123 
	#SCAN_F12
 0x0016

	)

124 
	#SCAN_PAUSE
 0x0048

	)

125 
	#SCAN_F13
 0x0068

	)

126 
	#SCAN_F14
 0x0069

	)

127 
	#SCAN_F15
 0x006A

	)

128 
	#SCAN_F16
 0x006B

	)

129 
	#SCAN_F17
 0x006C

	)

130 
	#SCAN_F18
 0x006D

	)

131 
	#SCAN_F19
 0x006E

	)

132 
	#SCAN_F20
 0x006F

	)

133 
	#SCAN_F21
 0x0070

	)

134 
	#SCAN_F22
 0x0071

	)

135 
	#SCAN_F23
 0x0072

	)

136 
	#SCAN_F24
 0x0073

	)

137 
	#SCAN_MUTE
 0x007F

	)

138 
	#SCAN_VOLUME_UP
 0x0080

	)

139 
	#SCAN_VOLUME_DOWN
 0x0081

	)

140 
	#SCAN_BRIGHTNESS_UP
 0x0100

	)

141 
	#SCAN_BRIGHTNESS_DOWN
 0x0101

	)

142 
	#SCAN_SUSPEND
 0x0102

	)

143 
	#SCAN_HIBERNATE
 0x0103

	)

144 
	#SCAN_TOGGLE_DISPLAY
 0x0104

	)

145 
	#SCAN_RECOVERY
 0x0105

	)

146 
	#SCAN_EJECT
 0x0106

	)

195 
	gEFI_STATUS


196 (
	tEFIAPI
 *
	tEFI_INPUT_READ_KEY_EX
)(

197 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 *
	tThis
,

198 
	tOUT
 
	tEFI_KEY_DATA
 *
	tKeyD©a


222 
	gEFI_STATUS


223 (
	tEFIAPI
 *
	tEFI_SET_STATE
)(

224 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 *
	tThis
,

225 
	tIN
 
	tEFI_KEY_TOGGLE_STATE
 *
	tKeyToggÀSèã


232 
	gEFI_STATUS


233 (
	tEFIAPI
 *
	tEFI_KEY_NOTIFY_FUNCTION
)(

234 
	tIN
 
	tEFI_KEY_DATA
 *
	tKeyD©a


264 
	gEFI_STATUS


265 (
	tEFIAPI
 *
	tEFI_REGISTER_KEYSTROKE_NOTIFY
)(

266 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 *
	tThis
,

267 
	tIN
 
	tEFI_KEY_DATA
 *
	tKeyD©a
,

268 
	tIN
 
	tEFI_KEY_NOTIFY_FUNCTION
 
	tKeyNŸifiˇti⁄Fun˘i⁄
,

269 
	tOUT
 
	tVOID
 **
	tNŸifyH™dÀ


288 
	gEFI_STATUS


289 (
	tEFIAPI
 *
	tEFI_UNREGISTER_KEYSTROKE_NOTIFY
)(

290 
	tIN
 
	tEFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
 *
	tThis
,

291 
	tIN
 
	tVOID
 *
	tNŸifiˇti⁄H™dÀ


301 
	s_EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
{

302 
EFI_INPUT_RESET_EX
 
	mRe£t
;

303 
EFI_INPUT_READ_KEY_EX
 
	mRódKeySåokeEx
;

307 
EFI_EVENT
 
	mWaôF‹KeyEx
;

308 
EFI_SET_STATE
 
	mSëSèã
;

309 
EFI_REGISTER_KEYSTROKE_NOTIFY
 
	mRegi°îKeyNŸify
;

310 
EFI_UNREGISTER_KEYSTROKE_NOTIFY
 
	mUƒegi°îKeyNŸify
;

314 
EFI_GUID
 
gEfiSim∂eTextI≈utExPrŸocﬁGuid
;

	@SimpleTextOut.h

14 #i‚de‡
__SIMPLE_TEXT_OUT_H__


15 
	#__SIMPLE_TEXT_OUT_H__


	)

17 
	#EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL_GUID
 \

	)

25 
	#SIMPLE_TEXT_OUTPUT_PROTOCOL
 
EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL_GUID


	)

27 
_EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
;

32 
EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 
	tSIMPLE_TEXT_OUTPUT_INTERFACE
;

37 
	#BOXDRAW_HORIZONTAL
 0x2500

	)

38 
	#BOXDRAW_VERTICAL
 0x2502

	)

39 
	#BOXDRAW_DOWN_RIGHT
 0x250c

	)

40 
	#BOXDRAW_DOWN_LEFT
 0x2510

	)

41 
	#BOXDRAW_UP_RIGHT
 0x2514

	)

42 
	#BOXDRAW_UP_LEFT
 0x2518

	)

43 
	#BOXDRAW_VERTICAL_RIGHT
 0x251c

	)

44 
	#BOXDRAW_VERTICAL_LEFT
 0x2524

	)

45 
	#BOXDRAW_DOWN_HORIZONTAL
 0x252c

	)

46 
	#BOXDRAW_UP_HORIZONTAL
 0x2534

	)

47 
	#BOXDRAW_VERTICAL_HORIZONTAL
 0x253c

	)

48 
	#BOXDRAW_DOUBLE_HORIZONTAL
 0x2550

	)

49 
	#BOXDRAW_DOUBLE_VERTICAL
 0x2551

	)

50 
	#BOXDRAW_DOWN_RIGHT_DOUBLE
 0x2552

	)

51 
	#BOXDRAW_DOWN_DOUBLE_RIGHT
 0x2553

	)

52 
	#BOXDRAW_DOUBLE_DOWN_RIGHT
 0x2554

	)

53 
	#BOXDRAW_DOWN_LEFT_DOUBLE
 0x2555

	)

54 
	#BOXDRAW_DOWN_DOUBLE_LEFT
 0x2556

	)

55 
	#BOXDRAW_DOUBLE_DOWN_LEFT
 0x2557

	)

56 
	#BOXDRAW_UP_RIGHT_DOUBLE
 0x2558

	)

57 
	#BOXDRAW_UP_DOUBLE_RIGHT
 0x2559

	)

58 
	#BOXDRAW_DOUBLE_UP_RIGHT
 0x255a

	)

59 
	#BOXDRAW_UP_LEFT_DOUBLE
 0x255b

	)

60 
	#BOXDRAW_UP_DOUBLE_LEFT
 0x255c

	)

61 
	#BOXDRAW_DOUBLE_UP_LEFT
 0x255d

	)

62 
	#BOXDRAW_VERTICAL_RIGHT_DOUBLE
 0x255e

	)

63 
	#BOXDRAW_VERTICAL_DOUBLE_RIGHT
 0x255f

	)

64 
	#BOXDRAW_DOUBLE_VERTICAL_RIGHT
 0x2560

	)

65 
	#BOXDRAW_VERTICAL_LEFT_DOUBLE
 0x2561

	)

66 
	#BOXDRAW_VERTICAL_DOUBLE_LEFT
 0x2562

	)

67 
	#BOXDRAW_DOUBLE_VERTICAL_LEFT
 0x2563

	)

68 
	#BOXDRAW_DOWN_HORIZONTAL_DOUBLE
 0x2564

	)

69 
	#BOXDRAW_DOWN_DOUBLE_HORIZONTAL
 0x2565

	)

70 
	#BOXDRAW_DOUBLE_DOWN_HORIZONTAL
 0x2566

	)

71 
	#BOXDRAW_UP_HORIZONTAL_DOUBLE
 0x2567

	)

72 
	#BOXDRAW_UP_DOUBLE_HORIZONTAL
 0x2568

	)

73 
	#BOXDRAW_DOUBLE_UP_HORIZONTAL
 0x2569

	)

74 
	#BOXDRAW_VERTICAL_HORIZONTAL_DOUBLE
 0x256a

	)

75 
	#BOXDRAW_VERTICAL_DOUBLE_HORIZONTAL
 0x256b

	)

76 
	#BOXDRAW_DOUBLE_VERTICAL_HORIZONTAL
 0x256c

	)

81 
	#BLOCKELEMENT_FULL_BLOCK
 0x2588

	)

82 
	#BLOCKELEMENT_LIGHT_SHADE
 0x2591

	)

87 
	#GEOMETRICSHAPE_UP_TRIANGLE
 0x25b2

	)

88 
	#GEOMETRICSHAPE_RIGHT_TRIANGLE
 0x25ba

	)

89 
	#GEOMETRICSHAPE_DOWN_TRIANGLE
 0x25bc

	)

90 
	#GEOMETRICSHAPE_LEFT_TRIANGLE
 0x25c4

	)

95 
	#ARROW_LEFT
 0x2190

	)

96 
	#ARROW_UP
 0x2191

	)

97 
	#ARROW_RIGHT
 0x2192

	)

98 
	#ARROW_DOWN
 0x2193

	)

103 
	#EFI_BLACK
 0x00

	)

104 
	#EFI_BLUE
 0x01

	)

105 
	#EFI_GREEN
 0x02

	)

106 
	#EFI_CYAN
 (
EFI_BLUE
 | 
EFI_GREEN
)

	)

107 
	#EFI_RED
 0x04

	)

108 
	#EFI_MAGENTA
 (
EFI_BLUE
 | 
EFI_RED
)

	)

109 
	#EFI_BROWN
 (
EFI_GREEN
 | 
EFI_RED
)

	)

110 
	#EFI_LIGHTGRAY
 (
EFI_BLUE
 | 
EFI_GREEN
 | 
EFI_RED
)

	)

111 
	#EFI_BRIGHT
 0x08

	)

112 
	#EFI_DARKGRAY
 (
EFI_BLACK
 | 
EFI_BRIGHT
)

	)

113 
	#EFI_LIGHTBLUE
 (
EFI_BLUE
 | 
EFI_BRIGHT
)

	)

114 
	#EFI_LIGHTGREEN
 (
EFI_GREEN
 | 
EFI_BRIGHT
)

	)

115 
	#EFI_LIGHTCYAN
 (
EFI_CYAN
 | 
EFI_BRIGHT
)

	)

116 
	#EFI_LIGHTRED
 (
EFI_RED
 | 
EFI_BRIGHT
)

	)

117 
	#EFI_LIGHTMAGENTA
 (
EFI_MAGENTA
 | 
EFI_BRIGHT
)

	)

118 
	#EFI_YELLOW
 (
EFI_BROWN
 | 
EFI_BRIGHT
)

	)

119 
	#EFI_WHITE
 (
EFI_BLUE
 | 
EFI_GREEN
 | 
EFI_RED
 | 
EFI_BRIGHT
)

	)

132 
	#EFI_TEXT_ATTR
(
F‹eground
,
Background
Ë((F‹egroundË| ((BackgroundË<< 4))

	)

134 
	#EFI_BACKGROUND_BLACK
 0x00

	)

135 
	#EFI_BACKGROUND_BLUE
 0x10

	)

136 
	#EFI_BACKGROUND_GREEN
 0x20

	)

137 
	#EFI_BACKGROUND_CYAN
 (
EFI_BACKGROUND_BLUE
 | 
EFI_BACKGROUND_GREEN
)

	)

138 
	#EFI_BACKGROUND_RED
 0x40

	)

139 
	#EFI_BACKGROUND_MAGENTA
 (
EFI_BACKGROUND_BLUE
 | 
EFI_BACKGROUND_RED
)

	)

140 
	#EFI_BACKGROUND_BROWN
 (
EFI_BACKGROUND_GREEN
 | 
EFI_BACKGROUND_RED
)

	)

141 
	#EFI_BACKGROUND_LIGHTGRAY
 (
EFI_BACKGROUND_BLUE
 | 
EFI_BACKGROUND_GREEN
 | 
EFI_BACKGROUND_RED
)

	)

151 
	#EFI_WIDE_ATTRIBUTE
 0x80

	)

166 
	gEFI_STATUS


167 (
	tEFIAPI
 *
	tEFI_TEXT_RESET
)(

168 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

169 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


191 
	gEFI_STATUS


192 (
	tEFIAPI
 *
	tEFI_TEXT_STRING
)(

193 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

194 
	tIN
 
	tCHAR16
 *
	tSåög


212 
	gEFI_STATUS


213 (
	tEFIAPI
 *
	tEFI_TEXT_TEST_STRING
)(

214 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

215 
	tIN
 
	tCHAR16
 *
	tSåög


235 
	gEFI_STATUS


236 (
	tEFIAPI
 *
	tEFI_TEXT_QUERY_MODE
)(

237 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

238 
	tIN
 
	tUINTN
 
	tModeNumbî
,

239 
	tOUT
 
	tUINTN
 *
	tCﬁumns
,

240 
	tOUT
 
	tUINTN
 *
	tRows


255 
	gEFI_STATUS


256 (
	tEFIAPI
 *
	tEFI_TEXT_SET_MODE
)(

257 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

258 
	tIN
 
	tUINTN
 
	tModeNumbî


276 
	gEFI_STATUS


277 (
	tEFIAPI
 *
	tEFI_TEXT_SET_ATTRIBUTE
)(

278 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

279 
	tIN
 
	tUINTN
 
	tAâribuã


294 
	gEFI_STATUS


295 (
	tEFIAPI
 *
	tEFI_TEXT_CLEAR_SCREEN
)(

296 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis


317 
	gEFI_STATUS


318 (
	tEFIAPI
 *
	tEFI_TEXT_SET_CURSOR_POSITION
)(

319 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

320 
	tIN
 
	tUINTN
 
	tCﬁumn
,

321 
	tIN
 
	tUINTN
 
	tRow


339 
	gEFI_STATUS


340 (
	tEFIAPI
 *
	tEFI_TEXT_ENABLE_CURSOR
)(

341 
	tIN
 
	tEFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 *
	tThis
,

342 
	tIN
 
	tBOOLEAN
 
	tVisibÀ


353 
INT32
 
	mMaxMode
;

362 
INT32
 
	mMode
;

366 
INT32
 
	mAâribuã
;

370 
INT32
 
	mCurs‹Cﬁumn
;

374 
INT32
 
	mCurs‹Row
;

378 
BOOLEAN
 
	mCurs‹VisibÀ
;

379 } 
	tEFI_SIMPLE_TEXT_OUTPUT_MODE
;

387 
	s_EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
 {

388 
EFI_TEXT_RESET
 
	mRe£t
;

390 
EFI_TEXT_STRING
 
	mOuçutSåög
;

391 
EFI_TEXT_TEST_STRING
 
	mTe°Såög
;

393 
EFI_TEXT_QUERY_MODE
 
	mQuîyMode
;

394 
EFI_TEXT_SET_MODE
 
	mSëMode
;

395 
EFI_TEXT_SET_ATTRIBUTE
 
	mSëAâribuã
;

397 
EFI_TEXT_CLEAR_SCREEN
 
	mCÀ¨S¸ìn
;

398 
EFI_TEXT_SET_CURSOR_POSITION
 
	mSëCurs‹Posôi⁄
;

399 
EFI_TEXT_ENABLE_CURSOR
 
	mE«bÀCurs‹
;

404 
EFI_SIMPLE_TEXT_OUTPUT_MODE
 *
	mMode
;

407 
EFI_GUID
 
gEfiSim∂eTextOutPrŸocﬁGuid
;

	@SmartCardEdge.h

17 #i‚de‡
__SMART_CARD_EDGE_H__


18 
	#__SMART_CARD_EDGE_H__


	)

20 
	#EFI_SMART_CARD_EDGE_PROTOCOL_GUID
 \

	)

25 
_EFI_SMART_CARD_EDGE_PROTOCOL
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
;

30 
	#SCARD_AID_MAXSIZE
 0x0010

	)

34 
	#SCARD_CSN_SIZE
 0x0010

	)

38 
	#SMART_CARD_EDGE_PROTOCOL_VERSION_1
 0x00000100

	)

42 
UINT8
 
	tSMART_CARD_AID
[
SCARD_AID_MAXSIZE
];

43 
UINT8
 
	tSMART_CARD_CSN
[
SCARD_CSN_SIZE
];

50 
	#SC_EDGE_TAG_HEADER
 0x0000

	)

54 
	#SC_EDGE_TAG_CERT
 0x0001

	)

58 
	#SC_EDGE_TAG_KEY_ID
 0x0002

	)

62 
	#SC_EDGE_TAG_KEY_TYPE
 0x0003

	)

66 
	#SC_EDGE_TAG_KEY_SIZE
 0x0004

	)

74 
	#SC_EDGE_L_SIZE_HEADER
 1

	)

78 
	#SC_EDGE_L_SIZE_CERT
 2

	)

82 
	#SC_EDGE_L_SIZE_KEY_ID
 1

	)

86 
	#SC_EDGE_L_SIZE_KEY_TYPE
 1

	)

90 
	#SC_EDGE_L_SIZE_KEY_SIZE
 2

	)

97 
	#SC_EDGE_L_VALUE_HEADER
 1

	)

101 
	#SC_EDGE_L_VALUE_KEY_ID
 1

	)

105 
	#SC_EDGE_L_VALUE_KEY_TYPE
 1

	)

109 
	#SC_EDGE_L_VALUE_KEY_SIZE
 2

	)

117 
	#SC_EDGE_RSA_EXCHANGE
 0x01

	)

121 
	#SC_EDGE_RSA_SIGNATURE
 0x02

	)

125 
	#SC_EDGE_ECDSA_256
 0x03

	)

129 
	#SC_EDGE_ECDSA_384
 0x04

	)

133 
	#SC_EDGE_ECDSA_521
 0x05

	)

137 
	#SC_EDGE_ECDH_256
 0x06

	)

141 
	#SC_EDGE_ECDH_384
 0x07

	)

145 
	#SC_EDGE_ECDH_521
 0x08

	)

153 
	#EFI_PADDING_RSASSA_PKCS1V1P5_GUID
 \

	)

158 
EFI_GUID
 
gEfiPaddögRßsßPkcs1V1P5Guid
;

163 
	#EFI_PADDING_RSASSA_PSS_GUID
 \

	)

168 
EFI_GUID
 
gEfiPaddögRßsßPssGuid
;

176 
	#EFI_PADDING_NONE_GUID
 \

	)

181 
EFI_GUID
 
gEfiPaddögN⁄eGuid
;

186 
	#EFI_PADDING_RSAES_PKCS1V1P5_GUID
 \

	)

191 
EFI_GUID
 
gEfiPaddögRßesPkcs1V1P5Guid
;

196 
	#EFI_PADDING_RSAES_OAEP_GUID
 \

	)

201 
EFI_GUID
 
gEfiPaddögRßesO´pGuid
;

247 
	gEFI_STATUS


248 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_CONTEXT
) (

249 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

250 
	tOUT
 
	tUINTN
 *
	tNumbîAidSuµ‹ãd
,

251 
	tIN
 
	tOUT
 
	tUINTN
 *
	tAidTabÀSize
 
	tOPTIONAL
,

252 
	tOUT
 
	tSMART_CARD_AID
 *
	tAidTabÀ
 
	tOPTIONAL
,

253 
	tOUT
 
	tUINTN
 *
	tNumbîSCPª£¡
,

254 
	tIN
 
	tOUT
 
	tUINTN
 *
	tC¢TabÀSize
 
	tOPTIONAL
,

255 
	tOUT
 
	tSMART_CARD_CSN
 *
	tC¢TabÀ
 
	tOPTIONAL
,

256 
	tOUT
 
	tUINT32
 *
	tVîsi⁄ScEdgePrŸocﬁ
 
	tOPTIONAL


289 
	gEFI_STATUS


290 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_CONNECT
) (

291 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

292 
	tOUT
 
	tEFI_HANDLE
 *
	tSC¨dH™dÀ
,

293 
	tIN
 
	tUINT8
 *
	tSˇrdC¢
 
	tOPTIONAL
,

294 
	tOUT
 
	tUINT8
 *
	tSˇrdAid
 
	tOPTIONAL


313 
	gEFI_STATUS


314 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_DISCONNECT
) (

315 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

316 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ


334 
	gEFI_STATUS


335 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_CSN
) (

336 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

337 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

338 
	tOUT
 
	tUINT8
 
	tC¢
[
SCARD_CSN_SIZE
]

361 
	gEFI_STATUS


362 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_READER_NAME
) (

363 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

364 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

365 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRódîNameLígth
,

366 
	tOUT
 
	tCHAR16
 *
	tRódîName
 
	tOPTIONAL


411 
	gEFI_STATUS


412 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_VERIFY_PIN
) (

413 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

414 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

415 
	tIN
 
	tINT32
 
	tPöSize
,

416 
	tIN
 
	tUINT8
 *
	tPöCode
,

417 
	tOUT
 
	tBOOLEAN
 *
	tPöResu…
,

418 
	tOUT
 
	tUINT32
 *
	tRemaöögAâem±s
 
	tOPTIONAL


442 
	gEFI_STATUS


443 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_PIN_REMAINING
) (

444 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

445 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

446 
	tOUT
 
	tUINT32
 *
	tRemaöögAâem±s


481 
	gEFI_STATUS


482 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_DATA
) (

483 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

484 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

485 
	tIN
 
	tEFI_GUID
 *
	tD©aId
,

486 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize
,

487 
	tOUT
 
	tVOID
 *
	tD©a
 
	tOPTIONAL


532 
	gEFI_STATUS


533 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_GET_CREDENTIAL
) (

534 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

535 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

536 
	tIN
 
	tOUT
 
	tUINTN
 *
	tCªdítülSize
,

537 
	tOUT
 
	tUINT8
 *
	tCªdítülLi°
 
	tOPTIONAL


590 
	gEFI_STATUS


591 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_SIGN_DATA
) (

592 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

593 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

594 
	tIN
 
	tUINTN
 
	tKeyId
,

595 
	tIN
 
	tUINTN
 
	tKeyTy≥
,

596 
	tIN
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

597 
	tIN
 
	tEFI_GUID
 *
	tPaddögMëhod
,

598 
	tIN
 
	tUINT8
 *
	tHashedD©a
,

599 
	tOUT
 
	tUINT8
 *
	tSig«tuªD©a


654 
	gEFI_STATUS


655 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_DECRYPT_DATA
) (

656 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

657 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

658 
	tIN
 
	tUINTN
 
	tKeyId
,

659 
	tIN
 
	tEFI_GUID
 *
	tHashAlg‹ôhm
,

660 
	tIN
 
	tEFI_GUID
 *
	tPaddögMëhod
,

661 
	tIN
 
	tUINTN
 
	tEn¸y±edSize
,

662 
	tIN
 
	tUINT8
 *
	tEn¸y±edD©a
,

663 
	tIN
 
	tOUT
 
	tUINTN
 *
	tPœöãxtSize
,

664 
	tOUT
 
	tUINT8
 *
	tPœöãxtD©a


704 
	gEFI_STATUS


705 (
	tEFIAPI
 *
	tEFI_SMART_CARD_EDGE_BUILD_DH_AGREEMENT
) (

706 
	tIN
 
	tEFI_SMART_CARD_EDGE_PROTOCOL
 *
	tThis
,

707 
	tIN
 
	tEFI_HANDLE
 
	tSC¨dH™dÀ
,

708 
	tIN
 
	tUINTN
 
	tKeyId
,

709 
	tIN
 
	tUINT8
 *
	td©aQx
,

710 
	tIN
 
	tUINT8
 *
	td©aQy
,

711 
	tOUT
 
	tUINT8
 *
	tDHAgªemít


718 
	s_EFI_SMART_CARD_EDGE_PROTOCOL
 {

719 
EFI_SMART_CARD_EDGE_GET_CONTEXT
 
	mGëC⁄ãxt
;

720 
EFI_SMART_CARD_EDGE_CONNECT
 
	mC⁄√˘
;

721 
EFI_SMART_CARD_EDGE_DISCONNECT
 
	mDisc⁄√˘
;

722 
EFI_SMART_CARD_EDGE_GET_CSN
 
	mGëC¢
;

723 
EFI_SMART_CARD_EDGE_GET_READER_NAME
 
	mGëRódîName
;

724 
EFI_SMART_CARD_EDGE_VERIFY_PIN
 
	mVîifyPö
;

725 
EFI_SMART_CARD_EDGE_GET_PIN_REMAINING
 
	mGëPöRemaöög
;

726 
EFI_SMART_CARD_EDGE_GET_DATA
 
	mGëD©a
;

727 
EFI_SMART_CARD_EDGE_GET_CREDENTIAL
 
	mGëCªdítül
;

728 
EFI_SMART_CARD_EDGE_SIGN_DATA
 
	mSignD©a
;

729 
EFI_SMART_CARD_EDGE_DECRYPT_DATA
 
	mDe¸y±D©a
;

730 
EFI_SMART_CARD_EDGE_BUILD_DH_AGREEMENT
 
	mBuûdDHAgªemít
;

733 
EFI_GUID
 
gEfiSm¨tC¨dEdgePrŸocﬁGuid
;

	@SmartCardReader.h

12 #i‚de‡
__SMART_CARD_READER_H__


13 
	#__SMART_CARD_READER_H__


	)

15 
	#EFI_SMART_CARD_READER_PROTOCOL_GUID
 \

	)

20 
_EFI_SMART_CARD_READER_PROTOCOL
 
	tEFI_SMART_CARD_READER_PROTOCOL
;

25 
	#SCARD_AM_READER
 0x0001

26 
	#SCARD_AM_CARD
 0x0002

30 
	#SCARD_CA_NORESET
 0x0000

31 
	#SCARD_CA_COLDRESET
 0x0001

32 
	#SCARD_CA_WARMRESET
 0x0002

33 
	#SCARD_CA_UNPOWER
 0x0003

34 
	#SCARD_CA_EJECT
 0x0004

38 
	#SCARD_PROTOCOL_UNDEFINED
 0x0000

	)

39 
	#SCARD_PROTOCOL_T0
 0x0001

	)

40 
	#SCARD_PROTOCOL_T1
 0x0002

	)

41 
	#SCARD_PROTOCOL_RAW
 0x0004

	)

45 
	#SCARD_UNKNOWN
 0x0000

	)

46 
	#SCARD_ABSENT
 0x0001

	)

47 
	#SCARD_INACTIVE
 0x0002

	)

48 
	#SCARD_ACTIVE
 0x0003

	)

52 
	#SCARD_CTL_CODE
(
code
Ë(0x42000000 + (code))

	)

53 
	#CM_IOCTL_GET_FEATURE_REQUEST
 
	`SCARD_CTL_CODE
(3400)

	)

89 
	gEFI_STATUS


90 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_CONNECT
) (

91 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

92 
	tIN
 
	tUINT32
 
	tAc˚ssMode
,

93 
	tIN
 
	tUINT32
 
	tC¨dA˘i⁄
,

94 
	tIN
 
	tUINT32
 
	tPª„ºedPrŸocﬁs
,

95 
	tOUT
 
	tUINT32
 *
	tA˘ivePrŸocﬁ


118 
	gEFI_STATUS


119 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_DISCONNECT
) (

120 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

121 
	tIN
 
	tUINT32
 
	tC¨dA˘i⁄


161 
	gEFI_STATUS


162 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_STATUS
) (

163 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

164 
	tOUT
 
	tCHAR16
 *
	tRódîName
 
	tOPTIONAL
,

165 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRódîNameLígth
 
	tOPTIONAL
,

166 
	tOUT
 
	tUINT32
 *
	tSèã
 
	tOPTIONAL
,

167 
	tOUT
 
	tUINT32
 *
	tC¨dPrŸocﬁ
 
	tOPTIONAL
,

168 
	tOUT
 
	tUINT8
 *
	tAå
 
	tOPTIONAL
,

169 
	tIN
 
	tOUT
 
	tUINTN
 *
	tAåLígth
 
	tOPTIONAL


205 
	gEFI_STATUS


206 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_TRANSMIT
) (

207 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

208 
	tIN
 
	tUINT8
 *
	tCAPDU
,

209 
	tIN
 
	tUINTN
 
	tCAPDULígth
,

210 
	tOUT
 
	tUINT8
 *
	tRAPDU
,

211 
	tIN
 
	tOUT
 
	tUINTN
 *
	tRAPDULígth


254 
	gEFI_STATUS


255 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_CONTROL
) (

256 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

257 
	tIN
 
	tUINT32
 
	tC⁄åﬁCode
,

258 
	tIN
 
	tUINT8
 *
	tInBuf„r
 
	tOPTIONAL
,

259 
	tIN
 
	tUINTN
 
	tInBuf„rLígth
 
	tOPTIONAL
,

260 
	tOUT
 
	tUINT8
 *
	tOutBuf„r
 
	tOPTIONAL
,

261 
	tIN
 
	tOUT
 
	tUINTN
 *
	tOutBuf„rLígth
 
	tOPTIONAL


295 
	gEFI_STATUS


296 (
	tEFIAPI
 *
	tEFI_SMART_CARD_READER_GET_ATTRIB
) (

297 
	tIN
 
	tEFI_SMART_CARD_READER_PROTOCOL
 *
	tThis
,

298 
	tIN
 
	tUINT32
 
	tAârib
,

299 
	tOUT
 
	tUINT8
 *
	tOutBuf„r
,

300 
	tIN
 
	tOUT
 
	tUINTN
 *
	tOutBuf„rLígth


307 
	s_EFI_SMART_CARD_READER_PROTOCOL
 {

308 
EFI_SMART_CARD_READER_CONNECT
 
	mSC¨dC⁄√˘
;

309 
EFI_SMART_CARD_READER_DISCONNECT
 
	mSC¨dDisc⁄√˘
;

310 
EFI_SMART_CARD_READER_STATUS
 
	mSC¨dSètus
;

311 
EFI_SMART_CARD_READER_TRANSMIT
 
	mSC¨dTønsmô
;

312 
EFI_SMART_CARD_READER_CONTROL
 
	mSC¨dC⁄åﬁ
;

313 
EFI_SMART_CARD_READER_GET_ATTRIB
 
	mSC¨dGëAârib
;

316 
EFI_GUID
 
gEfiSm¨tC¨dRódîPrŸocﬁGuid
;

	@Smbios.h

21 #i‚de‡
__SMBIOS_PROTOCOL_H__


22 
	#__SMBIOS_PROTOCOL_H__


	)

24 
	~<Indu°rySènd¨d/SmBios.h
>

26 
	#EFI_SMBIOS_PROTOCOL_GUID
 \

	)

29 
	#EFI_SMBIOS_TYPE_BIOS_INFORMATION
 
SMBIOS_TYPE_BIOS_INFORMATION


	)

30 
	#EFI_SMBIOS_TYPE_SYSTEM_INFORMATION
 
SMBIOS_TYPE_SYSTEM_INFORMATION


	)

31 
	#EFI_SMBIOS_TYPE_BASEBOARD_INFORMATION
 
SMBIOS_TYPE_BASEBOARD_INFORMATION


	)

32 
	#EFI_SMBIOS_TYPE_SYSTEM_ENCLOSURE
 
SMBIOS_TYPE_SYSTEM_ENCLOSURE


	)

33 
	#EFI_SMBIOS_TYPE_PROCESSOR_INFORMATION
 
SMBIOS_TYPE_PROCESSOR_INFORMATION


	)

34 
	#EFI_SMBIOS_TYPE_MEMORY_CONTROLLER_INFORMATION
 
SMBIOS_TYPE_MEMORY_CONTROLLER_INFORMATION


	)

35 
	#EFI_SMBIOS_TYPE_MEMORY_MODULE_INFORMATON
 
SMBIOS_TYPE_MEMORY_MODULE_INFORMATON


	)

36 
	#EFI_SMBIOS_TYPE_CACHE_INFORMATION
 
SMBIOS_TYPE_CACHE_INFORMATION


	)

37 
	#EFI_SMBIOS_TYPE_PORT_CONNECTOR_INFORMATION
 
SMBIOS_TYPE_PORT_CONNECTOR_INFORMATION


	)

38 
	#EFI_SMBIOS_TYPE_SYSTEM_SLOTS
 
SMBIOS_TYPE_SYSTEM_SLOTS


	)

39 
	#EFI_SMBIOS_TYPE_ONBOARD_DEVICE_INFORMATION
 
SMBIOS_TYPE_ONBOARD_DEVICE_INFORMATION


	)

40 
	#EFI_SMBIOS_TYPE_OEM_STRINGS
 
SMBIOS_TYPE_OEM_STRINGS


	)

41 
	#EFI_SMBIOS_TYPE_SYSTEM_CONFIGURATION_OPTIONS
 
SMBIOS_TYPE_SYSTEM_CONFIGURATION_OPTIONS


	)

42 
	#EFI_SMBIOS_TYPE_BIOS_LANGUAGE_INFORMATION
 
SMBIOS_TYPE_BIOS_LANGUAGE_INFORMATION


	)

43 
	#EFI_SMBIOS_TYPE_GROUP_ASSOCIATIONS
 
SMBIOS_TYPE_GROUP_ASSOCIATIONS


	)

44 
	#EFI_SMBIOS_TYPE_SYSTEM_EVENT_LOG
 
SMBIOS_TYPE_SYSTEM_EVENT_LOG


	)

45 
	#EFI_SMBIOS_TYPE_PHYSICAL_MEMORY_ARRAY
 
SMBIOS_TYPE_PHYSICAL_MEMORY_ARRAY


	)

46 
	#EFI_SMBIOS_TYPE_MEMORY_DEVICE
 
SMBIOS_TYPE_MEMORY_DEVICE


	)

47 
	#EFI_SMBIOS_TYPE_32BIT_MEMORY_ERROR_INFORMATION
 
SMBIOS_TYPE_32BIT_MEMORY_ERROR_INFORMATION


	)

48 
	#EFI_SMBIOS_TYPE_MEMORY_ARRAY_MAPPED_ADDRESS
 
SMBIOS_TYPE_MEMORY_ARRAY_MAPPED_ADDRESS


	)

49 
	#EFI_SMBIOS_TYPE_MEMORY_DEVICE_MAPPED_ADDRESS
 
SMBIOS_TYPE_MEMORY_DEVICE_MAPPED_ADDRESS


	)

50 
	#EFI_SMBIOS_TYPE_BUILT_IN_POINTING_DEVICE
 
SMBIOS_TYPE_BUILT_IN_POINTING_DEVICE


	)

51 
	#EFI_SMBIOS_TYPE_PORTABLE_BATTERY
 
SMBIOS_TYPE_PORTABLE_BATTERY


	)

52 
	#EFI_SMBIOS_TYPE_SYSTEM_RESET
 
SMBIOS_TYPE_SYSTEM_RESET


	)

53 
	#EFI_SMBIOS_TYPE_HARDWARE_SECURITY
 
SMBIOS_TYPE_HARDWARE_SECURITY


	)

54 
	#EFI_SMBIOS_TYPE_SYSTEM_POWER_CONTROLS
 
SMBIOS_TYPE_SYSTEM_POWER_CONTROLS


	)

55 
	#EFI_SMBIOS_TYPE_VOLTAGE_PROBE
 
SMBIOS_TYPE_VOLTAGE_PROBE


	)

56 
	#EFI_SMBIOS_TYPE_COOLING_DEVICE
 
SMBIOS_TYPE_COOLING_DEVICE


	)

57 
	#EFI_SMBIOS_TYPE_TEMPERATURE_PROBE
 
SMBIOS_TYPE_TEMPERATURE_PROBE


	)

58 
	#EFI_SMBIOS_TYPE_ELECTRICAL_CURRENT_PROBE
 
SMBIOS_TYPE_ELECTRICAL_CURRENT_PROBE


	)

59 
	#EFI_SMBIOS_TYPE_OUT_OF_BAND_REMOTE_ACCESS
 
SMBIOS_TYPE_OUT_OF_BAND_REMOTE_ACCESS


	)

60 
	#EFI_SMBIOS_TYPE_BOOT_INTEGRITY_SERVICE
 
SMBIOS_TYPE_BOOT_INTEGRITY_SERVICE


	)

61 
	#EFI_SMBIOS_TYPE_SYSTEM_BOOT_INFORMATION
 
SMBIOS_TYPE_SYSTEM_BOOT_INFORMATION


	)

62 
	#EFI_SMBIOS_TYPE_64BIT_MEMORY_ERROR_INFORMATION
 
SMBIOS_TYPE_64BIT_MEMORY_ERROR_INFORMATION


	)

63 
	#EFI_SMBIOS_TYPE_MANAGEMENT_DEVICE
 
SMBIOS_TYPE_MANAGEMENT_DEVICE


	)

64 
	#EFI_SMBIOS_TYPE_MANAGEMENT_DEVICE_COMPONENT
 
SMBIOS_TYPE_MANAGEMENT_DEVICE_COMPONENT


	)

65 
	#EFI_SMBIOS_TYPE_MANAGEMENT_DEVICE_THRESHOLD_DATA
 
SMBIOS_TYPE_MANAGEMENT_DEVICE_THRESHOLD_DATA


	)

66 
	#EFI_SMBIOS_TYPE_MEMORY_CHANNEL
 
SMBIOS_TYPE_MEMORY_CHANNEL


	)

67 
	#EFI_SMBIOS_TYPE_IPMI_DEVICE_INFORMATION
 
SMBIOS_TYPE_IPMI_DEVICE_INFORMATION


	)

68 
	#EFI_SMBIOS_TYPE_SYSTEM_POWER_SUPPLY
 
SMBIOS_TYPE_SYSTEM_POWER_SUPPLY


	)

69 
	#EFI_SMBIOS_TYPE_ADDITIONAL_INFORMATION
 
SMBIOS_TYPE_ADDITIONAL_INFORMATION


	)

70 
	#EFI_SMBIOS_TYPE_ONBOARD_DEVICES_EXTENDED_INFORMATION
 
SMBIOS_TYPE_ONBOARD_DEVICES_EXTENDED_INFORMATION


	)

71 
	#EFI_SMBIOS_TYPE_MANAGEMENT_CONTROLLER_HOST_INTERFACE
 
SMBIOS_TYPE_MANAGEMENT_CONTROLLER_HOST_INTERFACE


	)

72 
	#EFI_SMBIOS_TYPE_INACTIVE
 
SMBIOS_TYPE_INACTIVE


	)

73 
	#EFI_SMBIOS_TYPE_END_OF_TABLE
 
SMBIOS_TYPE_END_OF_TABLE


	)

74 
	#EFI_SMBIOS_OEM_BEGIN
 
SMBIOS_OEM_BEGIN


	)

75 
	#EFI_SMBIOS_OEM_END
 
SMBIOS_OEM_END


	)

77 
SMBIOS_TABLE_STRING
 
	tEFI_SMBIOS_STRING
;

78 
SMBIOS_TYPE
 
	tEFI_SMBIOS_TYPE
;

79 
SMBIOS_HANDLE
 
	tEFI_SMBIOS_HANDLE
;

80 
SMBIOS_STRUCTURE
 
	tEFI_SMBIOS_TABLE_HEADER
;

82 
_EFI_SMBIOS_PROTOCOL
 
	tEFI_SMBIOS_PROTOCOL
;

113 
	gEFI_STATUS


114 (
	tEFIAPI
 *
	tEFI_SMBIOS_ADD
)(

115 
	tIN
 
	tCONST
 
	tEFI_SMBIOS_PROTOCOL
 *
	tThis
,

116 
	tIN
 
	tEFI_HANDLE
 
	tProdu˚rH™dÀ
 
	tOPTIONAL
,

117 
	tIN
 
	tOUT
 
	tEFI_SMBIOS_HANDLE
 *
	tSmbiosH™dÀ
,

118 
	tIN
 
	tEFI_SMBIOS_TABLE_HEADER
 *
	tRec‹d


138 
	gEFI_STATUS


139 (
	tEFIAPI
 *
	tEFI_SMBIOS_UPDATE_STRING
)(

140 
	tIN
 
	tCONST
 
	tEFI_SMBIOS_PROTOCOL
 *
	tThis
,

141 
	tIN
 
	tEFI_SMBIOS_HANDLE
 *
	tSmbiosH™dÀ
,

142 
	tIN
 
	tUINTN
 *
	tSåögNumbî
,

143 
	tIN
 
	tCHAR8
 *
	tSåög


158 
	gEFI_STATUS


159 (
	tEFIAPI
 *
	tEFI_SMBIOS_REMOVE
)(

160 
	tIN
 
	tCONST
 
	tEFI_SMBIOS_PROTOCOL
 *
	tThis
,

161 
	tIN
 
	tEFI_SMBIOS_HANDLE
 
	tSmbiosH™dÀ


187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_SMBIOS_GET_NEXT
)(

189 
	tIN
 
	tCONST
 
	tEFI_SMBIOS_PROTOCOL
 *
	tThis
,

190 
	tIN
 
	tOUT
 
	tEFI_SMBIOS_HANDLE
 *
	tSmbiosH™dÀ
,

191 
	tIN
 
	tEFI_SMBIOS_TYPE
 *
	tTy≥
 
	tOPTIONAL
,

192 
	tOUT
 
	tEFI_SMBIOS_TABLE_HEADER
 **
	tRec‹d
,

193 
	tOUT
 
	tEFI_HANDLE
 *
	tProdu˚rH™dÀ
 
	tOPTIONAL


196 
	s_EFI_SMBIOS_PROTOCOL
 {

197 
EFI_SMBIOS_ADD
 
	mAdd
;

198 
EFI_SMBIOS_UPDATE_STRING
 
	mUpd©eSåög
;

199 
EFI_SMBIOS_REMOVE
 
	mRemove
;

200 
EFI_SMBIOS_GET_NEXT
 
	mGëNext
;

201 
UINT8
 
	mMaj‹Vîsi⁄
;

202 
UINT8
 
	mMö‹Vîsi⁄
;

205 
EFI_GUID
 
gEfiSmbiosPrŸocﬁGuid
;

	@SmbusHc.h

13 #i‚de‡
__SMBUS_HC_H__


14 
	#__SMBUS_HC_H__


	)

16 
	~<Indu°rySènd¨d/SmBus.h
>

18 
	#EFI_SMBUS_HC_PROTOCOL_GUID
 \

	)

21 
_EFI_SMBUS_HC_PROTOCOL
 
	tEFI_SMBUS_HC_PROTOCOL
;

117 
	gEFI_STATUS


118 (
	tEFIAPI
 *
	tEFI_SMBUS_HC_EXECUTE_OPERATION
)(

119 
	tIN
 
	tCONST
 
	tEFI_SMBUS_HC_PROTOCOL
 *
	tThis
,

120 
	tIN
 
	tEFI_SMBUS_DEVICE_ADDRESS
 
	tSœveAddªss
,

121 
	tIN
 
	tEFI_SMBUS_DEVICE_COMMAND
 
	tComm™d
,

122 
	tIN
 
	tEFI_SMBUS_OPERATION
 
	tO≥øti⁄
,

123 
	tIN
 
	tBOOLEAN
 
	tPecCheck
,

124 
	tIN
 
	tOUT
 
	tUINTN
 *
	tLígth
,

125 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


183 
	gEFI_STATUS


184 (
	tEFIAPI
 *
	tEFI_SMBUS_HC_PROTOCOL_ARP_DEVICE
)(

185 
	tIN
 
	tCONST
 
	tEFI_SMBUS_HC_PROTOCOL
 *
	tThis
,

186 
	tIN
 
	tBOOLEAN
 
	tAΩAŒ
,

187 
	tIN
 
	tEFI_SMBUS_UDID
 *
	tSmbusUdid
, 
	tOPTIONAL


188 
	tIN
 
	tOUT
 
	tEFI_SMBUS_DEVICE_ADDRESS
 *
	tSœveAddªss
 
	tOPTIONAL


212 
	gEFI_STATUS


213 (
	tEFIAPI
 *
	tEFI_SMBUS_HC_PROTOCOL_GET_ARP_MAP
)(

214 
	tIN
 
	tCONST
 
	tEFI_SMBUS_HC_PROTOCOL
 *
	tThis
,

215 
	tIN
 
	tOUT
 
	tUINTN
 *
	tLígth
,

216 
	tIN
 
	tOUT
 
	tEFI_SMBUS_DEVICE_MAP
 **
	tSmbusDevi˚M≠


231 
	gEFI_STATUS


232 (
	tEFIAPI
 *
	tEFI_SMBUS_NOTIFY_FUNCTION
)(

233 
	tIN
 
	tEFI_SMBUS_DEVICE_ADDRESS
 
	tSœveAddªss
,

234 
	tIN
 
	tUINTN
 
	tD©a


264 
	gEFI_STATUS


265 (
	tEFIAPI
 *
	tEFI_SMBUS_HC_PROTOCOL_NOTIFY
)(

266 
	tIN
 
	tCONST
 
	tEFI_SMBUS_HC_PROTOCOL
 *
	tThis
,

267 
	tIN
 
	tEFI_SMBUS_DEVICE_ADDRESS
 
	tSœveAddªss
,

268 
	tIN
 
	tUINTN
 
	tD©a
,

269 
	tIN
 
	tEFI_SMBUS_NOTIFY_FUNCTION
 
	tNŸifyFun˘i⁄


278 
	s_EFI_SMBUS_HC_PROTOCOL
 {

279 
EFI_SMBUS_HC_EXECUTE_OPERATION
 
	mExecuã
;

280 
EFI_SMBUS_HC_PROTOCOL_ARP_DEVICE
 
	mAΩDevi˚
;

281 
EFI_SMBUS_HC_PROTOCOL_GET_ARP_MAP
 
	mGëAΩM≠
;

282 
EFI_SMBUS_HC_PROTOCOL_NOTIFY
 
	mNŸify
;

286 
EFI_GUID
 
gEfiSmbusHcPrŸocﬁGuid
;

	@SmmAccess2.h

19 #i‚de‡
_SMM_ACCESS2_H_


20 
	#_SMM_ACCESS2_H_


	)

22 
	~<PrŸocﬁ/MmAc˚ss.h
>

24 
	#EFI_SMM_ACCESS2_PROTOCOL_GUID
 
EFI_MM_ACCESS_PROTOCOL_GUID


	)

26 
EFI_MM_ACCESS_PROTOCOL
 
	tEFI_SMM_ACCESS2_PROTOCOL
;

28 
EFI_MM_OPEN
 
	tEFI_SMM_OPEN2
;

30 
EFI_MM_CLOSE
 
	tEFI_SMM_CLOSE2
;

32 
EFI_MM_LOCK
 
	tEFI_SMM_LOCK2
;

34 
EFI_MM_CAPABILITIES
 
	tEFI_SMM_CAPABILITIES2
;

35 
EFI_GUID
 
gEfiSmmAc˚ss2PrŸocﬁGuid
;

	@SmmBase2.h

12 #i‚de‡
_SMM_BASE2_H_


13 
	#_SMM_BASE2_H_


	)

15 
	~<Pi/PiSmmCis.h
>

16 
	~<PrŸocﬁ/MmBa£.h
>

18 
	#EFI_SMM_BASE2_PROTOCOL_GUID
 
EFI_MM_BASE_PROTOCOL_GUID


	)

20 
_EFI_SMM_BASE2_PROTOCOL
 
	tEFI_SMM_BASE2_PROTOCOL
;

38 
	gEFI_STATUS


39 (
	tEFIAPI
 *
	tEFI_SMM_INSIDE_OUT2
)(

40 
	tIN
 
	tCONST
 
	tEFI_SMM_BASE2_PROTOCOL
 *
	tThis
,

41 
	tOUT
 
	tBOOLEAN
 *
	tInSmøm


60 
	gEFI_STATUS


61 (
	tEFIAPI
 *
	tEFI_SMM_GET_SMST_LOCATION2
)(

62 
	tIN
 
	tCONST
 
	tEFI_SMM_BASE2_PROTOCOL
 *
	tThis
,

63 
	tIN
 
	tOUT
 
	tEFI_SMM_SYSTEM_TABLE2
 **
	tSm°


71 
	s_EFI_SMM_BASE2_PROTOCOL
 {

72 
EFI_SMM_INSIDE_OUT2
 
	mInSmm
;

73 
EFI_SMM_GET_SMST_LOCATION2
 
	mGëSm°Loˇti⁄
;

76 
EFI_GUID
 
gEfiSmmBa£2PrŸocﬁGuid
;

	@SmmCommunication.h

12 #i‚de‡
_SMM_COMMUNICATION_H_


13 
	#_SMM_COMMUNICATION_H_


	)

15 
	~<PrŸocﬁ/MmCommuniˇti⁄.h
>

18 
EFI_MM_COMMUNICATE_HEADER
 
	tEFI_SMM_COMMUNICATE_HEADER
;

20 
	#EFI_SMM_COMMUNICATION_PROTOCOL_GUID
 
EFI_MM_COMMUNICATION_PROTOCOL_GUID


	)

22 
EFI_MM_COMMUNICATION_PROTOCOL
 
	tEFI_SMM_COMMUNICATION_PROTOCOL
;

24 
EFI_GUID
 
gEfiSmmCommuniˇti⁄PrŸocﬁGuid
;

	@SmmConfiguration.h

14 #i‚de‡
_SMM_CONFIGURATION_H_


15 
	#_SMM_CONFIGURATION_H_


	)

17 
	~<PrŸocﬁ/MmC⁄figuøti⁄.h
>

18 
	~<Pi/PiSmmCis.h
>

20 
	#EFI_SMM_CONFIGURATION_PROTOCOL_GUID
 
EFI_MM_CONFIGURATION_PROTOCOL_GUID


	)

25 
	s_EFI_SMM_RESERVED_SMRAM_REGION
 {

30 
EFI_PHYSICAL_ADDRESS
 
	mSmømRe£rvedSèπ
;

35 
UINT64
 
	mSmømRe£rvedSize
;

36 } 
	tEFI_SMM_RESERVED_SMRAM_REGION
;

38 
_EFI_SMM_CONFIGURATION_PROTOCOL
 
	tEFI_SMM_CONFIGURATION_PROTOCOL
;

53 
	gEFI_STATUS


54 (
	tEFIAPI
 *
	tEFI_SMM_REGISTER_SMM_ENTRY
)(

55 
	tIN
 
	tCONST
 
	tEFI_SMM_CONFIGURATION_PROTOCOL
 *
	tThis
,

56 
	tIN
 
	tEFI_SMM_ENTRY_POINT
 
	tSmmE¡ryPoöt


67 
	s_EFI_SMM_CONFIGURATION_PROTOCOL
 {

71 
EFI_SMM_RESERVED_SMRAM_REGION
 *
	mSmømRe£rvedRegi⁄s
;

72 
EFI_SMM_REGISTER_SMM_ENTRY
 
	mRegi°îSmmE¡ry
;

75 
EFI_GUID
 
gEfiSmmC⁄figuøti⁄PrŸocﬁGuid
;

	@SmmControl2.h

19 #i‚de‡
_SMM_CONTROL2_H_


20 
	#_SMM_CONTROL2_H_


	)

22 
	~<PrŸocﬁ/MmC⁄åﬁ.h
>

24 
	#EFI_SMM_CONTROL2_PROTOCOL_GUID
 
EFI_MM_CONTROL_PROTOCOL_GUID


	)

26 
EFI_MM_CONTROL_PROTOCOL
 
	tEFI_SMM_CONTROL2_PROTOCOL
;

27 
EFI_MM_PERIOD
 
	tEFI_SMM_PERIOD
;

29 
EFI_MM_ACTIVATE
 
	tEFI_SMM_ACTIVATE2
;

31 
EFI_MM_DEACTIVATE
 
	tEFI_SMM_DEACTIVATE2
;

32 
EFI_GUID
 
gEfiSmmC⁄åﬁ2PrŸocﬁGuid
;

	@SmmCpu.h

14 #i‚de‡
_SMM_CPU_H_


15 
	#_SMM_CPU_H_


	)

17 
	~<PrŸocﬁ/MmCpu.h
>

19 
	#EFI_SMM_CPU_PROTOCOL_GUID
 
EFI_MM_CPU_PROTOCOL_GUID


	)

21 
	#EFI_SMM_SAVE_STATE_REGISTER_GDTBASE
 
EFI_MM_SAVE_STATE_REGISTER_GDTBASE


	)

22 
	#EFI_SMM_SAVE_STATE_REGISTER_IDTBASE
 
EFI_MM_SAVE_STATE_REGISTER_IDTBASE


	)

23 
	#EFI_SMM_SAVE_STATE_REGISTER_LDTBASE
 
EFI_MM_SAVE_STATE_REGISTER_LDTBASE


	)

24 
	#EFI_SMM_SAVE_STATE_REGISTER_GDTLIMIT
 
EFI_MM_SAVE_STATE_REGISTER_GDTLIMIT


	)

25 
	#EFI_SMM_SAVE_STATE_REGISTER_IDTLIMIT
 
EFI_MM_SAVE_STATE_REGISTER_IDTLIMIT


	)

26 
	#EFI_SMM_SAVE_STATE_REGISTER_LDTLIMIT
 
EFI_MM_SAVE_STATE_REGISTER_LDTLIMIT


	)

27 
	#EFI_SMM_SAVE_STATE_REGISTER_LDTINFO
 
EFI_MM_SAVE_STATE_REGISTER_LDTINFO


	)

28 
	#EFI_SMM_SAVE_STATE_REGISTER_ES
 
EFI_MM_SAVE_STATE_REGISTER_ES


	)

29 
	#EFI_SMM_SAVE_STATE_REGISTER_CS
 
EFI_MM_SAVE_STATE_REGISTER_CS


	)

30 
	#EFI_SMM_SAVE_STATE_REGISTER_SS
 
EFI_MM_SAVE_STATE_REGISTER_SS


	)

31 
	#EFI_SMM_SAVE_STATE_REGISTER_DS
 
EFI_MM_SAVE_STATE_REGISTER_DS


	)

32 
	#EFI_SMM_SAVE_STATE_REGISTER_FS
 
EFI_MM_SAVE_STATE_REGISTER_FS


	)

33 
	#EFI_SMM_SAVE_STATE_REGISTER_GS
 
EFI_MM_SAVE_STATE_REGISTER_GS


	)

34 
	#EFI_SMM_SAVE_STATE_REGISTER_LDTR_SEL
 
EFI_MM_SAVE_STATE_REGISTER_LDTR_SEL


	)

35 
	#EFI_SMM_SAVE_STATE_REGISTER_TR_SEL
 
EFI_MM_SAVE_STATE_REGISTER_TR_SEL


	)

36 
	#EFI_SMM_SAVE_STATE_REGISTER_DR7
 
EFI_MM_SAVE_STATE_REGISTER_DR7


	)

37 
	#EFI_SMM_SAVE_STATE_REGISTER_DR6
 
EFI_MM_SAVE_STATE_REGISTER_DR6


	)

38 
	#EFI_SMM_SAVE_STATE_REGISTER_R8
 
EFI_MM_SAVE_STATE_REGISTER_R8


	)

39 
	#EFI_SMM_SAVE_STATE_REGISTER_R9
 
EFI_MM_SAVE_STATE_REGISTER_R9


	)

40 
	#EFI_SMM_SAVE_STATE_REGISTER_R10
 
EFI_MM_SAVE_STATE_REGISTER_R10


	)

41 
	#EFI_SMM_SAVE_STATE_REGISTER_R11
 
EFI_MM_SAVE_STATE_REGISTER_R11


	)

42 
	#EFI_SMM_SAVE_STATE_REGISTER_R12
 
EFI_MM_SAVE_STATE_REGISTER_R12


	)

43 
	#EFI_SMM_SAVE_STATE_REGISTER_R13
 
EFI_MM_SAVE_STATE_REGISTER_R13


	)

44 
	#EFI_SMM_SAVE_STATE_REGISTER_R14
 
EFI_MM_SAVE_STATE_REGISTER_R14


	)

45 
	#EFI_SMM_SAVE_STATE_REGISTER_R15
 
EFI_MM_SAVE_STATE_REGISTER_R15


	)

46 
	#EFI_SMM_SAVE_STATE_REGISTER_RAX
 
EFI_MM_SAVE_STATE_REGISTER_RAX


	)

47 
	#EFI_SMM_SAVE_STATE_REGISTER_RBX
 
EFI_MM_SAVE_STATE_REGISTER_RBX


	)

48 
	#EFI_SMM_SAVE_STATE_REGISTER_RCX
 
EFI_MM_SAVE_STATE_REGISTER_RCX


	)

49 
	#EFI_SMM_SAVE_STATE_REGISTER_RDX
 
EFI_MM_SAVE_STATE_REGISTER_RDX


	)

50 
	#EFI_SMM_SAVE_STATE_REGISTER_RSP
 
EFI_MM_SAVE_STATE_REGISTER_RSP


	)

51 
	#EFI_SMM_SAVE_STATE_REGISTER_RBP
 
EFI_MM_SAVE_STATE_REGISTER_RBP


	)

52 
	#EFI_SMM_SAVE_STATE_REGISTER_RSI
 
EFI_MM_SAVE_STATE_REGISTER_RSI


	)

53 
	#EFI_SMM_SAVE_STATE_REGISTER_RDI
 
EFI_MM_SAVE_STATE_REGISTER_RDI


	)

54 
	#EFI_SMM_SAVE_STATE_REGISTER_RIP
 
EFI_MM_SAVE_STATE_REGISTER_RIP


	)

55 
	#EFI_SMM_SAVE_STATE_REGISTER_RFLAGS
 
EFI_MM_SAVE_STATE_REGISTER_RFLAGS


	)

56 
	#EFI_SMM_SAVE_STATE_REGISTER_CR0
 
EFI_MM_SAVE_STATE_REGISTER_CR0


	)

57 
	#EFI_SMM_SAVE_STATE_REGISTER_CR3
 
EFI_MM_SAVE_STATE_REGISTER_CR3


	)

58 
	#EFI_SMM_SAVE_STATE_REGISTER_CR4
 
EFI_MM_SAVE_STATE_REGISTER_CR4


	)

59 
	#EFI_SMM_SAVE_STATE_REGISTER_FCW
 
EFI_MM_SAVE_STATE_REGISTER_FCW


	)

60 
	#EFI_SMM_SAVE_STATE_REGISTER_FSW
 
EFI_MM_SAVE_STATE_REGISTER_FSW


	)

61 
	#EFI_SMM_SAVE_STATE_REGISTER_FTW
 
EFI_MM_SAVE_STATE_REGISTER_FTW


	)

62 
	#EFI_SMM_SAVE_STATE_REGISTER_OPCODE
 
EFI_MM_SAVE_STATE_REGISTER_OPCODE


	)

63 
	#EFI_SMM_SAVE_STATE_REGISTER_FP_EIP
 
EFI_MM_SAVE_STATE_REGISTER_FP_EIP


	)

64 
	#EFI_SMM_SAVE_STATE_REGISTER_FP_CS
 
EFI_MM_SAVE_STATE_REGISTER_FP_CS


	)

65 
	#EFI_SMM_SAVE_STATE_REGISTER_DATAOFFSET
 
EFI_MM_SAVE_STATE_REGISTER_DATAOFFSET


	)

66 
	#EFI_SMM_SAVE_STATE_REGISTER_FP_DS
 
EFI_MM_SAVE_STATE_REGISTER_FP_DS


	)

67 
	#EFI_SMM_SAVE_STATE_REGISTER_MM0
 
EFI_MM_SAVE_STATE_REGISTER_MM0


	)

68 
	#EFI_SMM_SAVE_STATE_REGISTER_MM1
 
EFI_MM_SAVE_STATE_REGISTER_MM1


	)

69 
	#EFI_SMM_SAVE_STATE_REGISTER_MM2
 
EFI_MM_SAVE_STATE_REGISTER_MM2


	)

70 
	#EFI_SMM_SAVE_STATE_REGISTER_MM3
 
EFI_MM_SAVE_STATE_REGISTER_MM3


	)

71 
	#EFI_SMM_SAVE_STATE_REGISTER_MM4
 
EFI_MM_SAVE_STATE_REGISTER_MM4


	)

72 
	#EFI_SMM_SAVE_STATE_REGISTER_MM5
 
EFI_MM_SAVE_STATE_REGISTER_MM5


	)

73 
	#EFI_SMM_SAVE_STATE_REGISTER_MM6
 
EFI_MM_SAVE_STATE_REGISTER_MM6


	)

74 
	#EFI_SMM_SAVE_STATE_REGISTER_MM7
 
EFI_MM_SAVE_STATE_REGISTER_MM7


	)

75 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM0
 
EFI_MM_SAVE_STATE_REGISTER_XMM0


	)

76 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM1
 
EFI_MM_SAVE_STATE_REGISTER_XMM1


	)

77 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM2
 
EFI_MM_SAVE_STATE_REGISTER_XMM2


	)

78 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM3
 
EFI_MM_SAVE_STATE_REGISTER_XMM3


	)

79 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM4
 
EFI_MM_SAVE_STATE_REGISTER_XMM4


	)

80 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM5
 
EFI_MM_SAVE_STATE_REGISTER_XMM5


	)

81 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM6
 
EFI_MM_SAVE_STATE_REGISTER_XMM6


	)

82 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM7
 
EFI_MM_SAVE_STATE_REGISTER_XMM7


	)

83 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM8
 
EFI_MM_SAVE_STATE_REGISTER_XMM8


	)

84 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM9
 
EFI_MM_SAVE_STATE_REGISTER_XMM9


	)

85 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM10
 
EFI_MM_SAVE_STATE_REGISTER_XMM10


	)

86 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM11
 
EFI_MM_SAVE_STATE_REGISTER_XMM11


	)

87 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM12
 
EFI_MM_SAVE_STATE_REGISTER_XMM12


	)

88 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM13
 
EFI_MM_SAVE_STATE_REGISTER_XMM13


	)

89 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM14
 
EFI_MM_SAVE_STATE_REGISTER_XMM14


	)

90 
	#EFI_SMM_SAVE_STATE_REGISTER_XMM15
 
EFI_MM_SAVE_STATE_REGISTER_XMM15


	)

91 
	#EFI_SMM_SAVE_STATE_REGISTER_IO
 
EFI_MM_SAVE_STATE_REGISTER_IO


	)

92 
	#EFI_SMM_SAVE_STATE_REGISTER_LMA
 
EFI_MM_SAVE_STATE_REGISTER_LMA


	)

93 
	#EFI_SMM_SAVE_STATE_REGISTER_PROCESSOR_ID
 
EFI_MM_SAVE_STATE_REGISTER_PROCESSOR_ID


	)

95 
EFI_MM_SAVE_STATE_REGISTER
 
	tEFI_SMM_SAVE_STATE_REGISTER
;

98 
	#EFI_SMM_SAVE_STATE_REGISTER_LMA_32BIT
 
EFI_MM_SAVE_STATE_REGISTER_LMA_32BIT


	)

99 
	#EFI_SMM_SAVE_STATE_REGISTER_LMA_64BIT
 
EFI_MM_SAVE_STATE_REGISTER_LMA_64BIT


	)

105 
	#EFI_SMM_SAVE_STATE_IO_WIDTH_UINT8
 
EFI_MM_SAVE_STATE_IO_WIDTH_UINT8


	)

106 
	#EFI_SMM_SAVE_STATE_IO_WIDTH_UINT16
 
EFI_MM_SAVE_STATE_IO_WIDTH_UINT16


	)

107 
	#EFI_SMM_SAVE_STATE_IO_WIDTH_UINT32
 
EFI_MM_SAVE_STATE_IO_WIDTH_UINT32


	)

108 
	#EFI_SMM_SAVE_STATE_IO_WIDTH_UINT64
 
EFI_MM_SAVE_STATE_IO_WIDTH_UINT64


	)

109 
EFI_MM_SAVE_STATE_IO_WIDTH
 
	tEFI_SMM_SAVE_STATE_IO_WIDTH
;

114 
	#EFI_SMM_SAVE_STATE_IO_TYPE_INPUT
 
EFI_MM_SAVE_STATE_IO_TYPE_INPUT


	)

115 
	#EFI_SMM_SAVE_STATE_IO_TYPE_OUTPUT
 
EFI_MM_SAVE_STATE_IO_TYPE_OUTPUT


	)

116 
	#EFI_SMM_SAVE_STATE_IO_TYPE_STRING
 
EFI_MM_SAVE_STATE_IO_TYPE_STRING


	)

117 
	#EFI_SMM_SAVE_STATE_IO_TYPE_REP_PREFIX
 
EFI_MM_SAVE_STATE_IO_TYPE_REP_PREFIX


	)

118 
EFI_MM_SAVE_STATE_IO_TYPE
 
	tEFI_SMM_SAVE_STATE_IO_TYPE
;

120 
EFI_MM_SAVE_STATE_IO_INFO
 
	tEFI_SMM_SAVE_STATE_IO_INFO
;

122 
EFI_MM_CPU_PROTOCOL
 
	tEFI_SMM_CPU_PROTOCOL
;

124 
EFI_MM_READ_SAVE_STATE
 
	tEFI_SMM_READ_SAVE_STATE
;

126 
EFI_MM_WRITE_SAVE_STATE
 
	tEFI_SMM_WRITE_SAVE_STATE
;

127 
EFI_GUID
 
gEfiSmmCpuPrŸocﬁGuid
;

	@SmmCpuIo2.h

11 #i‚de‡
_SMM_CPU_IO2_H_


12 
	#_SMM_CPU_IO2_H_


	)

14 
	~<PrŸocﬁ/MmCpuIo.h
>

16 
	#EFI_SMM_CPU_IO2_PROTOCOL_GUID
 
EFI_MM_CPU_IO_PROTOCOL_GUID


	)

18 
EFI_MM_CPU_IO_PROTOCOL
 
	tEFI_SMM_CPU_IO2_PROTOCOL
;

23 
	#SMM_IO_UINT8
 
MM_IO_UINT8


	)

24 
	#SMM_IO_UINT16
 
MM_IO_UINT16


	)

25 
	#SMM_IO_UINT32
 
MM_IO_UINT32


	)

26 
	#SMM_IO_UINT64
 
MM_IO_UINT64


	)

28 
EFI_MM_IO_WIDTH
 
	tEFI_SMM_IO_WIDTH
;

29 
EFI_MM_CPU_IO
 
	tEFI_SMM_CPU_IO2
;

31 
EFI_MM_IO_ACCESS
 
	tEFI_SMM_IO_ACCESS2
;

33 
EFI_GUID
 
gEfiSmmCpuIo2PrŸocﬁGuid
;

	@SmmEndOfDxe.h

17 #i‚de‡
_SMM_END_OF_DXE_H_


18 
	#_SMM_END_OF_DXE_H_


	)

20 
	~<PrŸocﬁ/MmEndOfDxe.h
>

22 
	#EFI_SMM_END_OF_DXE_PROTOCOL_GUID
 
EFI_MM_END_OF_DXE_PROTOCOL_GUID


	)

24 
EFI_GUID
 
gEfiSmmEndOfDxePrŸocﬁGuid
;

	@SmmGpiDispatch2.h

20 #i‚de‡
_SMM_GPI_DISPATCH2_H_


21 
	#_SMM_GPI_DISPATCH2_H_


	)

23 
	~<PrŸocﬁ/MmGpiDi•©ch.h
>

24 
	~<Pi/PiSmmCis.h
>

26 
	#EFI_SMM_GPI_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_GPI_DISPATCH_PROTOCOL_GUID


	)

30 
EFI_MM_GPI_REGISTER_CONTEXT
 
	tEFI_SMM_GPI_REGISTER_CONTEXT
;

32 
EFI_MM_GPI_REGISTER
 
	tEFI_SMM_GPI_REGISTER2
;

34 
EFI_MM_GPI_UNREGISTER
 
	tEFI_SMM_GPI_UNREGISTER2
;

36 
EFI_MM_GPI_DISPATCH_PROTOCOL
 
	tEFI_SMM_GPI_DISPATCH2_PROTOCOL
;

40 
EFI_GUID
 
gEfiSmmGpiDi•©ch2PrŸocﬁGuid
;

	@SmmIoTrapDispatch2.h

15 #i‚de‡
_SMM_IO_TRAP_DISPATCH2_H_


16 
	#_SMM_IO_TRAP_DISPATCH2_H_


	)

18 
	~<PrŸocﬁ/MmIoTøpDi•©ch.h
>

20 
	#EFI_SMM_IO_TRAP_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_IO_TRAP_DISPATCH_PROTOCOL_GUID


	)

25 
EFI_MM_IO_TRAP_DISPATCH_TYPE
 
	tEFI_SMM_IO_TRAP_DISPATCH_TYPE
;

31 
EFI_MM_IO_TRAP_REGISTER_CONTEXT
 
	tEFI_SMM_IO_TRAP_REGISTER_CONTEXT
;

36 
EFI_MM_IO_TRAP_CONTEXT
 
	tEFI_SMM_IO_TRAP_CONTEXT
;

38 
EFI_MM_IO_TRAP_DISPATCH_PROTOCOL
 
	tEFI_SMM_IO_TRAP_DISPATCH2_PROTOCOL
;

40 
EFI_MM_IO_TRAP_DISPATCH_REGISTER
 
	tEFI_SMM_IO_TRAP_DISPATCH2_REGISTER
;

42 
EFI_MM_IO_TRAP_DISPATCH_UNREGISTER
 
	tEFI_SMM_IO_TRAP_DISPATCH2_UNREGISTER
;

44 
EFI_GUID
 
gEfiSmmIoTøpDi•©ch2PrŸocﬁGuid
;

	@SmmPciRootBridgeIo.h

11 #i‚de‡
_SMM_PCI_ROOT_BRIDGE_IO_H_


12 
	#_SMM_PCI_ROOT_BRIDGE_IO_H_


	)

14 
	~<PrŸocﬁ/MmPciRoŸBridgeIo.h
>

16 
	#EFI_SMM_PCI_ROOT_BRIDGE_IO_PROTOCOL_GUID
 
EFI_MM_PCI_ROOT_BRIDGE_IO_PROTOCOL_GUID


	)

23 
EFI_MM_PCI_ROOT_BRIDGE_IO_PROTOCOL
 
	tEFI_SMM_PCI_ROOT_BRIDGE_IO_PROTOCOL
;

25 
EFI_GUID
 
gEfiSmmPciRoŸBridgeIoPrŸocﬁGuid
;

	@SmmPeriodicTimerDispatch2.h

15 #i‚de‡
_SMM_PERIODIC_TIMER_DISPATCH2_H_


16 
	#_SMM_PERIODIC_TIMER_DISPATCH2_H_


	)

18 
	~<Pi/PiSmmCis.h
>

19 
	~<PrŸocﬁ/MmPîiodicTimîDi•©ch.h
>

21 
	#EFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_PERIODIC_TIMER_DISPATCH_PROTOCOL_GUID


	)

47 
UINT64
 
	mPîiod
;

53 
UINT64
 
	mSmiTickI¡îvÆ
;

54 } 
	tEFI_SMM_PERIODIC_TIMER_REGISTER_CONTEXT
;

61 
EFI_MM_PERIODIC_TIMER_CONTEXT
 
	tEFI_SMM_PERIODIC_TIMER_CONTEXT
;

63 
_EFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
 
	tEFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
;

93 
	gEFI_STATUS


94 (
	tEFIAPI
 *
	tEFI_SMM_PERIODIC_TIMER_REGISTER2
)(

95 
	tIN
 
	tCONST
 
	tEFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
 *
	tThis
,

96 
	tIN
 
	tEFI_SMM_HANDLER_ENTRY_POINT2
 
	tDi•©chFun˘i⁄
,

97 
	tIN
 
	tCONST
 
	tEFI_SMM_PERIODIC_TIMER_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

98 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


114 
	gEFI_STATUS


115 (
	tEFIAPI
 *
	tEFI_SMM_PERIODIC_TIMER_UNREGISTER2
)(

116 
	tIN
 
	tCONST
 
	tEFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
 *
	tThis
,

117 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


136 
	gEFI_STATUS


137 (
	tEFIAPI
 *
	tEFI_SMM_PERIODIC_TIMER_INTERVAL2
)(

138 
	tIN
 
	tCONST
 
	tEFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
 *
	tThis
,

139 
	tIN
 
	tOUT
 
	tUINT64
 **
	tSmiTickI¡îvÆ


147 
	s_EFI_SMM_PERIODIC_TIMER_DISPATCH2_PROTOCOL
 {

148 
EFI_SMM_PERIODIC_TIMER_REGISTER2
 
	mRegi°î
;

149 
EFI_SMM_PERIODIC_TIMER_UNREGISTER2
 
	mUnRegi°î
;

150 
EFI_SMM_PERIODIC_TIMER_INTERVAL2
 
	mGëNextSh‹ãrI¡îvÆ
;

153 
EFI_GUID
 
gEfiSmmPîiodicTimîDi•©ch2PrŸocﬁGuid
;

	@SmmPowerButtonDispatch2.h

15 #i‚de‡
_SMM_POWER_BUTTON_DISPATCH2_H_


16 
	#_SMM_POWER_BUTTON_DISPATCH2_H_


	)

18 
	~<PrŸocﬁ/MmPowîBuâ⁄Di•©ch.h
>

20 
	#EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL_GUID


	)

25 
EFI_MM_POWER_BUTTON_REGISTER_CONTEXT
 
	tEFI_SMM_POWER_BUTTON_REGISTER_CONTEXT
;

27 
EFI_MM_POWER_BUTTON_DISPATCH_PROTOCOL
 
	tEFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
;

29 
EFI_MM_POWER_BUTTON_REGISTER
 
	tEFI_SMM_POWER_BUTTON_REGISTER2
;

31 
EFI_MM_POWER_BUTTON_UNREGISTER
 
	tEFI_SMM_POWER_BUTTON_UNREGISTER2
;

33 
EFI_GUID
 
gEfiSmmPowîBuâ⁄Di•©ch2PrŸocﬁGuid
;

	@SmmReadyToLock.h

19 #i‚de‡
_SMM_READY_TO_LOCK_H_


20 
	#_SMM_READY_TO_LOCK_H_


	)

22 
	~<PrŸocﬁ/MmRódyToLock.h
>

24 
	#EFI_SMM_READY_TO_LOCK_PROTOCOL_GUID
 
EFI_MM_READY_TO_LOCK_PROTOCOL_GUID


	)

26 
EFI_GUID
 
gEfiSmmRódyToLockPrŸocﬁGuid
;

	@SmmReportStatusCodeHandler.h

12 #i‚de‡
__SMM_REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


13 
	#__SMM_REPORT_STATUS_CODE_HANDLER_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/MmRï‹tSètusCodeH™dÀr.h
>

17 
	#EFI_SMM_RSC_HANDLER_PROTOCOL_GUID
 
EFI_MM_RSC_HANDLER_PROTOCOL_GUID


	)

19 
EFI_MM_RSC_HANDLER_CALLBACK
 
	tEFI_SMM_RSC_HANDLER_CALLBACK
;

21 
EFI_MM_RSC_HANDLER_REGISTER
 
	tEFI_SMM_RSC_HANDLER_REGISTER
;

23 
EFI_MM_RSC_HANDLER_UNREGISTER
 
	tEFI_SMM_RSC_HANDLER_UNREGISTER
;

25 
EFI_MM_RSC_HANDLER_PROTOCOL
 
	tEFI_SMM_RSC_HANDLER_PROTOCOL
;

27 
EFI_GUID
 
gEfiSmmRscH™dÀrPrŸocﬁGuid
;

	@SmmStandbyButtonDispatch2.h

15 #i‚de‡
_SMM_STANDBY_BUTTON_DISPATCH2_H_


16 
	#_SMM_STANDBY_BUTTON_DISPATCH2_H_


	)

18 
	~<PrŸocﬁ/MmSèndbyBuâ⁄Di•©ch.h
>

20 
	#EFI_SMM_STANDBY_BUTTON_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL_GUID


	)

25 
EFI_MM_STANDBY_BUTTON_REGISTER_CONTEXT
 
	tEFI_SMM_STANDBY_BUTTON_REGISTER_CONTEXT
;

27 
EFI_MM_STANDBY_BUTTON_DISPATCH_PROTOCOL
 
	tEFI_SMM_STANDBY_BUTTON_DISPATCH2_PROTOCOL
;

29 
EFI_MM_STANDBY_BUTTON_REGISTER
 
	tEFI_SMM_STANDBY_BUTTON_REGISTER2
;

31 
EFI_MM_STANDBY_BUTTON_UNREGISTER
 
	tEFI_SMM_STANDBY_BUTTON_UNREGISTER2
;

33 
EFI_GUID
 
gEfiSmmSèndbyBuâ⁄Di•©ch2PrŸocﬁGuid
;

	@SmmStatusCode.h

11 #i‚de‡
_SMM_STATUS_CODE_H__


12 
	#_SMM_STATUS_CODE_H__


	)

14 
	~<PrŸocﬁ/MmSètusCode.h
>

16 
	#EFI_SMM_STATUS_CODE_PROTOCOL_GUID
 
EFI_MM_STATUS_CODE_PROTOCOL_GUID


	)

18 
EFI_MM_STATUS_CODE_PROTOCOL
 
	tEFI_SMM_STATUS_CODE_PROTOCOL
;

20 
EFI_MM_REPORT_STATUS_CODE
 
	tEFI_SMM_REPORT_STATUS_CODE
;

22 
EFI_GUID
 
gEfiSmmSètusCodePrŸocﬁGuid
;

	@SmmSwDispatch2.h

12 #i‚de‡
_SMM_SW_DISPATCH2_H_


13 
	#_SMM_SW_DISPATCH2_H_


	)

15 
	~<PrŸocﬁ/MmSwDi•©ch.h
>

16 
	~<Pi/PiSmmCis.h
>

18 
	#EFI_SMM_SW_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_SW_DISPATCH_PROTOCOL_GUID


	)

26 
UINTN
 
	mSwSmiI≈utVÆue
;

27 } 
	tEFI_SMM_SW_REGISTER_CONTEXT
;

39 
UINTN
 
	mSwSmiCpuIndex
;

43 
UINT8
 
	mComm™dP‹t
;

47 
UINT8
 
	mD©aP‹t
;

48 } 
	tEFI_SMM_SW_CONTEXT
;

50 
_EFI_SMM_SW_DISPATCH2_PROTOCOL
 
	tEFI_SMM_SW_DISPATCH2_PROTOCOL
;

82 
	gEFI_STATUS


83 (
	tEFIAPI
 *
	tEFI_SMM_SW_REGISTER2
)(

84 
	tIN
 
	tCONST
 
	tEFI_SMM_SW_DISPATCH2_PROTOCOL
 *
	tThis
,

85 
	tIN
 
	tEFI_SMM_HANDLER_ENTRY_POINT2
 
	tDi•©chFun˘i⁄
,

86 
	tIN
 
	tOUT
 
	tEFI_SMM_SW_REGISTER_CONTEXT
 *
	tRegi°îC⁄ãxt
,

87 
	tOUT
 
	tEFI_HANDLE
 *
	tDi•©chH™dÀ


103 
	gEFI_STATUS


104 (
	tEFIAPI
 *
	tEFI_SMM_SW_UNREGISTER2
)(

105 
	tIN
 
	tCONST
 
	tEFI_SMM_SW_DISPATCH2_PROTOCOL
 *
	tThis
,

106 
	tIN
 
	tEFI_HANDLE
 
	tDi•©chH™dÀ


116 
	s_EFI_SMM_SW_DISPATCH2_PROTOCOL
 {

117 
EFI_SMM_SW_REGISTER2
 
	mRegi°î
;

118 
EFI_SMM_SW_UNREGISTER2
 
	mUnRegi°î
;

123 
UINTN
 
	mMaximumSwiVÆue
;

126 
EFI_GUID
 
gEfiSmmSwDi•©ch2PrŸocﬁGuid
;

	@SmmSxDispatch2.h

12 #i‚de‡
_SMM_SX_DISPATCH2_H_


13 
	#_SMM_SX_DISPATCH2_H_


	)

15 
	~<PrŸocﬁ/MmSxDi•©ch.h
>

17 
	#EFI_SMM_SX_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_SX_DISPATCH_PROTOCOL_GUID


	)

22 
EFI_MM_SX_REGISTER_CONTEXT
 
	tEFI_SMM_SX_REGISTER_CONTEXT
;

24 
EFI_MM_SX_DISPATCH_PROTOCOL
 
	tEFI_SMM_SX_DISPATCH2_PROTOCOL
;

26 
EFI_MM_SX_REGISTER
 
	tEFI_SMM_SX_REGISTER2
;

28 
EFI_MM_SX_UNREGISTER
 
	tEFI_SMM_SX_UNREGISTER2
;

30 
EFI_GUID
 
gEfiSmmSxDi•©ch2PrŸocﬁGuid
;

	@SmmUsbDispatch2.h

15 #i‚de‡
_SMM_USB_DISPATCH2_H_


16 
	#_SMM_USB_DISPATCH2_H_


	)

18 
	~<PrŸocﬁ/MmUsbDi•©ch.h
>

20 
	#EFI_SMM_USB_DISPATCH2_PROTOCOL_GUID
 
EFI_MM_USB_DISPATCH_PROTOCOL_GUID


	)

25 
EFI_USB_MMI_TYPE
 
	tEFI_USB_SMI_TYPE
;

30 
EFI_MM_USB_REGISTER_CONTEXT
 
	tEFI_SMM_USB_REGISTER_CONTEXT
;

32 
EFI_MM_USB_DISPATCH_PROTOCOL
 
	tEFI_SMM_USB_DISPATCH2_PROTOCOL
;

34 
EFI_MM_USB_REGISTER
 
	tEFI_SMM_USB_REGISTER2
;

36 
EFI_MM_USB_UNREGISTER
 
	tEFI_SMM_USB_UNREGISTER2
;

38 
EFI_GUID
 
gEfiSmmUsbDi•©ch2PrŸocﬁGuid
;

	@SpiConfiguration.h

12 #i‚de‡
__SPI_CONFIGURATION_PROTOCOL_H__


13 
	#__SPI_CONFIGURATION_PROTOCOL_H__


	)

18 
	#EFI_SPI_CONFIGURATION_GUID
 \

	)

25 
	#Hz
(
Fªquícy
Ë(Fªquícy)

	)

26 
	#KHz
(
Fªquícy
Ë(1000 * 
	`Hz
 (Fªquícy))

	)

27 
	#MHz
(
Fªquícy
Ë(1000 * 
	`KHz
 (Fªquícy))

	)

29 
_EFI_SPI_PERIPHERAL
 
	tEFI_SPI_PERIPHERAL
;

56 
	gEFI_STATUS


57 (
	tEFIAPI
 *
	tEFI_SPI_CHIP_SELECT
) (

58 
	tIN
 
	tCONST
 
	tEFI_SPI_PERIPHERAL
 *
	tSpiPîùhîÆ
,

59 
	tIN
 
	tBOOLEAN
 
	tPöVÆue


87 
	gEFI_STATUS


88 (
	tEFIAPI
 *
	tEFI_SPI_CLOCK
) (

89 
	tIN
 
	tCONST
 
	tEFI_SPI_PERIPHERAL
 *
	tSpiPîùhîÆ
,

90 
	tIN
 
	tUINT32
 *
	tClockHz


98 
	s_EFI_SPI_PART
 {

102 
CONST
 
CHAR16
 *
	mVíd‹
;

107 
CONST
 
CHAR16
 *
	mP¨tNumbî
;

113 
UINT32
 
	mMöClockHz
;

119 
UINT32
 
	mMaxClockHz
;

126 
BOOLEAN
 
	mChùSñe˘Pﬁ¨ôy
;

127 } 
	tEFI_SPI_PART
;

136 
	s_EFI_SPI_BUS
 {

140 
CONST
 
CHAR16
 *
	mFrõndlyName
;

146 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mPîùhîÆli°
;

152 
CONST
 
EFI_DEVICE_PATH_PROTOCOL
 *
	mC⁄åﬁÀrP©h
;

159 
EFI_SPI_CLOCK
 
	mClock
;

168 
VOID
 *
	mClockP¨amëî
;

169 } 
	tEFI_SPI_BUS
;

178 
	s_EFI_SPI_PERIPHERAL
 {

183 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mNextSpiPîùhîÆ
;

188 
CONST
 
CHAR16
 *
	mFrõndlyName
;

198 
CONST
 
GUID
 *
	mSpiPîùhîÆDrivîGuid
;

203 
CONST
 
EFI_SPI_PART
 *
	mSpiP¨t
;

210 
UINT32
 
	mMaxClockHz
;

217 
BOOLEAN
 
	mClockPﬁ¨ôy
;

223 
BOOLEAN
 
	mClockPha£
;

232 
UINT32
 
	mAâribuãs
;

239 
CONST
 
VOID
 *
	mC⁄figuøti⁄D©a
;

245 
CONST
 
EFI_SPI_BUS
 *
	mSpiBus
;

252 
EFI_SPI_CHIP_SELECT
 
	mChùSñe˘
;

263 
VOID
 *
	mChùSñe˘P¨amëî
;

273 
	s_EFI_SPI_CONFIGURATION_PROTOCOL
 {

277 
UINT32
 
	mBusCou¡
;

282 
CONST
 
EFI_SPI_BUS
 *CONST *CONST 
	mBu¶i°
;

283 } 
	tEFI_SPI_CONFIGURATION_PROTOCOL
;

285 
EFI_GUID
 
gEfiSpiC⁄figuøti⁄PrŸocﬁGuid
;

	@SpiHc.h

12 #i‚de‡
__SPI_HC_PROTOCOL_H__


13 
	#__SPI_HC_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/SpiC⁄figuøti⁄.h
>

16 
	~<PrŸocﬁ/SpiIo.h
>

21 
	#EFI_SPI_HOST_GUID
 \

	)

28 
	#EFI_SPI_HC_PROTOCOL_GUID
 
EFI_SPI_HOST_GUID


	)

30 
_EFI_SPI_HC_PROTOCOL
 
	tEFI_SPI_HC_PROTOCOL
;

56 
	gEFI_STATUS


57 (
	tEFIAPI
 *
	tEFI_SPI_HC_PROTOCOL_CHIP_SELECT
) (

58 
	tIN
 
	tCONST
 
	tEFI_SPI_HC_PROTOCOL
 *
	tThis
,

59 
	tIN
 
	tCONST
 
	tEFI_SPI_PERIPHERAL
 *
	tSpiPîùhîÆ
,

60 
	tIN
 
	tBOOLEAN
 
	tPöVÆue


89 
	gEFI_STATUS


90 (
	tEFIAPI
 *
	tEFI_SPI_HC_PROTOCOL_CLOCK
) (

91 
	tIN
 
	tCONST
 
	tEFI_SPI_HC_PROTOCOL
 *
	tThis
,

92 
	tIN
 
	tCONST
 
	tEFI_SPI_PERIPHERAL
 *
	tSpiPîùhîÆ
,

93 
	tIN
 
	tUINT32
 *
	tClockHz


118 
	gEFI_STATUS


119 (
	tEFIAPI
 *
	tEFI_SPI_HC_PROTOCOL_TRANSACTION
) (

120 
	tIN
 
	tCONST
 
	tEFI_SPI_HC_PROTOCOL
 *
	tThis
,

121 
	tIN
 
	tEFI_SPI_BUS_TRANSACTION
 *
	tBusTønß˘i⁄


127 
	s_EFI_SPI_HC_PROTOCOL
 {

154 
UINT32
 
	mAâribuãs
;

161 
UINT32
 
	mFømeSizeSuµ‹tMask
;

166 
UINT32
 
	mMaximumTøns„rByãs
;

171 
EFI_SPI_HC_PROTOCOL_CHIP_SELECT
 
	mChùSñe˘
;

177 
EFI_SPI_HC_PROTOCOL_CLOCK
 
	mClock
;

183 
EFI_SPI_HC_PROTOCOL_TRANSACTION
 
	mTønß˘i⁄
;

186 
EFI_GUID
 
gEfiSpiHcPrŸocﬁGuid
;

	@SpiIo.h

12 #i‚de‡
__SPI_IO_PROTOCOL_H__


13 
	#__SPI_IO_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/LegacySpiC⁄åﬁÀr.h
>

16 
	~<PrŸocﬁ/SpiC⁄figuøti⁄.h
>

18 
_EFI_SPI_IO_PROTOCOL
 
	tEFI_SPI_IO_PROTOCOL
;

30 
	mSPI_TRANSACTION_FULL_DUPLEX
,

36 
	mSPI_TRANSACTION_WRITE_ONLY
,

42 
	mSPI_TRANSACTION_READ_ONLY
,

50 
	mSPI_TRANSACTION_WRITE_THEN_READ


51 } 
	tEFI_SPI_TRANSACTION_TYPE
;

127 
	gEFI_STATUS


128 (
	tEFIAPI
 *
	tEFI_SPI_IO_PROTOCOL_TRANSACTION
) (

129 
	tIN
 
	tCONST
 
	tEFI_SPI_IO_PROTOCOL
 *
	tThis
,

130 
	tIN
 
	tEFI_SPI_TRANSACTION_TYPE
 
	tTønß˘i⁄Ty≥
,

131 
	tIN
 
	tBOOLEAN
 
	tDebugTønß˘i⁄
,

132 
	tIN
 
	tUINT32
 
	tClockHz
 
	tOPTIONAL
,

133 
	tIN
 
	tUINT32
 
	tBusWidth
,

134 
	tIN
 
	tUINT32
 
	tFømeSize
,

135 
	tIN
 
	tUINT32
 
	tWrôeByãs
,

136 
	tIN
 
	tUINT8
 *
	tWrôeBuf„r
,

137 
	tIN
 
	tUINT32
 
	tRódByãs
,

138 
	tOUT
 
	tUINT8
 *
	tRódBuf„r


160 
	gEFI_STATUS


161 (
	tEFIAPI
 *
	tEFI_SPI_IO_PROTOCOL_UPDATE_SPI_PERIPHERAL
) (

162 
	tIN
 
	tCONST
 
	tEFI_SPI_IO_PROTOCOL
 *
	tThis
,

163 
	tIN
 
	tCONST
 
	tEFI_SPI_PERIPHERAL
 *
	tSpiPîùhîÆ


170 
	s_EFI_SPI_BUS_TRANSACTION
 {

174 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mSpiPîùhîÆ
;

180 
EFI_SPI_TRANSACTION_TYPE
 
	mTønß˘i⁄Ty≥
;

188 
BOOLEAN
 
	mDebugTønß˘i⁄
;

193 
UINT32
 
	mBusWidth
;

198 
UINT32
 
	mFømeSize
;

203 
UINT32
 
	mWrôeByãs
;

210 
UINT8
 *
	mWrôeBuf„r
;

215 
UINT32
 
	mRódByãs
;

223 
UINT8
 *
	mRódBuf„r
;

224 } 
	tEFI_SPI_BUS_TRANSACTION
;

230 
	s_EFI_SPI_IO_PROTOCOL
 {

235 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mSpiPîùhîÆ
;

241 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mOrigöÆSpiPîùhîÆ
;

250 
UINT32
 
	mFømeSizeSuµ‹tMask
;

255 
UINT32
 
	mMaximumTøns„rByãs
;

268 
UINT32
 
	mAâribuãs
;

273 
CONST
 
EFI_LEGACY_SPI_CONTROLLER_PROTOCOL
 *
	mLegacySpiPrŸocﬁ
;

278 
EFI_SPI_IO_PROTOCOL_TRANSACTION
 
	mTønß˘i⁄
;

283 
EFI_SPI_IO_PROTOCOL_UPDATE_SPI_PERIPHERAL
 
	mUpd©eSpiPîùhîÆ
;

	@SpiNorFlash.h

12 #i‚de‡
__SPI_NOR_FLASH_PROTOCOL_H__


13 
	#__SPI_NOR_FLASH_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/SpiC⁄figuøti⁄.h
>

20 
	#EFI_SPI_NOR_FLASH_PROTOCOL_GUID
 \

	)

24 
_EFI_SPI_NOR_FLASH_PROTOCOL
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_GET_FLASH_ID
) (

48 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

49 
	tOUT
 
	tUINT8
 *
	tBuf„r


71 
	gEFI_STATUS


72 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_READ_DATA
) (

73 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

74 
	tIN
 
	tUINT32
 
	tFœshAddªss
,

75 
	tIN
 
	tUINT32
 
	tLígthInByãs
,

76 
	tOUT
 
	tUINT8
 *
	tBuf„r


94 
	gEFI_STATUS


95 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_READ_STATUS
) (

96 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

97 
	tIN
 
	tUINT32
 
	tLígthInByãs
,

98 
	tOUT
 
	tUINT8
 *
	tFœshSètus


117 
	gEFI_STATUS


118 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_WRITE_STATUS
) (

119 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

120 
	tIN
 
	tUINT32
 
	tLígthInByãs
,

121 
	tIN
 
	tUINT8
 *
	tFœshSètus


145 
	gEFI_STATUS


146 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_WRITE_DATA
) (

147 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

148 
	tIN
 
	tUINT32
 
	tFœshAddªss
,

149 
	tIN
 
	tUINT32
 
	tLígthInByãs
,

150 
	tIN
 
	tUINT8
 *
	tBuf„r


172 
	gEFI_STATUS


173 (
	tEFIAPI
 *
	tEFI_SPI_NOR_FLASH_PROTOCOL_ERASE
) (

174 
	tIN
 
	tCONST
 
	tEFI_SPI_NOR_FLASH_PROTOCOL
 *
	tThis
,

175 
	tIN
 
	tUINT32
 
	tFœshAddªss
,

176 
	tIN
 
	tUINT32
 
	tBlockCou¡


197 
	s_EFI_SPI_NOR_FLASH_PROTOCOL
 {

201 
CONST
 
EFI_SPI_PERIPHERAL
 *
	mSpiPîùhîÆ
;

206 
UINT32
 
	mFœshSize
;

211 
UINT8
 
	mDevi˚id
[3];

216 
UINT32
 
	mEø£BlockByãs
;

221 
EFI_SPI_NOR_FLASH_PROTOCOL_GET_FLASH_ID
 
	mGëFœshid
;

226 
EFI_SPI_NOR_FLASH_PROTOCOL_READ_DATA
 
	mRódD©a
;

231 
EFI_SPI_NOR_FLASH_PROTOCOL_READ_DATA
 
	mLfRódD©a
;

236 
EFI_SPI_NOR_FLASH_PROTOCOL_READ_STATUS
 
	mRódSètus
;

241 
EFI_SPI_NOR_FLASH_PROTOCOL_WRITE_STATUS
 
	mWrôeSètus
;

246 
EFI_SPI_NOR_FLASH_PROTOCOL_WRITE_DATA
 
	mWrôeD©a
;

251 
EFI_SPI_NOR_FLASH_PROTOCOL_ERASE
 
	mEø£
;

254 
EFI_GUID
 
gEfiSpiN‹FœshPrŸocﬁGuid
;

	@SpiSmmConfiguration.h

12 #i‚de‡
__SPI_SMM_CONFIGURATION_PROTOCOL_H__


13 
	#__SPI_SMM_CONFIGURATION_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/SpiC⁄figuøti⁄.h
>

20 
	#EFI_SPI_SMM_CONFIGURATION_PROTOCOL_GUID
 \

	)

25 
_EFI_SPI_CONFIGURATION_PROTOCOL


26 
	tEFI_SPI_SMM_CONFIGURATION_PROTOCOL
;

28 
EFI_GUID
 
gEfiSpiSmmC⁄figuøti⁄PrŸocﬁGuid
;

	@SpiSmmHc.h

12 #i‚de‡
__SPI_SMM_HC_H__


13 
	#__SPI_SMM_HC_H__


	)

15 
	~<PrŸocﬁ/SpiHc.h
>

20 
	#EFI_SPI_SMM_HC_PROTOCOL_GUID
 \

	)

25 
_EFI_SPI_HC_PROTOCOL


26 
	tEFI_SPI_SMM_HC_PROTOCOL
;

28 
EFI_GUID
 
gEfiSpiSmmHcPrŸocﬁGuid
;

	@SpiSmmNorFlash.h

12 #i‚de‡
__SPI_SMM_NOR_FLASH_PROTOCOL_H__


13 
	#__SPI_SMM_NOR_FLASH_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/SpiN‹Fœsh.h
>

20 
	#EFI_SPI_SMM_NOR_FLASH_PROTOCOL_GUID
 \

	)

25 
_EFI_SPI_NOR_FLASH_PROTOCOL


26 
	tEFI_SPI_SMM_NOR_FLASH_PROTOCOL
;

28 
EFI_GUID
 
gEfiSpiSmmN‹FœshPrŸocﬁGuid
;

	@StatusCode.h

9 #i‚de‡
__STATUS_CODE_RUNTIME_PROTOCOL_H__


10 
	#__STATUS_CODE_RUNTIME_PROTOCOL_H__


	)

12 
	#EFI_STATUS_CODE_RUNTIME_PROTOCOL_GUID
 \

	)

34 
	gEFI_STATUS


35 (
	tEFIAPI
 *
	tEFI_REPORT_STATUS_CODE
)(

36 
	tIN
 
	tEFI_STATUS_CODE_TYPE
 
	tTy≥
,

37 
	tIN
 
	tEFI_STATUS_CODE_VALUE
 
	tVÆue
,

38 
	tIN
 
	tUINT32
 
	tIn°™˚
,

39 
	tIN
 
	tEFI_GUID
 *
	tCÆÀrId
 
	tOPTIONAL
,

40 
	tIN
 
	tEFI_STATUS_CODE_DATA
 *
	tD©a
 
	tOPTIONAL


47 
	s_EFI_STATUS_CODE_PROTOCOL
 {

48 
EFI_REPORT_STATUS_CODE
 
	mRï‹tSètusCode
;

49 } 
	tEFI_STATUS_CODE_PROTOCOL
;

51 
EFI_GUID
 
gEfiSètusCodeRu¡imePrŸocﬁGuid
;

	@StorageSecurityCommand.h

13 #i‚de‡
__STORAGE_SECURITY_COMMAND_H__


14 
	#__STORAGE_SECURITY_COMMAND_H__


	)

16 
	#EFI_STORAGE_SECURITY_COMMAND_PROTOCOL_GUID
 \

	)

21 
_EFI_STORAGE_SECURITY_COMMAND_PROTOCOL
 
	tEFI_STORAGE_SECURITY_COMMAND_PROTOCOL
;

95 
	gEFI_STATUS


96 (
	tEFIAPI
 *
	tEFI_STORAGE_SECURITY_RECEIVE_DATA
)(

97 
	tIN
 
	tEFI_STORAGE_SECURITY_COMMAND_PROTOCOL
 *
	tThis
,

98 
	tIN
 
	tUINT32
 
	tMedüId
,

99 
	tIN
 
	tUINT64
 
	tTimeout
,

100 
	tIN
 
	tUINT8
 
	tSecurôyPrŸocﬁId
,

101 
	tIN
 
	tUINT16
 
	tSecurôyPrŸocﬁS≥cificD©a
,

102 
	tIN
 
	tUINTN
 
	tPaylﬂdBuf„rSize
,

103 
	tOUT
 
	tVOID
 *
	tPaylﬂdBuf„r
,

104 
	tOUT
 
	tUINTN
 *
	tPaylﬂdTøns„rSize


168 
	gEFI_STATUS


169 (
	tEFIAPI
 *
	tEFI_STORAGE_SECURITY_SEND_DATA
) (

170 
	tIN
 
	tEFI_STORAGE_SECURITY_COMMAND_PROTOCOL
 *
	tThis
,

171 
	tIN
 
	tUINT32
 
	tMedüId
,

172 
	tIN
 
	tUINT64
 
	tTimeout
,

173 
	tIN
 
	tUINT8
 
	tSecurôyPrŸocﬁId
,

174 
	tIN
 
	tUINT16
 
	tSecurôyPrŸocﬁS≥cificD©a
,

175 
	tIN
 
	tUINTN
 
	tPaylﬂdBuf„rSize
,

176 
	tIN
 
	tVOID
 *
	tPaylﬂdBuf„r


199 
	s_EFI_STORAGE_SECURITY_COMMAND_PROTOCOL
 {

200 
EFI_STORAGE_SECURITY_RECEIVE_DATA
 
	mRe˚iveD©a
;

201 
EFI_STORAGE_SECURITY_SEND_DATA
 
	mSídD©a
;

204 
EFI_GUID
 
gEfiSt‹ageSecurôyComm™dPrŸocﬁGuid
;

	@SuperIo.h

13 #i‚de‡
__EFI_SUPER_IO_PROTOCOL_H__


14 
	#__EFI_SUPER_IO_PROTOCOL_H__


	)

15 
	~<Indu°rySènd¨d/A˝i.h
>

17 
	#EFI_SIO_PROTOCOL_GUID
 \

	)

21 
ACPI_SMALL_RESOURCE_HEADER
 *
	mSmÆlHódî
;

22 
ACPI_LARGE_RESOURCE_HEADER
 *
	mL¨geHódî
;

23 } 
	tACPI_RESOURCE_HEADER_PTR
;

26 
UINT8
 
	mRegi°î
;

27 
UINT8
 
	mAndMask
;

28 
UINT8
 
	mOrMask
;

29 } 
	tEFI_SIO_REGISTER_MODIFY
;

31 
_EFI_SIO_PROTOCOL
 
	tEFI_SIO_PROTOCOL
;

58 
	gEFI_STATUS


59 (
	tEFIAPI
 *
	tEFI_SIO_REGISTER_ACCESS
)(

60 
	tIN
 
	tCONST
 
	tEFI_SIO_PROTOCOL
 *
	tThis
,

61 
	tIN
 
	tBOOLEAN
 
	tWrôe
,

62 
	tIN
 
	tBOOLEAN
 
	tExôCfgMode
,

63 
	tIN
 
	tUINT8
 
	tRegi°î
,

64 
	tIN
 
	tOUT
 
	tUINT8
 *
	tVÆue


87 
	gEFI_STATUS


88 (
	tEFIAPI
 *
	tEFI_SIO_GET_RESOURCES
)(

89 
	tIN
 
	tCONST
 
	tEFI_SIO_PROTOCOL
 *
	tThis
,

90 
	tOUT
 
	tACPI_RESOURCE_HEADER_PTR
 *
	tResour˚Li°


107 
	gEFI_STATUS


108 (
	tEFIAPI
 *
	tEFI_SIO_SET_RESOURCES
)(

109 
	tIN
 
	tCONST
 
	tEFI_SIO_PROTOCOL
 *
	tThis
,

110 
	tIN
 
	tACPI_RESOURCE_HEADER_PTR
 
	tResour˚Li°


124 
	gEFI_STATUS


125 (
	tEFIAPI
 *
	tEFI_SIO_POSSIBLE_RESOURCES
)(

126 
	tIN
 
	tCONST
 
	tEFI_SIO_PROTOCOL
 *
	tThis
,

127 
	tOUT
 
	tACPI_RESOURCE_HEADER_PTR
 *
	tResour˚CﬁÀ˘i⁄


152 
	gEFI_STATUS


153 (
	tEFIAPI
 *
	tEFI_SIO_MODIFY
)(

154 
	tIN
 
	tCONST
 
	tEFI_SIO_PROTOCOL
 *
	tThis
,

155 
	tIN
 
	tCONST
 
	tEFI_SIO_REGISTER_MODIFY
 *
	tComm™d
,

156 
	tIN
 
	tUINTN
 
	tNumbîOfComm™ds


159 
	s_EFI_SIO_PROTOCOL
 {

160 
EFI_SIO_REGISTER_ACCESS
 
	mRegi°îAc˚ss
;

161 
EFI_SIO_GET_RESOURCES
 
	mGëResour˚s
;

162 
EFI_SIO_SET_RESOURCES
 
	mSëResour˚s
;

163 
EFI_SIO_POSSIBLE_RESOURCES
 
	mPossibÀResour˚s
;

164 
EFI_SIO_MODIFY
 
	mModify
;

167 
EFI_GUID
 
gEfiSioPrŸocﬁGuid
;

	@SuperIoControl.h

14 #i‚de‡
__EFI_SUPER_IO_CONTROL_PROTOCOL_H__


15 
	#__EFI_SUPER_IO_CONTROL_PROTOCOL_H__


	)

17 
	#EFI_SIO_CONTROL_PROTOCOL_GUID
 \

	)

22 
_EFI_SIO_CONTROL_PROTOCOL
 
	tEFI_SIO_CONTROL_PROTOCOL
;

23 
_EFI_SIO_CONTROL_PROTOCOL
 *
	tPEFI_SIO_CONTROL_PROTOCOL
;

41 
	gEFI_STATUS


42 (
	tEFIAPI
 *
	tEFI_SIO_CONTROL_ENABLE
)(

43 
	tIN
 
	tCONST
 
	tEFI_SIO_CONTROL_PROTOCOL
 *
	tThis


64 
	gEFI_STATUS


65 (
	tEFIAPI
 *
	tEFI_SIO_CONTROL_DISABLE
)(

66 
	tIN
 
	tCONST
 
	tEFI_SIO_CONTROL_PROTOCOL
 *
	tThis


69 
	s_EFI_SIO_CONTROL_PROTOCOL
 {

73 
UINT32
 
	mVîsi⁄
;

77 
EFI_SIO_CONTROL_ENABLE
 
	mE«bÀDevi˚
;

81 
EFI_SIO_CONTROL_DISABLE
 
	mDißbÀDevi˚
;

84 
EFI_GUID
 
gEfiSioC⁄åﬁPrŸocﬁGuid
;

	@Supplicant.h

12 #i‚de‡
__EFI_SUPPLICANT_PROTOCOL_H__


13 
	#__EFI_SUPPLICANT_PROTOCOL_H__


	)

15 
	~<PrŸocﬁ/WiFi2.h
>

22 
	#EFI_SUPPLICANT_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

31 
	#EFI_SUPPLICANT_PROTOCOL_GUID
 \

	)

36 
_EFI_SUPPLICANT_PROTOCOL
 
	tEFI_SUPPLICANT_PROTOCOL
;

45 
	mEfiSuµliˇ¡En¸y±
,

49 
	mEfiSuµliˇ¡De¸y±
,

50 } 
	tEFI_SUPPLICANT_CRYPT_MODE
;

64 
	mEfiSuµliˇ¡80211AKMSuôe
,

69 
	mEfiSuµliˇ¡80211GroupD©aCùhîSuôe
,

74 
	mEfiSuµliˇ¡80211Paúwi£CùhîSuôe
,

78 
	mEfiSuµliˇ¡80211PskPassw‹d
,

82 
	mEfiSuµliˇ¡80211T¨gëSSIDName
,

87 
	mEfiSuµliˇ¡80211Sèti⁄Mac
,

91 
	mEfiSuµliˇ¡80211T¨gëSSIDMac
,

100 
	mEfiSuµliˇ¡80211PTK
,

104 
	mEfiSuµliˇ¡80211GTK
,

109 
	mEfiSuµliˇ¡Sèã
,

113 
	mEfiSuµliˇ¡80211LökSèã
,

118 
	mEfiSuµliˇ¡KeyRe‰esh
,

128 
	mEfiSuµliˇ¡80211Suµ‹ãdAKMSuôes
,

133 
	mEfiSuµliˇ¡80211Suµ‹ãdSo·w¨eCùhîSuôes
,

138 
	mEfiSuµliˇ¡80211Suµ‹ãdH¨dw¨eCùhîSuôes
,

148 
	mEfiSuµliˇ¡80211IGTK
,

152 
	mEfiSuµliˇ¡80211PMK
,

153 
	mEfiSuµliˇ¡D©aTy≥Maximum


154 } 
	tEFI_SUPPLICANT_DATA_TYPE
;

163 
	mIìe80211U«uthítiˇãdU«ssocüãd
,

167 
	mIìe80211AuthítiˇãdU«ssocüãd
,

171 
	mIìe80211PídögRSNAuthítiˇti⁄
,

175 
	mIìe80211AuthítiˇãdAssocüãd


176 } 
	tEFI_80211_LINK_STATE
;

182 
	mGroup
,

183 
	mPaúwi£
,

184 
	mPìrKey
,

185 
	mIGTK


186 } 
	tEFI_SUPPLICANT_KEY_TYPE
;

195 
	mRe˚ive
,

199 
	mTønsmô
,

204 
	mBŸh


205 } 
	tEFI_SUPPLICANT_KEY_DIRECTION
;

215 
BOOLEAN
 
	mGTKRe‰esh
;

216 } 
	tEFI_SUPPLICANT_KEY_REFRESH
;

218 
	#EFI_MAX_KEY_LEN
 64

	)

227 
UINT8
 
	mKey
[
EFI_MAX_KEY_LEN
];

231 
UINT8
 
	mKeyLí
;

235 
UINT8
 
	mKeyId
;

240 
EFI_SUPPLICANT_KEY_TYPE
 
	mKeyTy≥
;

244 
EFI_80211_MAC_ADDRESS
 
	mAddr
;

248 
UINT8
 
	mRsc
[8];

252 
UINT8
 
	mRscLí
;

257 
BOOLEAN
 
	mIsAuthítiˇt‹
;

261 
EFI_80211_SUITE_SELECTOR
 
	mCùhîSuôe
;

265 
EFI_SUPPLICANT_KEY_DIRECTION
 
	mDúe˘i⁄
;

266 } 
	tEFI_SUPPLICANT_KEY
;

275 
UINT8
 
	mGTKCou¡
;

280 
EFI_SUPPLICANT_KEY
 
	mGTKLi°
[1];

281 } 
	tEFI_SUPPLICANT_GTK_LIST
;

290 
UINT32
 
	mFøgmítLígth
;

294 
VOID
 *
	mFøgmítBuf„r
;

295 } 
	tEFI_SUPPLICANT_FRAGMENT_DATA
;

335 
	gEFI_STATUS


336 (
	tEFIAPI
 *
	tEFI_SUPPLICANT_BUILD_RESPONSE_PACKET
) (

337 
	tIN
 
	tEFI_SUPPLICANT_PROTOCOL
 *
	tThis
,

338 
	tIN
 
	tUINT8
 *
	tReque°Buf„r
, 
	tOPTIONAL


339 
	tIN
 
	tUINTN
 
	tReque°Buf„rSize
, 
	tOPTIONAL


340 
	tOUT
 
	tUINT8
 *
	tBuf„r
,

341 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize


369 
	gEFI_STATUS


370 (
	tEFIAPI
 *
	tEFI_SUPPLICANT_PROCESS_PACKET
) (

371 
	tIN
 
	tEFI_SUPPLICANT_PROTOCOL
 *
	tThis
,

372 
	tIN
 
	tOUT
 
	tEFI_SUPPLICANT_FRAGMENT_DATA
 **
	tFøgmítTabÀ
,

373 
	tIN
 
	tUINT32
 *
	tFøgmítCou¡
,

374 
	tIN
 
	tEFI_SUPPLICANT_CRYPT_MODE
 
	tCry±Mode


397 
	gEFI_STATUS


398 (
	tEFIAPI
 *
	tEFI_SUPPLICANT_SET_DATA
) (

399 
	tIN
 
	tEFI_SUPPLICANT_PROTOCOL
 *
	tThis
,

400 
	tIN
 
	tEFI_SUPPLICANT_DATA_TYPE
 
	tD©aTy≥
,

401 
	tIN
 
	tVOID
 *
	tD©a
,

402 
	tIN
 
	tUINTN
 
	tD©aSize


434 
	gEFI_STATUS


435 (
	tEFIAPI
 *
	tEFI_SUPPLICANT_GET_DATA
) (

436 
	tIN
 
	tEFI_SUPPLICANT_PROTOCOL
 *
	tThis
,

437 
	tIN
 
	tEFI_SUPPLICANT_DATA_TYPE
 
	tD©aTy≥
,

438 
	tOUT
 
	tUINT8
 *
	tD©a
, 
	tOPTIONAL


439 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize


448 
	s_EFI_SUPPLICANT_PROTOCOL
 {

449 
EFI_SUPPLICANT_BUILD_RESPONSE_PACKET
 
	mBuûdRe•⁄£Packë
;

450 
EFI_SUPPLICANT_PROCESS_PACKET
 
	mPro˚ssPackë
;

451 
EFI_SUPPLICANT_SET_DATA
 
	mSëD©a
;

452 
EFI_SUPPLICANT_GET_DATA
 
	mGëD©a
;

455 
EFI_GUID
 
gEfiSuµliˇ¡Sîvi˚BödögPrŸocﬁGuid
;

456 
EFI_GUID
 
gEfiSuµliˇ¡PrŸocﬁGuid
;

	@TapeIo.h

10 #i‚de‡
__EFI_TAPE_IO_PROTOCOL_H__


11 
	#__EFI_TAPE_IO_PROTOCOL_H__


	)

13 
	#EFI_TAPE_IO_PROTOCOL_GUID
 \

	)

18 
_EFI_TAPE_IO_PROTOCOL
 
	tEFI_TAPE_IO_PROTOCOL
;

20 
	s_EFI_TAPE_HEADER
 {

21 
UINT64
 
	mSig«tuª
;

22 
UINT32
 
	mRevisi⁄
;

23 
UINT32
 
	mBoŸDescSize
;

24 
UINT32
 
	mBoŸDescCRC
;

25 
EFI_GUID
 
	mT≠eGUID
;

26 
EFI_GUID
 
	mT≠eTy≥
;

27 
EFI_GUID
 
	mT≠eUnique
;

28 
UINT32
 
	mBLLoˇti⁄
;

29 
UINT32
 
	mBLBlocksize
;

30 
UINT32
 
	mBLFûesize
;

31 
CHAR8
 
	mOSVîsi⁄
[40];

32 
CHAR8
 
	mAµVîsi⁄
[40];

33 
CHAR8
 
	mCª©i⁄D©e
[10];

34 
CHAR8
 
	mCª©i⁄Time
[10];

35 
CHAR8
 
	mSy°emName
[256];

36 
CHAR8
 
	mT≠eTôÀ
[120];

37 
CHAR8
 
	m∑d
[468];

38 } 
	tEFI_TAPE_HEADER
;

68 
	gEFI_STATUS


69 (
	tEFIAPI
 *
	tEFI_TAPE_READ
)(

70 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis
,

71 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

72 
	tOUT
 
	tVOID
 *
	tBuf„r


104 
	gEFI_STATUS


105 (
	tEFIAPI
 *
	tEFI_TAPE_WRITE
)(

106 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis
,

107 
	tIN
 
	tUINTN
 *
	tBuf„rSize
,

108 
	tIN
 
	tVOID
 *
	tBuf„r


127 
	gEFI_STATUS


128 (
	tEFIAPI
 *
	tEFI_TAPE_REWIND
)(

129 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis


158 
	gEFI_STATUS


159 (
	tEFIAPI
 *
	tEFI_TAPE_SPACE
)(

160 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis
,

161 
	tIN
 
	tINTN
 
	tDúe˘i⁄
,

162 
	tIN
 
	tUINTN
 
	tTy≥


185 
	gEFI_STATUS


186 (
	tEFIAPI
 *
	tEFI_TAPE_WRITEFM
)(

187 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis
,

188 
	tIN
 
	tUINTN
 
	tCou¡


208 
	gEFI_STATUS


209 (
	tEFIAPI
 *
	tEFI_TAPE_RESET
)(

210 
	tIN
 
	tEFI_TAPE_IO_PROTOCOL
 *
	tThis
,

211 
	tIN
 
	tBOOLEAN
 
	tExãndedVîifiˇti⁄


220 
	s_EFI_TAPE_IO_PROTOCOL
 {

221 
EFI_TAPE_READ
 
	mT≠eRód
;

222 
EFI_TAPE_WRITE
 
	mT≠eWrôe
;

223 
EFI_TAPE_REWIND
 
	mT≠eRewöd
;

224 
EFI_TAPE_SPACE
 
	mT≠eS∑˚
;

225 
EFI_TAPE_WRITEFM
 
	mT≠eWrôeFM
;

226 
EFI_TAPE_RESET
 
	mT≠eRe£t
;

229 
EFI_GUID
 
gEfiT≠eIoPrŸocﬁGuid
;

	@Tcg2Protocol.h

10 #i‚de‡
__TCG2_PROTOCOL_H__


11 
	#__TCG2_PROTOCOL_H__


	)

13 
	~<Indu°rySènd¨d/UefiTcgPœtf‹m.h
>

14 
	~<Indu°rySènd¨d/Tpm20.h
>

16 
	#EFI_TCG2_PROTOCOL_GUID
 \

	)

19 
tdEFI_TCG2_PROTOCOL
 
	tEFI_TCG2_PROTOCOL
;

21 
	stdEFI_TCG2_VERSION
 {

22 
UINT8
 
	mMaj‹
;

23 
UINT8
 
	mMö‹
;

24 } 
	tEFI_TCG2_VERSION
;

26 
UINT32
 
	tEFI_TCG2_EVENT_LOG_BITMAP
;

27 
UINT32
 
	tEFI_TCG2_EVENT_LOG_FORMAT
;

28 
UINT32
 
	tEFI_TCG2_EVENT_ALGORITHM_BITMAP
;

30 
	#EFI_TCG2_EVENT_LOG_FORMAT_TCG_1_2
 0x00000001

	)

31 
	#EFI_TCG2_EVENT_LOG_FORMAT_TCG_2
 0x00000002

	)

33 
	stdEFI_TCG2_BOOT_SERVICE_CAPABILITY
 {

37 
UINT8
 
	mSize
;

43 
EFI_TCG2_VERSION
 
	mSåu˘uªVîsi⁄
;

49 
EFI_TCG2_VERSION
 
	mPrŸocﬁVîsi⁄
;

54 
EFI_TCG2_EVENT_ALGORITHM_BITMAP
 
	mHashAlg‹ôhmBôm≠
;

58 
EFI_TCG2_EVENT_LOG_BITMAP
 
	mSuµ‹ãdEvítLogs
;

62 
BOOLEAN
 
	mTPMPª£¡Fœg
;

66 
UINT16
 
	mMaxComm™dSize
;

70 
UINT16
 
	mMaxRe•⁄£Size
;

75 
UINT32
 
	mM™uÁ˘uªrID
;

81 
UINT32
 
	mNumbîOfPCRB™ks
;

87 
EFI_TCG2_EVENT_ALGORITHM_BITMAP
 
	mA˘iveP¸B™ks
;

88 } 
	tEFI_TCG2_BOOT_SERVICE_CAPABILITY
;

90 
	#EFI_TCG2_BOOT_HASH_ALG_SHA1
 0x00000001

	)

91 
	#EFI_TCG2_BOOT_HASH_ALG_SHA256
 0x00000002

	)

92 
	#EFI_TCG2_BOOT_HASH_ALG_SHA384
 0x00000004

	)

93 
	#EFI_TCG2_BOOT_HASH_ALG_SHA512
 0x00000008

	)

94 
	#EFI_TCG2_BOOT_HASH_ALG_SM3_256
 0x00000010

	)

99 
	#EFI_TCG2_EXTEND_ONLY
 0x0000000000000001

	)

103 
	#PE_COFF_IMAGE
 0x0000000000000010

	)

105 
	#MAX_PCR_INDEX
 23

	)

107 #¥agm®
∑ck
(1)

109 
	#EFI_TCG2_EVENT_HEADER_VERSION
 1

	)

115 
UINT32
 
	mHódîSize
;

119 
UINT16
 
	mHódîVîsi⁄
;

123 
TCG_PCRINDEX
 
	mPCRIndex
;

127 
TCG_EVENTTYPE
 
	mEvítTy≥
;

128 } 
	tEFI_TCG2_EVENT_HEADER
;

130 
	stdEFI_TCG2_EVENT
 {

134 
UINT32
 
	mSize
;

135 
EFI_TCG2_EVENT_HEADER
 
	mHódî
;

136 
UINT8
 
	mEvít
[1];

137 } 
	tEFI_TCG2_EVENT
;

139 #¥agm®
∑ck
()

161 
	gEFI_STATUS


162 (
	tEFIAPI
 *
	tEFI_TCG2_GET_CAPABILITY
) (

163 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

164 
	tIN
 
	tOUT
 
	tEFI_TCG2_BOOT_SERVICE_CAPABILITY
 *
	tPrŸocﬁC≠abûôy


185 
	gEFI_STATUS


186 (
	tEFIAPI
 *
	tEFI_TCG2_GET_EVENT_LOG
) (

187 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

188 
	tIN
 
	tEFI_TCG2_EVENT_LOG_FORMAT
 
	tEvítLogF‹m©
,

189 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLoˇti⁄
,

190 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLa°E¡ry
,

191 
	tOUT
 
	tBOOLEAN
 *
	tEvítLogTrunˇãd


214 
	gEFI_STATUS


215 (
	tEFIAPI
 * 
	tEFI_TCG2_HASH_LOG_EXTEND_EVENT
) (

216 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

217 
	tIN
 
	tUINT64
 
	tFœgs
,

218 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tD©aToHash
,

219 
	tIN
 
	tUINT64
 
	tD©aToHashLí
,

220 
	tIN
 
	tEFI_TCG2_EVENT
 *
	tEfiTcgEvít


238 
	gEFI_STATUS


239 (
	tEFIAPI
 *
	tEFI_TCG2_SUBMIT_COMMAND
) (

240 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

241 
	tIN
 
	tUINT32
 
	tI≈utP¨amëîBlockSize
,

242 
	tIN
 
	tUINT8
 *
	tI≈utP¨amëîBlock
,

243 
	tIN
 
	tUINT32
 
	tOuçutP¨amëîBlockSize
,

244 
	tIN
 
	tUINT8
 *
	tOuçutP¨amëîBlock


257 
	gEFI_STATUS


258 (
	tEFIAPI
 *
	tEFI_TCG2_GET_ACTIVE_PCR_BANKS
) (

259 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

260 
	tOUT
 
	tUINT32
 *
	tA˘iveP¸B™ks


273 
	gEFI_STATUS


274 (
	tEFIAPI
 *
	tEFI_TCG2_SET_ACTIVE_PCR_BANKS
) (

275 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

276 
	tIN
 
	tUINT32
 
	tA˘iveP¸B™ks


290 
	gEFI_STATUS


291 (
	tEFIAPI
 *
	tEFI_TCG2_GET_RESULT_OF_SET_ACTIVE_PCR_BANKS
) (

292 
	tIN
 
	tEFI_TCG2_PROTOCOL
 *
	tThis
,

293 
	tOUT
 
	tUINT32
 *
	tO≥øti⁄Pª£¡
,

294 
	tOUT
 
	tUINT32
 *
	tRe•⁄£


297 
	stdEFI_TCG2_PROTOCOL
 {

298 
EFI_TCG2_GET_CAPABILITY
 
	mGëC≠abûôy
;

299 
EFI_TCG2_GET_EVENT_LOG
 
	mGëEvítLog
;

300 
EFI_TCG2_HASH_LOG_EXTEND_EVENT
 
	mHashLogExãndEvít
;

301 
EFI_TCG2_SUBMIT_COMMAND
 
	mSubmôComm™d
;

302 
EFI_TCG2_GET_ACTIVE_PCR_BANKS
 
	mGëA˘iveP¸B™ks
;

303 
EFI_TCG2_SET_ACTIVE_PCR_BANKS
 
	mSëA˘iveP¸B™ks
;

304 
EFI_TCG2_GET_RESULT_OF_SET_ACTIVE_PCR_BANKS
 
	mGëResu…OfSëA˘iveP¸B™ks
;

307 
EFI_GUID
 
gEfiTcg2PrŸocﬁGuid
;

313 
	#EFI_TCG2_FINAL_EVENTS_TABLE_GUID
 \

	)

316 
EFI_GUID
 
gEfiTcg2FöÆEvítsTabÀGuid
;

318 
	stdEFI_TCG2_FINAL_EVENTS_TABLE
 {

322 
UINT64
 
	mVîsi⁄
;

326 
UINT64
 
	mNumbîOfEvíts
;

331 } 
	tEFI_TCG2_FINAL_EVENTS_TABLE
;

333 
	#EFI_TCG2_FINAL_EVENTS_TABLE_VERSION
 1

	)

	@TcgService.h

10 #i‚de‡
_TCG_SERVICE_PROTOCOL_H_


11 
	#_TCG_SERVICE_PROTOCOL_H_


	)

13 
	~<Indu°rySènd¨d/UefiTcgPœtf‹m.h
>

15 
	#EFI_TCG_PROTOCOL_GUID
 \

	)

18 
_EFI_TCG_PROTOCOL
 
	tEFI_TCG_PROTOCOL
;

21 
UINT8
 
	mMaj‹
;

22 
UINT8
 
	mMö‹
;

23 
UINT8
 
	mRevMaj‹
;

24 
UINT8
 
	mRevMö‹
;

25 } 
	tTCG_VERSION
;

27 
	s_TCG_EFI_BOOT_SERVICE_CAPABILITY
 {

28 
UINT8
 
	mSize
;

29 
TCG_VERSION
 
	mSåu˘uªVîsi⁄
;

30 
TCG_VERSION
 
	mPrŸocﬁS≥cVîsi⁄
;

31 
UINT8
 
	mHashAlg‹ôhmBôm≠
;

33 
BOOLEAN
 
	mTPMPª£¡Fœg
;

34 
BOOLEAN
 
	mTPMDó˘iv©edFœg
;

35 } 
	tTCG_EFI_BOOT_SERVICE_CAPABILITY
;

37 
UINT32
 
	tTCG_ALGORITHM_ID
;

61 
	gEFI_STATUS


62 (
	tEFIAPI
 *
	tEFI_TCG_STATUS_CHECK
)(

63 
	tIN
 
	tEFI_TCG_PROTOCOL
 *
	tThis
,

64 
	tOUT
 
	tTCG_EFI_BOOT_SERVICE_CAPABILITY


65 *
	tPrŸocﬁC≠abûôy
,

66 
	tOUT
 
	tUINT32
 *
	tTCGFótuªFœgs
,

67 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLoˇti⁄
,

68 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLa°E¡ry


89 
	gEFI_STATUS


90 (
	tEFIAPI
 *
	tEFI_TCG_HASH_ALL
)(

91 
	tIN
 
	tEFI_TCG_PROTOCOL
 *
	tThis
,

92 
	tIN
 
	tUINT8
 *
	tHashD©a
,

93 
	tIN
 
	tUINT64
 
	tHashD©aLí
,

94 
	tIN
 
	tTCG_ALGORITHM_ID
 
	tAlg‹ôhmId
,

95 
	tIN
 
	tOUT
 
	tUINT64
 *
	tHashedD©aLí
,

96 
	tIN
 
	tOUT
 
	tUINT8
 **
	tHashedD©aResu…


116 
	gEFI_STATUS


117 (
	tEFIAPI
 *
	tEFI_TCG_LOG_EVENT
)(

118 
	tIN
 
	tEFI_TCG_PROTOCOL
 *
	tThis
,

119 
	tIN
 
	tTCG_PCR_EVENT
 *
	tTCGLogD©a
,

120 
	tIN
 
	tOUT
 
	tUINT32
 *
	tEvítNumbî
,

121 
	tIN
 
	tUINT32
 
	tFœgs


139 
	gEFI_STATUS


140 (
	tEFIAPI
 *
	tEFI_TCG_PASS_THROUGH_TO_TPM
)(

141 
	tIN
 
	tEFI_TCG_PROTOCOL
 *
	tThis
,

142 
	tIN
 
	tUINT32
 
	tTpmI≈utP¨amëîBlockSize
,

143 
	tIN
 
	tUINT8
 *
	tTpmI≈utP¨amëîBlock
,

144 
	tIN
 
	tUINT32
 
	tTpmOuçutP¨amëîBlockSize
,

145 
	tIN
 
	tUINT8
 *
	tTpmOuçutP¨amëîBlock


171 
	gEFI_STATUS


172 (
	tEFIAPI
 *
	tEFI_TCG_HASH_LOG_EXTEND_EVENT
)(

173 
	tIN
 
	tEFI_TCG_PROTOCOL
 *
	tThis
,

174 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tHashD©a
,

175 
	tIN
 
	tUINT64
 
	tHashD©aLí
,

176 
	tIN
 
	tTCG_ALGORITHM_ID
 
	tAlg‹ôhmId
,

177 
	tIN
 
	tOUT
 
	tTCG_PCR_EVENT
 *
	tTCGLogD©a
,

178 
	tIN
 
	tOUT
 
	tUINT32
 *
	tEvítNumbî
,

179 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLa°E¡ry


185 
	s_EFI_TCG_PROTOCOL
 {

186 
EFI_TCG_STATUS_CHECK
 
	mSètusCheck
;

187 
EFI_TCG_HASH_ALL
 
	mHashAŒ
;

188 
EFI_TCG_LOG_EVENT
 
	mLogEvít
;

189 
EFI_TCG_PASS_THROUGH_TO_TPM
 
	mPassThroughToTpm
;

190 
EFI_TCG_HASH_LOG_EXTEND_EVENT
 
	mHashLogExãndEvít
;

193 
EFI_GUID
 
gEfiTcgPrŸocﬁGuid
;

	@Tcp4.h

15 #i‚de‡
__EFI_TCP4_PROTOCOL_H__


16 
	#__EFI_TCP4_PROTOCOL_H__


	)

18 
	~<PrŸocﬁ/Ip4.h
>

20 
	#EFI_TCP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

25 
	#EFI_TCP4_PROTOCOL_GUID
 \

	)

30 
_EFI_TCP4_PROTOCOL
 
	tEFI_TCP4_PROTOCOL
;

37 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

38 
EFI_IPv4_ADDRESS
 
	mLoˇlAddªss
;

39 
UINT16
 
	mLoˇlP‹t
;

40 
EFI_IPv4_ADDRESS
 
	mRemŸeAddªss
;

41 
UINT16
 
	mRemŸeP‹t
;

42 } 
	tEFI_TCP4_SERVICE_POINT
;

49 
EFI_HANDLE
 
	mDrivîH™dÀ
;

50 
UINT32
 
	mSîvi˚Cou¡
;

51 
EFI_TCP4_SERVICE_POINT
 
	mSîvi˚s
[1];

52 } 
	tEFI_TCP4_VARIABLE_DATA
;

55 
BOOLEAN
 
	mU£DeÁu…Addªss
;

56 
EFI_IPv4_ADDRESS
 
	mSèti⁄Addªss
;

57 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

58 
UINT16
 
	mSèti⁄P‹t
;

59 
EFI_IPv4_ADDRESS
 
	mRemŸeAddªss
;

60 
UINT16
 
	mRemŸeP‹t
;

61 
BOOLEAN
 
	mA˘iveFœg
;

62 } 
	tEFI_TCP4_ACCESS_POINT
;

65 
UINT32
 
	mRe˚iveBuf„rSize
;

66 
UINT32
 
	mSídBuf„rSize
;

67 
UINT32
 
	mMaxSynBackLog
;

68 
UINT32
 
	mC⁄√˘i⁄Timeout
;

69 
UINT32
 
	mD©aRërõs
;

70 
UINT32
 
	mFöTimeout
;

71 
UINT32
 
	mTimeWaôTimeout
;

72 
UINT32
 
	mKìpAliveProbes
;

73 
UINT32
 
	mKìpAliveTime
;

74 
UINT32
 
	mKìpAliveI¡îvÆ
;

75 
BOOLEAN
 
	mE«bÀNagÀ
;

76 
BOOLEAN
 
	mE«bÀTimeSèmp
;

77 
BOOLEAN
 
	mE«bÀWödowSˇlög
;

78 
BOOLEAN
 
	mE«bÀSñe˘iveAck
;

79 
BOOLEAN
 
	mE«bÀP©hMtuDiscovîy
;

80 } 
	tEFI_TCP4_OPTION
;

86 
UINT8
 
	mTy≥OfSîvi˚
;

87 
UINT8
 
	mTimeToLive
;

92 
EFI_TCP4_ACCESS_POINT
 
	mAc˚ssPoöt
;

97 
EFI_TCP4_OPTION
 *
	mC⁄åﬁO±i⁄
;

98 } 
	tEFI_TCP4_CONFIG_DATA
;

104 
	mT˝4SèãClo£d
 = 0,

105 
	mT˝4SèãLi°í
 = 1,

106 
	mT˝4SèãSynSít
 = 2,

107 
	mT˝4SèãSynRe˚ived
 = 3,

108 
	mT˝4SèãE°ablished
 = 4,

109 
	mT˝4SèãFöWaô1
 = 5,

110 
	mT˝4SèãFöWaô2
 = 6,

111 
	mT˝4SèãClosög
 = 7,

112 
	mT˝4SèãTimeWaô
 = 8,

113 
	mT˝4SèãClo£Waô
 = 9,

114 
	mT˝4SèãLa°Ack
 = 10

115 } 
	tEFI_TCP4_CONNECTION_STATE
;

118 
EFI_EVENT
 
	mEvít
;

119 
EFI_STATUS
 
	mSètus
;

120 } 
	tEFI_TCP4_COMPLETION_TOKEN
;

149 
EFI_TCP4_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

150 } 
	tEFI_TCP4_CONNECTION_TOKEN
;

153 
EFI_TCP4_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

154 
EFI_HANDLE
 
	mNewChûdH™dÀ
;

155 } 
	tEFI_TCP4_LISTEN_TOKEN
;

158 
UINT32
 
	mFøgmítLígth
;

159 
VOID
 *
	mFøgmítBuf„r
;

160 } 
	tEFI_TCP4_FRAGMENT_DATA
;

163 
BOOLEAN
 
	mUrgítFœg
;

164 
UINT32
 
	mD©aLígth
;

165 
UINT32
 
	mFøgmítCou¡
;

166 
EFI_TCP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

167 } 
	tEFI_TCP4_RECEIVE_DATA
;

170 
BOOLEAN
 
	mPush
;

171 
BOOLEAN
 
	mUrgít
;

172 
UINT32
 
	mD©aLígth
;

173 
UINT32
 
	mFøgmítCou¡
;

174 
EFI_TCP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

175 } 
	tEFI_TCP4_TRANSMIT_DATA
;

205 
EFI_TCP4_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

210 
EFI_TCP4_RECEIVE_DATA
 *
	mRxD©a
;

214 
EFI_TCP4_TRANSMIT_DATA
 *
	mTxD©a
;

215 } 
	mPackë
;

216 } 
	tEFI_TCP4_IO_TOKEN
;

219 
EFI_TCP4_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

220 
BOOLEAN
 
	mAb‹tOnClo£
;

221 } 
	tEFI_TCP4_CLOSE_TOKEN
;

247 
	gEFI_STATUS


248 (
	tEFIAPI
 *
	tEFI_TCP4_GET_MODE_DATA
)(

249 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

250 
	tOUT
 
	tEFI_TCP4_CONNECTION_STATE
 *
	tT˝4Sèã
 
	tOPTIONAL
,

251 
	tOUT
 
	tEFI_TCP4_CONFIG_DATA
 *
	tT˝4C⁄figD©a
 
	tOPTIONAL
,

252 
	tOUT
 
	tEFI_IP4_MODE_DATA
 *
	tIp4ModeD©a
 
	tOPTIONAL
,

253 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

254 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


278 
	gEFI_STATUS


279 (
	tEFIAPI
 *
	tEFI_TCP4_CONFIGURE
)(

280 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

281 
	tIN
 
	tEFI_TCP4_CONFIG_DATA
 *
	tT˝C⁄figD©a
 
	tOPTIONAL


319 
	gEFI_STATUS


320 (
	tEFIAPI
 *
	tEFI_TCP4_ROUTES
)(

321 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

322 
	tIN
 
	tBOOLEAN
 
	tDñëeRouã
,

323 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tAddªss
,

324 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tMask
,

325 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tG©ewayAddªss


350 
	gEFI_STATUS


351 (
	tEFIAPI
 *
	tEFI_TCP4_CONNECT
)(

352 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

353 
	tIN
 
	tEFI_TCP4_CONNECTION_TOKEN
 *
	tC⁄√˘i⁄Tokí


379 
	gEFI_STATUS


380 (
	tEFIAPI
 *
	tEFI_TCP4_ACCEPT
)(

381 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

382 
	tIN
 
	tEFI_TCP4_LISTEN_TOKEN
 *
	tLi°íTokí


417 
	gEFI_STATUS


418 (
	tEFIAPI
 *
	tEFI_TCP4_TRANSMIT
)(

419 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

420 
	tIN
 
	tEFI_TCP4_IO_TOKEN
 *
	tTokí


460 
	gEFI_STATUS


461 (
	tEFIAPI
 *
	tEFI_TCP4_RECEIVE
)(

462 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

463 
	tIN
 
	tEFI_TCP4_IO_TOKEN
 *
	tTokí


490 
	gEFI_STATUS


491 (
	tEFIAPI
 *
	tEFI_TCP4_CLOSE
)(

492 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

493 
	tIN
 
	tEFI_TCP4_CLOSE_TOKEN
 *
	tClo£Tokí


522 
	gEFI_STATUS


523 (
	tEFIAPI
 *
	tEFI_TCP4_CANCEL
)(

524 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis
,

525 
	tIN
 
	tEFI_TCP4_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


543 
	gEFI_STATUS


544 (
	tEFIAPI
 *
	tEFI_TCP4_POLL
)(

545 
	tIN
 
	tEFI_TCP4_PROTOCOL
 *
	tThis


555 
	s_EFI_TCP4_PROTOCOL
 {

556 
EFI_TCP4_GET_MODE_DATA
 
	mGëModeD©a
;

557 
EFI_TCP4_CONFIGURE
 
	mC⁄figuª
;

558 
EFI_TCP4_ROUTES
 
	mRouãs
;

559 
EFI_TCP4_CONNECT
 
	mC⁄√˘
;

560 
EFI_TCP4_ACCEPT
 
	mAc˚±
;

561 
EFI_TCP4_TRANSMIT
 
	mTønsmô
;

562 
EFI_TCP4_RECEIVE
 
	mRe˚ive
;

563 
EFI_TCP4_CLOSE
 
	mClo£
;

564 
EFI_TCP4_CANCEL
 
	mC™˚l
;

565 
EFI_TCP4_POLL
 
	mPﬁl
;

568 
EFI_GUID
 
gEfiT˝4Sîvi˚BödögPrŸocﬁGuid
;

569 
EFI_GUID
 
gEfiT˝4PrŸocﬁGuid
;

	@Tcp6.h

15 #i‚de‡
__EFI_TCP6_PROTOCOL_H__


16 
	#__EFI_TCP6_PROTOCOL_H__


	)

18 
	~<PrŸocﬁ/M™agedNëw‹k.h
>

19 
	~<PrŸocﬁ/Ip6.h
>

21 
	#EFI_TCP6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

26 
	#EFI_TCP6_PROTOCOL_GUID
 \

	)

32 
_EFI_TCP6_PROTOCOL
 
	tEFI_TCP6_PROTOCOL
;

43 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

49 
EFI_IPv6_ADDRESS
 
	mLoˇlAddªss
;

53 
UINT16
 
	mLoˇlP‹t
;

58 
EFI_IPv6_ADDRESS
 
	mRemŸeAddªss
;

63 
UINT16
 
	mRemŸeP‹t
;

64 } 
	tEFI_TCP6_SERVICE_POINT
;

71 
EFI_HANDLE
 
	mDrivîH™dÀ
;

72 
UINT32
 
	mSîvi˚Cou¡
;

73 
EFI_TCP6_SERVICE_POINT
 
	mSîvi˚s
[1];

74 } 
	tEFI_TCP6_VARIABLE_DATA
;

88 
EFI_IPv6_ADDRESS
 
	mSèti⁄Addªss
;

94 
UINT16
 
	mSèti⁄P‹t
;

106 
EFI_IPv6_ADDRESS
 
	mRemŸeAddªss
;

115 
UINT16
 
	mRemŸeP‹t
;

120 
BOOLEAN
 
	mA˘iveFœg
;

121 } 
	tEFI_TCP6_ACCESS_POINT
;

130 
UINT32
 
	mRe˚iveBuf„rSize
;

134 
UINT32
 
	mSídBuf„rSize
;

139 
UINT32
 
	mMaxSynBackLog
;

145 
UINT32
 
	mC⁄√˘i⁄Timeout
;

151 
UINT32
 
	mD©aRërõs
;

161 
UINT32
 
	mFöTimeout
;

168 
UINT32
 
	mTimeWaôTimeout
;

174 
UINT32
 
	mKìpAliveProbes
;

181 
UINT32
 
	mKìpAliveTime
;

188 
UINT32
 
	mKìpAliveI¡îvÆ
;

193 
BOOLEAN
 
	mE«bÀNagÀ
;

198 
BOOLEAN
 
	mE«bÀTimeSèmp
;

203 
BOOLEAN
 
	mE«bÀWödowSˇlög
;

210 
BOOLEAN
 
	mE«bÀSñe˘iveAck
;

215 
BOOLEAN
 
	mE«bÀP©hMtuDiscovîy
;

216 } 
	tEFI_TCP6_OPTION
;

225 
UINT8
 
	mTøfficCœss
;

229 
UINT8
 
	mH›Limô
;

233 
EFI_TCP6_ACCESS_POINT
 
	mAc˚ssPoöt
;

238 
EFI_TCP6_OPTION
 *
	mC⁄åﬁO±i⁄
;

239 } 
	tEFI_TCP6_CONFIG_DATA
;

245 
	mT˝6SèãClo£d
 = 0,

246 
	mT˝6SèãLi°í
 = 1,

247 
	mT˝6SèãSynSít
 = 2,

248 
	mT˝6SèãSynRe˚ived
 = 3,

249 
	mT˝6SèãE°ablished
 = 4,

250 
	mT˝6SèãFöWaô1
 = 5,

251 
	mT˝6SèãFöWaô2
 = 6,

252 
	mT˝6SèãClosög
 = 7,

253 
	mT˝6SèãTimeWaô
 = 8,

254 
	mT˝6SèãClo£Waô
 = 9,

255 
	mT˝6SèãLa°Ack
 = 10

256 } 
	tEFI_TCP6_CONNECTION_STATE
;

267 
EFI_EVENT
 
	mEvít
;

271 
EFI_STATUS
 
	mSètus
;

272 } 
	tEFI_TCP6_COMPLETION_TOKEN
;

307 
EFI_TCP6_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

308 } 
	tEFI_TCP6_CONNECTION_TOKEN
;

326 
EFI_TCP6_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

327 
EFI_HANDLE
 
	mNewChûdH™dÀ
;

328 } 
	tEFI_TCP6_LISTEN_TOKEN
;

336 
UINT32
 
	mFøgmítLígth
;

337 
VOID
 *
	mFøgmítBuf„r
;

338 } 
	tEFI_TCP6_FRAGMENT_DATA
;

351 
BOOLEAN
 
	mUrgítFœg
;

358 
UINT32
 
	mD©aLígth
;

362 
UINT32
 
	mFøgmítCou¡
;

366 
EFI_TCP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

367 } 
	tEFI_TCP6_RECEIVE_DATA
;

381 
BOOLEAN
 
	mPush
;

386 
BOOLEAN
 
	mUrgít
;

390 
UINT32
 
	mD©aLígth
;

394 
UINT32
 
	mFøgmítCou¡
;

398 
EFI_TCP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

399 } 
	tEFI_TCP6_TRANSMIT_DATA
;

435 
EFI_TCP6_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

441 
EFI_TCP6_RECEIVE_DATA
 *
	mRxD©a
;

446 
EFI_TCP6_TRANSMIT_DATA
 *
	mTxD©a
;

447 } 
	mPackë
;

448 } 
	tEFI_TCP6_IO_TOKEN
;

462 
EFI_TCP6_COMPLETION_TOKEN
 
	mCom∂ëi⁄Tokí
;

468 
BOOLEAN
 
	mAb‹tOnClo£
;

469 } 
	tEFI_TCP6_CLOSE_TOKEN
;

495 
	gEFI_STATUS


496 (
	tEFIAPI
 *
	tEFI_TCP6_GET_MODE_DATA
)(

497 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

498 
	tOUT
 
	tEFI_TCP6_CONNECTION_STATE
 *
	tT˝6Sèã
 
	tOPTIONAL
,

499 
	tOUT
 
	tEFI_TCP6_CONFIG_DATA
 *
	tT˝6C⁄figD©a
 
	tOPTIONAL
,

500 
	tOUT
 
	tEFI_IP6_MODE_DATA
 *
	tIp6ModeD©a
 
	tOPTIONAL
,

501 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

502 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


553 
	gEFI_STATUS


554 (
	tEFIAPI
 *
	tEFI_TCP6_CONFIGURE
)(

555 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

556 
	tIN
 
	tEFI_TCP6_CONFIG_DATA
 *
	tT˝6C⁄figD©a
 
	tOPTIONAL


590 
	gEFI_STATUS


591 (
	tEFIAPI
 *
	tEFI_TCP6_CONNECT
)(

592 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

593 
	tIN
 
	tEFI_TCP6_CONNECTION_TOKEN
 *
	tC⁄√˘i⁄Tokí


632 
	gEFI_STATUS


633 (
	tEFIAPI
 *
	tEFI_TCP6_ACCEPT
)(

634 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

635 
	tIN
 
	tEFI_TCP6_LISTEN_TOKEN
 *
	tLi°íTokí


676 
	gEFI_STATUS


677 (
	tEFIAPI
 *
	tEFI_TCP6_TRANSMIT
)(

678 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

679 
	tIN
 
	tEFI_TCP6_IO_TOKEN
 *
	tTokí


729 
	gEFI_STATUS


730 (
	tEFIAPI
 *
	tEFI_TCP6_RECEIVE
)(

731 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

732 
	tIN
 
	tEFI_TCP6_IO_TOKEN
 *
	tTokí


763 
	gEFI_STATUS


764 (
	tEFIAPI
 *
	tEFI_TCP6_CLOSE
)(

765 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

766 
	tIN
 
	tEFI_TCP6_CLOSE_TOKEN
 *
	tClo£Tokí


806 
	gEFI_STATUS


807 (
	tEFIAPI
 *
	tEFI_TCP6_CANCEL
)(

808 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis
,

809 
	tIN
 
	tEFI_TCP6_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


830 
	gEFI_STATUS


831 (
	tEFIAPI
 *
	tEFI_TCP6_POLL
)(

832 
	tIN
 
	tEFI_TCP6_PROTOCOL
 *
	tThis


842 
	s_EFI_TCP6_PROTOCOL
 {

843 
EFI_TCP6_GET_MODE_DATA
 
	mGëModeD©a
;

844 
EFI_TCP6_CONFIGURE
 
	mC⁄figuª
;

845 
EFI_TCP6_CONNECT
 
	mC⁄√˘
;

846 
EFI_TCP6_ACCEPT
 
	mAc˚±
;

847 
EFI_TCP6_TRANSMIT
 
	mTønsmô
;

848 
EFI_TCP6_RECEIVE
 
	mRe˚ive
;

849 
EFI_TCP6_CLOSE
 
	mClo£
;

850 
EFI_TCP6_CANCEL
 
	mC™˚l
;

851 
EFI_TCP6_POLL
 
	mPﬁl
;

854 
EFI_GUID
 
gEfiT˝6Sîvi˚BödögPrŸocﬁGuid
;

855 
EFI_GUID
 
gEfiT˝6PrŸocﬁGuid
;

	@Timer.h

11 #i‚de‡
__ARCH_PROTOCOL_TIMER_H__


12 
	#__ARCH_PROTOCOL_TIMER_H__


	)

17 
	#EFI_TIMER_ARCH_PROTOCOL_GUID
 \

	)

23 
_EFI_TIMER_ARCH_PROTOCOL
 
	tEFI_TIMER_ARCH_PROTOCOL
;

40 
	gVOID


41 (
	tEFIAPI
 *
	tEFI_TIMER_NOTIFY
)(

42 
	tIN
 
	tUINT64
 
	tTime


75 
	gEFI_STATUS


76 (
	tEFIAPI
 *
	tEFI_TIMER_REGISTER_HANDLER
)(

77 
	tIN
 
	tEFI_TIMER_ARCH_PROTOCOL
 *
	tThis
,

78 
	tIN
 
	tEFI_TIMER_NOTIFY
 
	tNŸifyFun˘i⁄


108 
	gEFI_STATUS


109 (
	tEFIAPI
 *
	tEFI_TIMER_SET_TIMER_PERIOD
)(

110 
	tIN
 
	tEFI_TIMER_ARCH_PROTOCOL
 *
	tThis
,

111 
	tIN
 
	tUINT64
 
	tTimîPîiod


129 
	gEFI_STATUS


130 (
	tEFIAPI
 *
	tEFI_TIMER_GET_TIMER_PERIOD
)(

131 
	tIN
 
	tEFI_TIMER_ARCH_PROTOCOL
 *
	tThis
,

132 
	tOUT
 
	tUINT64
 *
	tTimîPîiod


151 
	gEFI_STATUS


152 (
	tEFIAPI
 *
	tEFI_TIMER_GENERATE_SOFT_INTERRUPT
)(

153 
	tIN
 
	tEFI_TIMER_ARCH_PROTOCOL
 *
	tThis


165 
	s_EFI_TIMER_ARCH_PROTOCOL
 {

166 
EFI_TIMER_REGISTER_HANDLER
 
	mRegi°îH™dÀr
;

167 
EFI_TIMER_SET_TIMER_PERIOD
 
	mSëTimîPîiod
;

168 
EFI_TIMER_GET_TIMER_PERIOD
 
	mGëTimîPîiod
;

169 
EFI_TIMER_GENERATE_SOFT_INTERRUPT
 
	mGíî©eSo·I¡îru±
;

172 
EFI_GUID
 
gEfiTimîArchPrŸocﬁGuid
;

	@Timestamp.h

13 #i‚de‡
__EFI_TIME_STAMP_PROTOCOL_H__


14 
	#__EFI_TIME_STAMP_PROTOCOL_H__


	)

17 
	#EFI_TIMESTAMP_PROTOCOL_GUID
 \

	)

23 
_EFI_TIMESTAMP_PROTOCOL
 
	tEFI_TIMESTAMP_PROTOCOL
;

32 
UINT64
 
	mFªquícy
;

38 
UINT64
 
	mEndVÆue
;

39 } 
	tEFI_TIMESTAMP_PROPERTIES
;

58 
	gUINT64


59 (
	tEFIAPI
 *
	tTIMESTAMP_GET
)(

60 
	tVOID


75 
	gEFI_STATUS


76 (
	tEFIAPI
 *
	tTIMESTAMP_GET_PROPERTIES
)(

77 
	tOUT
 
	tEFI_TIMESTAMP_PROPERTIES
 *
	tPr›îtõs


87 
	s_EFI_TIMESTAMP_PROTOCOL
 {

88 
TIMESTAMP_GET
 
	mGëTime°amp
;

89 
TIMESTAMP_GET_PROPERTIES
 
	mGëPr›îtõs
;

92 
EFI_GUID
 
gEfiTime°ampPrŸocﬁGuid
;

	@Tls.h

17 #i‚de‡
__EFI_TLS_PROTOCOL_H__


18 
	#__EFI_TLS_PROTOCOL_H__


	)

25 
	#EFI_TLS_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

33 
	#EFI_TLS_PROTOCOL_GUID
 \

	)

38 
_EFI_TLS_PROTOCOL
 
	tEFI_TLS_PROTOCOL
;

47 
	mEfiTlsVîsi⁄
,

52 
	mEfiTlsC⁄√˘i⁄End
,

57 
	mEfiTlsCùhîLi°
,

62 
	mEfiTlsCom¥essi⁄Mëhod
,

67 
	mEfiTlsExãnsi⁄D©a
,

72 
	mEfiTlsVîifyMëhod
,

79 
	mEfiTlsSessi⁄ID
,

84 
	mEfiTlsSessi⁄Sèã
,

89 
	mEfiTlsClõ¡R™dom
,

94 
	mEfiTlsSîvîR™dom
,

99 
	mEfiTlsKeyM©îül
,

106 
	mEfiTlsVîifyHo°
,

108 
	mEfiTlsSessi⁄D©aTy≥Maximum


109 } 
	tEFI_TLS_SESSION_DATA_TYPE
;

117 
UINT8
 
	mMaj‹
;

118 
UINT8
 
	mMö‹
;

119 } 
	tEFI_TLS_VERSION
;

125 
	mEfiTlsClõ¡
,

126 
	mEfiTlsSîvî
,

127 } 
	tEFI_TLS_CONNECTION_END
;

135 #¥agm®
∑ck
 (1)

137 
UINT8
 
	mD©a1
;

138 
UINT8
 
	mD©a2
;

139 } 
	tEFI_TLS_CIPHER
;

140 #¥agm®
∑ck
 ()

146 
UINT8
 
	tEFI_TLS_COMPRESSION
;

153 #¥agm®
∑ck
 (1)

155 
UINT16
 
	mExãnsi⁄Ty≥
;

156 
UINT16
 
	mLígth
;

157 
UINT8
 
	mD©a
[1];

158 } 
	tEFI_TLS_EXTENSION
;

159 #¥agm®
∑ck
 ()

166 
UINT32
 
	tEFI_TLS_VERIFY
;

171 
	#EFI_TLS_VERIFY_NONE
 0x0

	)

176 
	#EFI_TLS_VERIFY_PEER
 0x1

	)

181 
	#EFI_TLS_VERIFY_FAIL_IF_NO_PEER_CERT
 0x2

	)

186 
	#EFI_TLS_VERIFY_CLIENT_ONCE
 0x4

	)

191 
UINT32
 
	tEFI_TLS_VERIFY_HOST_FLAG
;

196 
	#EFI_TLS_VERIFY_FLAG_NONE
 0x00

	)

201 
	#EFI_TLS_VERIFY_FLAG_ALWAYS_CHECK_SUBJECT
 0x01

	)

205 
	#EFI_TLS_VERIFY_FLAG_NO_WILDCARDS
 0x02

	)

209 
	#EFI_TLS_VERIFY_FLAG_NO_PARTIAL_WILDCARDS
 0x04

	)

213 
	#EFI_TLS_VERIFY_FLAG_MULTI_LABEL_WILDCARDS
 0x08

	)

219 
	#EFI_TLS_VERIFY_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

224 
	#EFI_TLS_VERIFY_FLAG_NEVER_CHECK_SUBJECT
 0x20

	)

229 #¥agm®
∑ck
 (1)

231 
EFI_TLS_VERIFY_HOST_FLAG
 
	mFœgs
;

232 
CHAR8
 *
	mHo°Name
;

233 } 
	tEFI_TLS_VERIFY_HOST
;

234 #¥agm®
∑ck
 ()

241 #¥agm®
∑ck
 (1)

243 
UINT32
 
	mGmtUnixTime
;

244 
UINT8
 
	mR™domByãs
[28];

245 } 
	tEFI_TLS_RANDOM
;

246 #¥agm®
∑ck
 ()

253 #¥agm®
∑ck
 (1)

255 
UINT8
 
	mD©a
[48];

256 } 
	tEFI_TLS_MASTER_SECRET
;

257 #¥agm®
∑ck
 ()

263 
	#MAX_TLS_SESSION_ID_LENGTH
 32

	)

264 #¥agm®
∑ck
 (1)

266 
UINT16
 
	mLígth
;

267 
UINT8
 
	mD©a
[
MAX_TLS_SESSION_ID_LENGTH
];

268 } 
	tEFI_TLS_SESSION_ID
;

269 #¥agm®
∑ck
 ()

279 
	mEfiTlsSessi⁄NŸSèπed
,

284 
	mEfiTlsSessi⁄H™dShakög
,

291 
	mEfiTlsSessi⁄D©aTøns„ºög
,

298 
	mEfiTlsSessi⁄Closög
,

305 
	mEfiTlsSessi⁄Eº‹
,

307 
	mEfiTlsSessi⁄SèãMaximum


309 } 
	tEFI_TLS_SESSION_STATE
;

318 
UINT32
 
	mFøgmítLígth
;

322 
VOID
 *
	mFøgmítBuf„r
;

323 } 
	tEFI_TLS_FRAGMENT_DATA
;

332 
	mEfiTlsEn¸y±
,

336 
	mEfiTlsDe¸y±
,

337 } 
	tEFI_TLS_CRYPT_MODE
;

365 
	gEFI_STATUS


366 (
	tEFIAPI
 *
	tEFI_TLS_SET_SESSION_DATA
) (

367 
	tIN
 
	tEFI_TLS_PROTOCOL
 *
	tThis
,

368 
	tIN
 
	tEFI_TLS_SESSION_DATA_TYPE
 
	tD©aTy≥
,

369 
	tIN
 
	tVOID
 *
	tD©a
,

370 
	tIN
 
	tUINTN
 
	tD©aSize


397 
	gEFI_STATUS


398 (
	tEFIAPI
 *
	tEFI_TLS_GET_SESSION_DATA
) (

399 
	tIN
 
	tEFI_TLS_PROTOCOL
 *
	tThis
,

400 
	tIN
 
	tEFI_TLS_SESSION_DATA_TYPE
 
	tD©aTy≥
,

401 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
, 
	tOPTIONAL


402 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize


444 
	gEFI_STATUS


445 (
	tEFIAPI
 *
	tEFI_TLS_BUILD_RESPONSE_PACKET
) (

446 
	tIN
 
	tEFI_TLS_PROTOCOL
 *
	tThis
,

447 
	tIN
 
	tUINT8
 *
	tReque°Buf„r
, 
	tOPTIONAL


448 
	tIN
 
	tUINTN
 
	tReque°Size
, 
	tOPTIONAL


449 
	tOUT
 
	tUINT8
 *
	tBuf„r
, 
	tOPTIONAL


450 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize


488 
	gEFI_STATUS


489 (
	tEFIAPI
 *
	tEFI_TLS_PROCESS_PACKET
) (

490 
	tIN
 
	tEFI_TLS_PROTOCOL
 *
	tThis
,

491 
	tIN
 
	tOUT
 
	tEFI_TLS_FRAGMENT_DATA
 **
	tFøgmítTabÀ
,

492 
	tIN
 
	tUINT32
 *
	tFøgmítCou¡
,

493 
	tIN
 
	tEFI_TLS_CRYPT_MODE
 
	tCry±Mode


500 
	s_EFI_TLS_PROTOCOL
 {

501 
EFI_TLS_SET_SESSION_DATA
 
	mSëSessi⁄D©a
;

502 
EFI_TLS_GET_SESSION_DATA
 
	mGëSessi⁄D©a
;

503 
EFI_TLS_BUILD_RESPONSE_PACKET
 
	mBuûdRe•⁄£Packë
;

504 
EFI_TLS_PROCESS_PACKET
 
	mPro˚ssPackë
;

507 
EFI_GUID
 
gEfiTlsSîvi˚BödögPrŸocﬁGuid
;

508 
EFI_GUID
 
gEfiTlsPrŸocﬁGuid
;

	@TlsConfig.h

12 #i‚de‡
__EFI_TLS_CONFIGURATION_PROTOCOL_H__


13 
	#__EFI_TLS_CONFIGURATION_PROTOCOL_H__


	)

18 
	#EFI_TLS_CONFIGURATION_PROTOCOL_GUID
 \

	)

23 
_EFI_TLS_CONFIGURATION_PROTOCOL
 
	tEFI_TLS_CONFIGURATION_PROTOCOL
;

34 
	mEfiTlsC⁄figD©aTy≥Ho°PublicCît
,

38 
	mEfiTlsC⁄figD©aTy≥Ho°Priv©eKey
,

43 
	mEfiTlsC⁄figD©aTy≥CACîtifiˇã
,

48 
	mEfiTlsC⁄figD©aTy≥CîtRevoˇti⁄Li°
,

50 
	mEfiTlsC⁄figD©aTy≥Maximum


52 } 
	tEFI_TLS_CONFIG_DATA_TYPE
;

75 
	gEFI_STATUS


76 (
	tEFIAPI
 *
	tEFI_TLS_CONFIGURATION_SET_DATA
)(

77 
	tIN
 
	tEFI_TLS_CONFIGURATION_PROTOCOL
 *
	tThis
,

78 
	tIN
 
	tEFI_TLS_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

79 
	tIN
 
	tVOID
 *
	tD©a
,

80 
	tIN
 
	tUINTN
 
	tD©aSize


107 
	gEFI_STATUS


108 (
	tEFIAPI
 *
	tEFI_TLS_CONFIGURATION_GET_DATA
)(

109 
	tIN
 
	tEFI_TLS_CONFIGURATION_PROTOCOL
 *
	tThis
,

110 
	tIN
 
	tEFI_TLS_CONFIG_DATA_TYPE
 
	tD©aTy≥
,

111 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
, 
	tOPTIONAL


112 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aSize


119 
	s_EFI_TLS_CONFIGURATION_PROTOCOL
 {

120 
EFI_TLS_CONFIGURATION_SET_DATA
 
	mSëD©a
;

121 
EFI_TLS_CONFIGURATION_GET_DATA
 
	mGëD©a
;

124 
EFI_GUID
 
gEfiTlsC⁄figuøti⁄PrŸocﬁGuid
;

	@TrEEProtocol.h

9 #i‚de‡
__TREE_H__


10 
	#__TREE_H__


	)

12 
	~<Indu°rySènd¨d/UefiTcgPœtf‹m.h
>

13 
	~<Indu°rySènd¨d/Tpm20.h
>

15 
	#EFI_TREE_PROTOCOL_GUID
 \

	)

18 
_EFI_TREE_PROTOCOL
 
	tEFI_TREE_PROTOCOL
;

20 
	s_TREE_VERSION
 {

21 
UINT8
 
	mMaj‹
;

22 
UINT8
 
	mMö‹
;

23 } 
	tTREE_VERSION
;

25 
UINT32
 
	tTREE_EVENT_LOG_BITMAP
;

26 
UINT32
 
	tTREE_EVENT_LOG_FORMAT
;

28 
	#TREE_EVENT_LOG_FORMAT_TCG_1_2
 0x00000001

	)

30 
	s_TREE_BOOT_SERVICE_CAPABILITY
 {

34 
UINT8
 
	mSize
;

40 
TREE_VERSION
 
	mSåu˘uªVîsi⁄
;

46 
TREE_VERSION
 
	mPrŸocﬁVîsi⁄
;

50 
UINT32
 
	mHashAlg‹ôhmBôm≠
;

54 
TREE_EVENT_LOG_BITMAP
 
	mSuµ‹ãdEvítLogs
;

58 
BOOLEAN
 
	mTrEEPª£¡Fœg
;

62 
UINT16
 
	mMaxComm™dSize
;

66 
UINT16
 
	mMaxRe•⁄£Size
;

71 
UINT32
 
	mM™uÁ˘uªrID
;

72 } 
	tTREE_BOOT_SERVICE_CAPABILITY_1_0
;

74 
TREE_BOOT_SERVICE_CAPABILITY_1_0
 
	tTREE_BOOT_SERVICE_CAPABILITY
;

76 
	#TREE_BOOT_HASH_ALG_SHA1
 0x00000001

	)

77 
	#TREE_BOOT_HASH_ALG_SHA256
 0x00000002

	)

78 
	#TREE_BOOT_HASH_ALG_SHA384
 0x00000004

	)

79 
	#TREE_BOOT_HASH_ALG_SHA512
 0x00000008

	)

84 
	#TREE_EXTEND_ONLY
 0x0000000000000001

	)

88 
	#PE_COFF_IMAGE
 0x0000000000000010

	)

90 
UINT32
 
	tTrEE_PCRINDEX
;

91 
UINT32
 
	tTrEE_EVENTTYPE
;

93 
	#MAX_PCR_INDEX
 23

	)

94 
	#TREE_EVENT_HEADER_VERSION
 1

	)

96 #¥agm®
∑ck
(1)

102 
UINT32
 
	mHódîSize
;

106 
UINT16
 
	mHódîVîsi⁄
;

110 
TrEE_PCRINDEX
 
	mPCRIndex
;

114 
TrEE_EVENTTYPE
 
	mEvítTy≥
;

115 } 
	tTrEE_EVENT_HEADER
;

121 
UINT32
 
	mSize
;

122 
TrEE_EVENT_HEADER
 
	mHódî
;

123 
UINT8
 
	mEvít
[1];

124 } 
	tTrEE_EVENT
;

126 #¥agm®
∑ck
()

148 
	gEFI_STATUS


149 (
	tEFIAPI
 *
	tEFI_TREE_GET_CAPABILITY
) (

150 
	tIN
 
	tEFI_TREE_PROTOCOL
 *
	tThis
,

151 
	tIN
 
	tOUT
 
	tTREE_BOOT_SERVICE_CAPABILITY
 *
	tPrŸocﬁC≠abûôy


172 
	gEFI_STATUS


173 (
	tEFIAPI
 *
	tEFI_TREE_GET_EVENT_LOG
) (

174 
	tIN
 
	tEFI_TREE_PROTOCOL
 *
	tThis
,

175 
	tIN
 
	tTREE_EVENT_LOG_FORMAT
 
	tEvítLogF‹m©
,

176 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLoˇti⁄
,

177 
	tOUT
 
	tEFI_PHYSICAL_ADDRESS
 *
	tEvítLogLa°E¡ry
,

178 
	tOUT
 
	tBOOLEAN
 *
	tEvítLogTrunˇãd


201 
	gEFI_STATUS


202 (
	tEFIAPI
 * 
	tEFI_TREE_HASH_LOG_EXTEND_EVENT
) (

203 
	tIN
 
	tEFI_TREE_PROTOCOL
 *
	tThis
,

204 
	tIN
 
	tUINT64
 
	tFœgs
,

205 
	tIN
 
	tEFI_PHYSICAL_ADDRESS
 
	tD©aToHash
,

206 
	tIN
 
	tUINT64
 
	tD©aToHashLí
,

207 
	tIN
 
	tTrEE_EVENT
 *
	tEvít


225 
	gEFI_STATUS


226 (
	tEFIAPI
 *
	tEFI_TREE_SUBMIT_COMMAND
) (

227 
	tIN
 
	tEFI_TREE_PROTOCOL
 *
	tThis
,

228 
	tIN
 
	tUINT32
 
	tI≈utP¨amëîBlockSize
,

229 
	tIN
 
	tUINT8
 *
	tI≈utP¨amëîBlock
,

230 
	tIN
 
	tUINT32
 
	tOuçutP¨amëîBlockSize
,

231 
	tIN
 
	tUINT8
 *
	tOuçutP¨amëîBlock


234 
	s_EFI_TREE_PROTOCOL
 {

235 
EFI_TREE_GET_CAPABILITY
 
	mGëC≠abûôy
;

236 
EFI_TREE_GET_EVENT_LOG
 
	mGëEvítLog
;

237 
EFI_TREE_HASH_LOG_EXTEND_EVENT
 
	mHashLogExãndEvít
;

238 
EFI_TREE_SUBMIT_COMMAND
 
	mSubmôComm™d
;

241 
EFI_GUID
 
gEfiTrEEPrŸocﬁGuid
;

	@Udp4.h

15 #i‚de‡
__EFI_UDP4_PROTOCOL_H__


16 
	#__EFI_UDP4_PROTOCOL_H__


	)

18 
	~<PrŸocﬁ/Ip4.h
>

22 
	#EFI_UDP4_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

27 
	#EFI_UDP4_PROTOCOL_GUID
 \

	)

32 
_EFI_UDP4_PROTOCOL
 
	tEFI_UDP4_PROTOCOL
;

39 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

40 
EFI_IPv4_ADDRESS
 
	mLoˇlAddªss
;

41 
UINT16
 
	mLoˇlP‹t
;

42 
EFI_IPv4_ADDRESS
 
	mRemŸeAddªss
;

43 
UINT16
 
	mRemŸeP‹t
;

44 } 
	tEFI_UDP4_SERVICE_POINT
;

51 
EFI_HANDLE
 
	mDrivîH™dÀ
;

52 
UINT32
 
	mSîvi˚Cou¡
;

53 
EFI_UDP4_SERVICE_POINT
 
	mSîvi˚s
[1];

54 } 
	tEFI_UDP4_VARIABLE_DATA
;

57 
UINT32
 
	mFøgmítLígth
;

58 
VOID
 *
	mFøgmítBuf„r
;

59 } 
	tEFI_UDP4_FRAGMENT_DATA
;

62 
EFI_IPv4_ADDRESS
 
	mSour˚Addªss
;

63 
UINT16
 
	mSour˚P‹t
;

64 
EFI_IPv4_ADDRESS
 
	mDe°ö©i⁄Addªss
;

65 
UINT16
 
	mDe°ö©i⁄P‹t
;

66 } 
	tEFI_UDP4_SESSION_DATA
;

71 
BOOLEAN
 
	mAc˚±Brﬂdˇ°
;

72 
BOOLEAN
 
	mAc˚±Promiscuous
;

73 
BOOLEAN
 
	mAc˚±AnyP‹t
;

74 
BOOLEAN
 
	mAŒowDu∂iˇãP‹t
;

78 
UINT8
 
	mTy≥OfSîvi˚
;

79 
UINT8
 
	mTimeToLive
;

80 
BOOLEAN
 
	mDoNŸFøgmít
;

81 
UINT32
 
	mRe˚iveTimeout
;

82 
UINT32
 
	mTønsmôTimeout
;

86 
BOOLEAN
 
	mU£DeÁu…Addªss
;

87 
EFI_IPv4_ADDRESS
 
	mSèti⁄Addªss
;

88 
EFI_IPv4_ADDRESS
 
	mSub√tMask
;

89 
UINT16
 
	mSèti⁄P‹t
;

90 
EFI_IPv4_ADDRESS
 
	mRemŸeAddªss
;

91 
UINT16
 
	mRemŸeP‹t
;

92 } 
	tEFI_UDP4_CONFIG_DATA
;

95 
EFI_UDP4_SESSION_DATA
 *
	mUdpSessi⁄D©a
;

96 
EFI_IPv4_ADDRESS
 *
	mG©ewayAddªss
;

97 
UINT32
 
	mD©aLígth
;

98 
UINT32
 
	mFøgmítCou¡
;

99 
EFI_UDP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

100 } 
	tEFI_UDP4_TRANSMIT_DATA
;

103 
EFI_TIME
 
	mTimeSèmp
;

104 
EFI_EVENT
 
	mRecy˛eSig«l
;

105 
EFI_UDP4_SESSION_DATA
 
	mUdpSessi⁄
;

106 
UINT32
 
	mD©aLígth
;

107 
UINT32
 
	mFøgmítCou¡
;

108 
EFI_UDP4_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

109 } 
	tEFI_UDP4_RECEIVE_DATA
;

113 
EFI_EVENT
 
	mEvít
;

114 
EFI_STATUS
 
	mSètus
;

116 
EFI_UDP4_RECEIVE_DATA
 *
	mRxD©a
;

117 
EFI_UDP4_TRANSMIT_DATA
 *
	mTxD©a
;

118 } 
	mPackë
;

119 } 
	tEFI_UDP4_COMPLETION_TOKEN
;

142 
	gEFI_STATUS


143 (
	tEFIAPI
 *
	tEFI_UDP4_GET_MODE_DATA
)(

144 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

145 
	tOUT
 
	tEFI_UDP4_CONFIG_DATA
 *
	tUdp4C⁄figD©a
 
	tOPTIONAL
,

146 
	tOUT
 
	tEFI_IP4_MODE_DATA
 *
	tIp4ModeD©a
 
	tOPTIONAL
,

147 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

148 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


191 
	gEFI_STATUS


192 (
	tEFIAPI
 *
	tEFI_UDP4_CONFIGURE
)(

193 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

194 
	tIN
 
	tEFI_UDP4_CONFIG_DATA
 *
	tUdpC⁄figD©a
 
	tOPTIONAL


227 
	gEFI_STATUS


228 (
	tEFIAPI
 *
	tEFI_UDP4_GROUPS
)(

229 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

230 
	tIN
 
	tBOOLEAN
 
	tJoöFœg
,

231 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tMu…iˇ°Addªss
 
	tOPTIONAL


273 
	gEFI_STATUS


274 (
	tEFIAPI
 *
	tEFI_UDP4_ROUTES
)(

275 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

276 
	tIN
 
	tBOOLEAN
 
	tDñëeRouã
,

277 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tAddªss
,

278 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tSub√tMask
,

279 
	tIN
 
	tEFI_IPv4_ADDRESS
 *
	tG©ewayAddªss


303 
	gEFI_STATUS


304 (
	tEFIAPI
 *
	tEFI_UDP4_POLL
)(

305 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis


340 
	gEFI_STATUS


341 (
	tEFIAPI
 *
	tEFI_UDP4_RECEIVE
)(

342 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

343 
	tIN
 
	tEFI_UDP4_COMPLETION_TOKEN
 *
	tTokí


377 
	gEFI_STATUS


378 (
	tEFIAPI
 *
	tEFI_UDP4_TRANSMIT
)(

379 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

380 
	tIN
 
	tEFI_UDP4_COMPLETION_TOKEN
 *
	tTokí


412 
	gEFI_STATUS


413 (
	tEFIAPI
 *
	tEFI_UDP4_CANCEL
)(

414 
	tIN
 
	tEFI_UDP4_PROTOCOL
 *
	tThis
,

415 
	tIN
 
	tEFI_UDP4_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


425 
	s_EFI_UDP4_PROTOCOL
 {

426 
EFI_UDP4_GET_MODE_DATA
 
	mGëModeD©a
;

427 
EFI_UDP4_CONFIGURE
 
	mC⁄figuª
;

428 
EFI_UDP4_GROUPS
 
	mGroups
;

429 
EFI_UDP4_ROUTES
 
	mRouãs
;

430 
EFI_UDP4_TRANSMIT
 
	mTønsmô
;

431 
EFI_UDP4_RECEIVE
 
	mRe˚ive
;

432 
EFI_UDP4_CANCEL
 
	mC™˚l
;

433 
EFI_UDP4_POLL
 
	mPﬁl
;

436 
EFI_GUID
 
gEfiUdp4Sîvi˚BödögPrŸocﬁGuid
;

437 
EFI_GUID
 
gEfiUdp4PrŸocﬁGuid
;

	@Udp6.h

14 #i‚de‡
__EFI_UDP6_PROTOCOL_H__


15 
	#__EFI_UDP6_PROTOCOL_H__


	)

17 
	~<PrŸocﬁ/Ip6.h
>

19 
	#EFI_UDP6_SERVICE_BINDING_PROTOCOL_GUID
 \

	)

24 
	#EFI_UDP6_PROTOCOL_GUID
 \

	)

37 
EFI_HANDLE
 
	mIn°™˚H™dÀ
;

43 
EFI_IPv6_ADDRESS
 
	mLoˇlAddªss
;

47 
UINT16
 
	mLoˇlP‹t
;

52 
EFI_IPv6_ADDRESS
 
	mRemŸeAddªss
;

57 
UINT16
 
	mRemŸeP‹t
;

58 } 
	tEFI_UDP6_SERVICE_POINT
;

68 
EFI_HANDLE
 
	mDrivîH™dÀ
;

72 
UINT32
 
	mSîvi˚Cou¡
;

76 
EFI_UDP6_SERVICE_POINT
 
	mSîvi˚s
[1];

77 } 
	tEFI_UDP6_VARIABLE_DATA
;

79 
_EFI_UDP6_PROTOCOL
 
	tEFI_UDP6_PROTOCOL
;

86 
UINT32
 
	mFøgmítLígth
;

87 
VOID
 *
	mFøgmítBuf„r
;

88 } 
	tEFI_UDP6_FRAGMENT_DATA
;

100 
EFI_IPv6_ADDRESS
 
	mSour˚Addªss
;

105 
UINT16
 
	mSour˚P‹t
;

110 
EFI_IPv6_ADDRESS
 
	mDe°ö©i⁄Addªss
;

115 
UINT16
 
	mDe°ö©i⁄P‹t
;

116 } 
	tEFI_UDP6_SESSION_DATA
;

122 
BOOLEAN
 
	mAc˚±Promiscuous
;

126 
BOOLEAN
 
	mAc˚±AnyP‹t
;

131 
BOOLEAN
 
	mAŒowDu∂iˇãP‹t
;

135 
UINT8
 
	mTøfficCœss
;

139 
UINT8
 
	mH›Limô
;

144 
UINT32
 
	mRe˚iveTimeout
;

149 
UINT32
 
	mTønsmôTimeout
;

161 
EFI_IPv6_ADDRESS
 
	mSèti⁄Addªss
;

168 
UINT16
 
	mSèti⁄P‹t
;

175 
EFI_IPv6_ADDRESS
 
	mRemŸeAddªss
;

182 
UINT16
 
	mRemŸeP‹t
;

183 } 
	tEFI_UDP6_CONFIG_DATA
;

195 
EFI_UDP6_SESSION_DATA
 *
	mUdpSessi⁄D©a
;

199 
UINT32
 
	mD©aLígth
;

203 
UINT32
 
	mFøgmítCou¡
;

207 
EFI_UDP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

208 } 
	tEFI_UDP6_TRANSMIT_DATA
;

224 
EFI_TIME
 
	mTimeSèmp
;

228 
EFI_EVENT
 
	mRecy˛eSig«l
;

233 
EFI_UDP6_SESSION_DATA
 
	mUdpSessi⁄
;

237 
UINT32
 
	mD©aLígth
;

241 
UINT32
 
	mFøgmítCou¡
;

245 
EFI_UDP6_FRAGMENT_DATA
 
	mFøgmítTabÀ
[1];

246 } 
	tEFI_UDP6_RECEIVE_DATA
;

262 
EFI_EVENT
 
	mEvít
;

283 
EFI_STATUS
 
	mSètus
;

288 
EFI_UDP6_RECEIVE_DATA
 *
	mRxD©a
;

292 
EFI_UDP6_TRANSMIT_DATA
 *
	mTxD©a
;

293 } 
	mPackë
;

294 } 
	tEFI_UDP6_COMPLETION_TOKEN
;

317 
	gEFI_STATUS


318 (
	tEFIAPI
 *
	tEFI_UDP6_GET_MODE_DATA
)(

319 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

320 
	tOUT
 
	tEFI_UDP6_CONFIG_DATA
 *
	tUdp6C⁄figD©a
 
	tOPTIONAL
,

321 
	tOUT
 
	tEFI_IP6_MODE_DATA
 *
	tIp6ModeD©a
 
	tOPTIONAL
,

322 
	tOUT
 
	tEFI_MANAGED_NETWORK_CONFIG_DATA
 *
	tM≈C⁄figD©a
 
	tOPTIONAL
,

323 
	tOUT
 
	tEFI_SIMPLE_NETWORK_MODE
 *
	tS≈ModeD©a
 
	tOPTIONAL


368 
	gEFI_STATUS


369 (
	tEFIAPI
 *
	tEFI_UDP6_CONFIGURE
)(

370 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

371 
	tIN
 
	tEFI_UDP6_CONFIG_DATA
 *
	tUdpC⁄figD©a
 
	tOPTIONAL


398 
	gEFI_STATUS


399 (
	tEFIAPI
 *
	tEFI_UDP6_GROUPS
)(

400 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

401 
	tIN
 
	tBOOLEAN
 
	tJoöFœg
,

402 
	tIN
 
	tEFI_IPv6_ADDRESS
 *
	tMu…iˇ°Addªss
 
	tOPTIONAL


455 
	gEFI_STATUS


456 (
	tEFIAPI
 *
	tEFI_UDP6_TRANSMIT
)(

457 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

458 
	tIN
 
	tEFI_UDP6_COMPLETION_TOKEN
 *
	tTokí


494 
	gEFI_STATUS


495 (
	tEFIAPI
 *
	tEFI_UDP6_RECEIVE
)(

496 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

497 
	tIN
 
	tEFI_UDP6_COMPLETION_TOKEN
 *
	tTokí


524 
	gEFI_STATUS


525 (
	tEFIAPI
 *
	tEFI_UDP6_CANCEL
)(

526 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis
,

527 
	tIN
 
	tEFI_UDP6_COMPLETION_TOKEN
 *
	tTokí
 
	tOPTIONAL


550 
	gEFI_STATUS


551 (
	tEFIAPI
 *
	tEFI_UDP6_POLL
)(

552 
	tIN
 
	tEFI_UDP6_PROTOCOL
 *
	tThis


561 
	s_EFI_UDP6_PROTOCOL
 {

562 
EFI_UDP6_GET_MODE_DATA
 
	mGëModeD©a
;

563 
EFI_UDP6_CONFIGURE
 
	mC⁄figuª
;

564 
EFI_UDP6_GROUPS
 
	mGroups
;

565 
EFI_UDP6_TRANSMIT
 
	mTønsmô
;

566 
EFI_UDP6_RECEIVE
 
	mRe˚ive
;

567 
EFI_UDP6_CANCEL
 
	mC™˚l
;

568 
EFI_UDP6_POLL
 
	mPﬁl
;

571 
EFI_GUID
 
gEfiUdp6Sîvi˚BödögPrŸocﬁGuid
;

572 
EFI_GUID
 
gEfiUdp6PrŸocﬁGuid
;

	@UfsDeviceConfig.h

12 #i‚de‡
__UFS_DEVICE_CONFIG_PROTOCOL_H__


13 
	#__UFS_DEVICE_CONFIG_PROTOCOL_H__


	)

18 
	#EFI_UFS_DEVICE_CONFIG_GUID
 \

	)

24 
_EFI_UFS_DEVICE_CONFIG_PROTOCOL
 
	tEFI_UFS_DEVICE_CONFIG_PROTOCOL
;

50 
	gEFI_STATUS


51 (
	tEFIAPI
 *
	tEFI_UFS_DEVICE_CONFIG_RW_DESCRIPTOR
) (

52 
	tIN
 
	tEFI_UFS_DEVICE_CONFIG_PROTOCOL
 *
	tThis
,

53 
	tIN
 
	tBOOLEAN
 
	tRód
,

54 
	tIN
 
	tUINT8
 
	tDescId
,

55 
	tIN
 
	tUINT8
 
	tIndex
,

56 
	tIN
 
	tUINT8
 
	tSñe˘‹
,

57 
	tIN
 
	tOUT
 
	tUINT8
 *
	tDes¸ùt‹
,

58 
	tIN
 
	tOUT
 
	tUINT32
 *
	tDescSize


80 
	gEFI_STATUS


81 (
	tEFIAPI
 *
	tEFI_UFS_DEVICE_CONFIG_RW_FLAG
) (

82 
	tIN
 
	tEFI_UFS_DEVICE_CONFIG_PROTOCOL
 *
	tThis
,

83 
	tIN
 
	tBOOLEAN
 
	tRód
,

84 
	tIN
 
	tUINT8
 
	tFœgId
,

85 
	tIN
 
	tOUT
 
	tUINT8
 *
	tFœg


112 
	gEFI_STATUS


113 (
	tEFIAPI
 *
	tEFI_UFS_DEVICE_CONFIG_RW_ATTRIBUTE
) (

114 
	tIN
 
	tEFI_UFS_DEVICE_CONFIG_PROTOCOL
 *
	tThis
,

115 
	tIN
 
	tBOOLEAN
 
	tRód
,

116 
	tIN
 
	tUINT8
 
	tAârId
,

117 
	tIN
 
	tUINT8
 
	tIndex
,

118 
	tIN
 
	tUINT8
 
	tSñe˘‹
,

119 
	tIN
 
	tOUT
 
	tUINT8
 *
	tAâribuã
,

120 
	tIN
 
	tOUT
 
	tUINT32
 *
	tAârSize


126 
	s_EFI_UFS_DEVICE_CONFIG_PROTOCOL
 {

127 
EFI_UFS_DEVICE_CONFIG_RW_DESCRIPTOR
 
	mRwUfsDes¸ùt‹
;

128 
EFI_UFS_DEVICE_CONFIG_RW_FLAG
 
	mRwUfsFœg
;

129 
EFI_UFS_DEVICE_CONFIG_RW_ATTRIBUTE
 
	mRwUfsAâribuã
;

135 
EFI_GUID
 
gEfiUfsDevi˚C⁄figPrŸocﬁGuid
;

	@UgaDraw.h

11 #i‚de‡
__UGA_DRAW_H__


12 
	#__UGA_DRAW_H__


	)

15 
	#EFI_UGA_DRAW_PROTOCOL_GUID
 \

	)

20 
_EFI_UGA_DRAW_PROTOCOL
 
	tEFI_UGA_DRAW_PROTOCOL
;

37 
	gEFI_STATUS


38 (
	tEFIAPI
 *
	tEFI_UGA_DRAW_PROTOCOL_GET_MODE
)(

39 
	tIN
 
	tEFI_UGA_DRAW_PROTOCOL
 *
	tThis
,

40 
	tOUT
 
	tUINT32
 *
	tH‹iz⁄èlResﬁuti⁄
,

41 
	tOUT
 
	tUINT32
 *
	tVîtiˇlResﬁuti⁄
,

42 
	tOUT
 
	tUINT32
 *
	tCﬁ‹Dïth
,

43 
	tOUT
 
	tUINT32
 *
	tRe‰eshR©e


60 
	gEFI_STATUS


61 (
	tEFIAPI
 *
	tEFI_UGA_DRAW_PROTOCOL_SET_MODE
)(

62 
	tIN
 
	tEFI_UGA_DRAW_PROTOCOL
 *
	tThis
,

63 
	tIN
 
	tUINT32
 
	tH‹iz⁄èlResﬁuti⁄
,

64 
	tIN
 
	tUINT32
 
	tVîtiˇlResﬁuti⁄
,

65 
	tIN
 
	tUINT32
 
	tCﬁ‹Dïth
,

66 
	tIN
 
	tUINT32
 
	tRe‰eshR©e


70 
UINT8
 
	mBlue
;

71 
UINT8
 
	mGªí
;

72 
UINT8
 
	mRed
;

73 
UINT8
 
	mRe£rved
;

74 } 
	tEFI_UGA_PIXEL
;

77 
EFI_UGA_PIXEL
 
	mPixñ
;

78 
UINT32
 
	mRaw
;

79 } 
	tEFI_UGA_PIXEL_UNION
;

85 
	mEfiUgaVideoFûl
,

90 
	mEfiUgaVideoToB…Buf„r
,

97 
	mEfiUgaB…Buf„rToVideo
,

104 
	mEfiUgaVideoToVideo
,

109 
	mEfiUgaB…Max


111 } 
	tEFI_UGA_BLT_OPERATION
;

134 
	gEFI_STATUS


135 (
	tEFIAPI
 *
	tEFI_UGA_DRAW_PROTOCOL_BLT
)(

136 
	tIN
 
	tEFI_UGA_DRAW_PROTOCOL
 * 
	tThis
,

137 
	tIN
 
	tEFI_UGA_PIXEL
 * 
	tB…Buf„r
, 
	tOPTIONAL


138 
	tIN
 
	tEFI_UGA_BLT_OPERATION
 
	tB…O≥øti⁄
,

139 
	tIN
 
	tUINTN
 
	tSour˚X
,

140 
	tIN
 
	tUINTN
 
	tSour˚Y
,

141 
	tIN
 
	tUINTN
 
	tDe°ö©i⁄X
,

142 
	tIN
 
	tUINTN
 
	tDe°ö©i⁄Y
,

143 
	tIN
 
	tUINTN
 
	tWidth
,

144 
	tIN
 
	tUINTN
 
	tHeight
,

145 
	tIN
 
	tUINTN
 
	tDñè
 
	tOPTIONAL


152 
	s_EFI_UGA_DRAW_PROTOCOL
 {

153 
EFI_UGA_DRAW_PROTOCOL_GET_MODE
 
	mGëMode
;

154 
EFI_UGA_DRAW_PROTOCOL_SET_MODE
 
	mSëMode
;

155 
EFI_UGA_DRAW_PROTOCOL_BLT
 
	mB…
;

158 
EFI_GUID
 
gEfiUgaDøwPrŸocﬁGuid
;

	@UgaIo.h

11 #i‚de‡
__UGA_IO_H__


12 
	#__UGA_IO_H__


	)

14 
	#EFI_UGA_IO_PROTOCOL_GUID
 \

	)

17 
_EFI_UGA_IO_PROTOCOL
 
	tEFI_UGA_IO_PROTOCOL
;

19 
UINT32
 
	tUGA_STATUS
;

22 
	mUgaDtP¨ítBus
 = 1,

23 
	mUgaDtGøphicsC⁄åﬁÀr
,

24 
	mUgaDtOuçutC⁄åﬁÀr
,

25 
	mUgaDtOuçutP‹t
,

26 
	mUgaDtOthî


27 } 
	tUGA_DEVICE_TYPE
, *
	tPUGA_DEVICE_TYPE
;

29 
UINT32
 
	tUGA_DEVICE_ID
, *
	tPUGA_DEVICE_ID
;

32 
UGA_DEVICE_TYPE
 
	mdevi˚Ty≥
;

33 
UGA_DEVICE_ID
 
	mdevi˚Id
;

34 
UINT32
 
	mui32Devi˚C⁄ãxtSize
;

35 
UINT32
 
	mui32Sh¨edC⁄ãxtSize
;

36 } 
	tUGA_DEVICE_DATA
, *
	tPUGA_DEVICE_DATA
;

38 
	s_UGA_DEVICE
 {

39 
VOID
 *
	mpvDevi˚C⁄ãxt
;

40 
VOID
 *
	mpvSh¨edC⁄ãxt
;

41 
VOID
 *
	mpvRunTimeC⁄ãxt
;

42 
_UGA_DEVICE
 *
	mpP¨ítDevi˚
;

43 
VOID
 *
	mpvBusIoSîvi˚s
;

44 
VOID
 *
	mpvStdIoSîvi˚s
;

45 
UGA_DEVICE_DATA
 
	mdevi˚D©a
;

46 } 
	tUGA_DEVICE
, *
	tPUGA_DEVICE
;

49 
	mUgaIoGëVîsi⁄
 = 1,

50 
	mUgaIoGëChûdDevi˚
,

51 
	mUgaIoSèπDevi˚
,

52 
	mUgaIoSt›Devi˚
,

53 
	mUgaIoFlushDevi˚
,

54 
	mUgaIoRe£tDevi˚
,

55 
	mUgaIoGëDevi˚Sèã
,

56 
	mUgaIoSëDevi˚Sèã
,

57 
	mUgaIoSëPowîSèã
,

58 
	mUgaIoGëMem‹yC⁄figuøti⁄
,

59 
	mUgaIoSëVideoMode
,

60 
	mUgaIoC›yRe˘™gÀ
,

61 
	mUgaIoGëEdidSegmít
,

62 
	mUgaIoDevi˚Ch™√lO≥n
,

63 
	mUgaIoDevi˚Ch™√lClo£
,

64 
	mUgaIoDevi˚Ch™√lRód
,

65 
	mUgaIoDevi˚Ch™√lWrôe
,

66 
	mUgaIoGëPîsi°ítD©aSize
,

67 
	mUgaIoGëPîsi°ítD©a
,

68 
	mUgaIoSëPîsi°ítD©a
,

69 
	mUgaIoGëDevi˚Pr›îtySize
,

70 
	mUgaIoGëDevi˚Pr›îty
,

71 
	mUgaIoBtPriv©eI¡îÁ˚


72 } 
	tUGA_IO_REQUEST_CODE
, *
	tPUGA_IO_REQUEST_CODE
;

75 
IN
 
UGA_IO_REQUEST_CODE
 
	mioReque°Code
;

76 
IN
 
VOID
 *
	mpvInBuf„r
;

77 
IN
 
UINT64
 
	mui64InBuf„rSize
;

78 
OUT
 
VOID
 *
	mpvOutBuf„r
;

79 
IN
 
UINT64
 
	mui64OutBuf„rSize
;

80 
OUT
 
UINT64
 
	mui64ByãsRëu∫ed
;

81 } 
	tUGA_IO_REQUEST
, *
	tPUGA_IO_REQUEST
;

102 
	gEFI_STATUS


103 (
	tEFIAPI
 *
	tEFI_UGA_IO_PROTOCOL_CREATE_DEVICE
)(

104 
	tIN
 
	tEFI_UGA_IO_PROTOCOL
 *
	tThis
,

105 
	tIN
 
	tUGA_DEVICE
 *
	tP¨ítDevi˚
,

106 
	tIN
 
	tUGA_DEVICE_DATA
 *
	tDevi˚D©a
,

107 
	tIN
 
	tVOID
 *
	tRunTimeC⁄ãxt
,

108 
	tOUT
 
	tUGA_DEVICE
 **
	tDevi˚


126 
	gEFI_STATUS


127 (
	tEFIAPI
 *
	tEFI_UGA_IO_PROTOCOL_DELETE_DEVICE
)(

128 
	tIN
 
	tEFI_UGA_IO_PROTOCOL
 * 
	tThis
,

129 
	tIN
 
	tUGA_DEVICE
 * 
	tDevi˚


149 
	gUGA_STATUS


150 (
	tEFIAPI
 *
	tPUGA_FW_SERVICE_DISPATCH
)(

151 
	tIN
 
	tPUGA_DEVICE
 
	tpDevi˚
,

152 
	tIN
 
	tOUT
 
	tPUGA_IO_REQUEST
 
	tpIoReque°


158 
	s_EFI_UGA_IO_PROTOCOL
 {

159 
EFI_UGA_IO_PROTOCOL_CREATE_DEVICE
 
	mCª©eDevi˚
;

160 
EFI_UGA_IO_PROTOCOL_DELETE_DEVICE
 
	mDñëeDevi˚
;

161 
PUGA_FW_SERVICE_DISPATCH
 
	mDi•©chSîvi˚
;

164 
EFI_GUID
 
gEfiUgaIoPrŸocﬁGuid
;

172 
UINT32
 
	mVîsi⁄
;

173 
UINT32
 
	mHódîSize
;

174 
UINT32
 
	mSizeOfE¡rõs
;

175 
UINT32
 
	mNumbîOfE¡rõs
;

176 } 
	tEFI_DRIVER_OS_HANDOFF_HEADER
;

179 
	mEfiUgaDrivîFromPciRom
,

180 
	mEfiUgaDrivîFromSy°em
,

181 
	mEfiDrivîH™doffMax


182 } 
	tEFI_DRIVER_HANOFF_ENUM
;

185 
EFI_DRIVER_HANOFF_ENUM
 
	mTy≥
;

186 
EFI_DEVICE_PATH_PROTOCOL
 *
	mDevi˚P©h
;

187 
VOID
 *
	mPciRomImage
;

188 
UINT64
 
	mPciRomSize
;

189 } 
	tEFI_DRIVER_OS_HANDOFF
;

	@UnicodeCollation.h

11 #i‚de‡
__UNICODE_COLLATION_H__


12 
	#__UNICODE_COLLATION_H__


	)

14 
	#EFI_UNICODE_COLLATION_PROTOCOL_GUID
 \

	)

19 
	#EFI_UNICODE_COLLATION_PROTOCOL2_GUID
 \

	)

24 
_EFI_UNICODE_COLLATION_PROTOCOL
 
	tEFI_UNICODE_COLLATION_PROTOCOL
;

30 
	#UNICODE_COLLATION_PROTOCOL
 
EFI_UNICODE_COLLATION_PROTOCOL_GUID


	)

35 
EFI_UNICODE_COLLATION_PROTOCOL
 
	tUNICODE_COLLATION_INTERFACE
;

40 
	#EFI_UNICODE_BYTE_ORDER_MARK
 (
CHAR16
Ë(0x„ff)

	)

58 
	gINTN


59 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_STRICOLL
)(

60 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

61 
	tIN
 
	tCHAR16
 *
	tSå1
,

62 
	tIN
 
	tCHAR16
 *
	tSå2


78 
	gBOOLEAN


79 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_METAIMATCH
)(

80 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

81 
	tIN
 
	tCHAR16
 *
	tSåög
,

82 
	tIN
 
	tCHAR16
 *
	tP©ã∫


94 
	gVOID


95 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_STRLWR
)(

96 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

97 
	tIN
 
	tOUT
 
	tCHAR16
 *
	tSå


109 
	gVOID


110 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_STRUPR
)(

111 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

112 
	tIN
 
	tOUT
 
	tCHAR16
 *
	tSå


128 
	gVOID


129 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_FATTOSTR
)(

130 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

131 
	tIN
 
	tUINTN
 
	tF©Size
,

132 
	tIN
 
	tCHAR8
 *
	tF©
,

133 
	tOUT
 
	tCHAR16
 *
	tSåög


151 
	gBOOLEAN


152 (
	tEFIAPI
 *
	tEFI_UNICODE_COLLATION_STRTOFAT
)(

153 
	tIN
 
	tEFI_UNICODE_COLLATION_PROTOCOL
 *
	tThis
,

154 
	tIN
 
	tCHAR16
 *
	tSåög
,

155 
	tIN
 
	tUINTN
 
	tF©Size
,

156 
	tOUT
 
	tCHAR8
 *
	tF©


163 
	s_EFI_UNICODE_COLLATION_PROTOCOL
 {

164 
EFI_UNICODE_COLLATION_STRICOLL
 
	mSåiCﬁl
;

165 
EFI_UNICODE_COLLATION_METAIMATCH
 
	mMëaiM©ch
;

166 
EFI_UNICODE_COLLATION_STRLWR
 
	mSåLwr
;

167 
EFI_UNICODE_COLLATION_STRUPR
 
	mSåU¥
;

172 
EFI_UNICODE_COLLATION_FATTOSTR
 
	mF©ToSå
;

173 
EFI_UNICODE_COLLATION_STRTOFAT
 
	mSåToF©
;

180 
CHAR8
 *
	mSuµ‹ãdL™guages
;

183 
EFI_GUID
 
gEfiUnicodeCﬁœti⁄PrŸocﬁGuid
;

184 
EFI_GUID
 
gEfiUnicodeCﬁœti⁄2PrŸocﬁGuid
;

	@Usb2HostController.h

12 #i‚de‡
_USB2_HOSTCONTROLLER_H_


13 
	#_USB2_HOSTCONTROLLER_H_


	)

15 
	~<PrŸocﬁ/UsbIo.h
>

17 
	#EFI_USB2_HC_PROTOCOL_GUID
 \

	)

25 
_EFI_USB2_HC_PROTOCOL
 
	tEFI_USB2_HC_PROTOCOL
;

29 
UINT16
 
	mP‹tSètus
;

30 
UINT16
 
	mP‹tCh™geSètus
;

31 } 
	tEFI_USB_PORT_STATUS
;

36 
	#USB_PORT_STAT_CONNECTION
 0x0001

	)

37 
	#USB_PORT_STAT_ENABLE
 0x0002

	)

38 
	#USB_PORT_STAT_SUSPEND
 0x0004

	)

39 
	#USB_PORT_STAT_OVERCURRENT
 0x0008

	)

40 
	#USB_PORT_STAT_RESET
 0x0010

	)

41 
	#USB_PORT_STAT_POWER
 0x0100

	)

42 
	#USB_PORT_STAT_LOW_SPEED
 0x0200

	)

43 
	#USB_PORT_STAT_HIGH_SPEED
 0x0400

	)

44 
	#USB_PORT_STAT_SUPER_SPEED
 0x0800

	)

45 
	#USB_PORT_STAT_OWNER
 0x2000

	)

50 
	#USB_PORT_STAT_C_CONNECTION
 0x0001

	)

51 
	#USB_PORT_STAT_C_ENABLE
 0x0002

	)

52 
	#USB_PORT_STAT_C_SUSPEND
 0x0004

	)

53 
	#USB_PORT_STAT_C_OVERCURRENT
 0x0008

	)

54 
	#USB_PORT_STAT_C_RESET
 0x0010

	)

63 
	mEfiUsbP‹tE«bÀ
 = 1,

64 
	mEfiUsbP‹tSu•íd
 = 2,

65 
	mEfiUsbP‹tRe£t
 = 4,

66 
	mEfiUsbP‹tPowî
 = 8,

67 
	mEfiUsbP‹tOw√r
 = 13,

68 
	mEfiUsbP‹tC⁄√˘Ch™ge
 = 16,

69 
	mEfiUsbP‹tE«bÀCh™ge
 = 17,

70 
	mEfiUsbP‹tSu•ídCh™ge
 = 18,

71 
	mEfiUsbP‹tOvîCuºítCh™ge
 = 19,

72 
	mEfiUsbP‹tRe£tCh™ge
 = 20

73 } 
	tEFI_USB_PORT_FEATURE
;

75 
	#EFI_USB_SPEED_FULL
 0x0000

76 
	#EFI_USB_SPEED_LOW
 0x0001

77 
	#EFI_USB_SPEED_HIGH
 0x0002

78 
	#EFI_USB_SPEED_SUPER
 0x0003

79 

	)

81 
UINT8
 
	mTøn¶©‹HubAddªss
;

82 
UINT8
 
	mTøn¶©‹P‹tNumbî
;

83 } 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
;

105 
	gEFI_STATUS


106 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_GET_CAPABILITY
)(

107 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

108 
	tOUT
 
	tUINT8
 *
	tMaxS≥ed
,

109 
	tOUT
 
	tUINT8
 *
	tP‹tNumbî
,

110 
	tOUT
 
	tUINT8
 *
	tIs64BôC≠abÀ


113 
	#EFI_USB_HC_RESET_GLOBAL
 0x0001

	)

114 
	#EFI_USB_HC_RESET_HOST_CONTROLLER
 0x0002

	)

115 
	#EFI_USB_HC_RESET_GLOBAL_WITH_DEBUG
 0x0004

	)

116 
	#EFI_USB_HC_RESET_HOST_WITH_DEBUG
 0x0008

	)

136 
	gEFI_STATUS


137 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_RESET
)(

138 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

139 
	tIN
 
	tUINT16
 
	tAâribuãs


146 
	mEfiUsbHcSèãHÆt
,

156 
	mEfiUsbHcSèãO≥øti⁄Æ
,

164 
	mEfiUsbHcSèãSu•íd
,

174 
	mEfiUsbHcSèãMaximum


175 } 
	tEFI_USB_HC_STATE
;

191 
	gEFI_STATUS


192 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_GET_STATE
)(

193 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

194 
	tOUT
 
	tEFI_USB_HC_STATE
 *
	tSèã


210 
	gEFI_STATUS


211 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_SET_STATE
)(

212 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

213 
	tIN
 
	tEFI_USB_HC_STATE
 
	tSèã


246 
	gEFI_STATUS


247 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_CONTROL_TRANSFER
)(

248 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

249 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

250 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

251 
	tIN
 
	tUINTN
 
	tMaximumPackëLígth
,

252 
	tIN
 
	tEFI_USB_DEVICE_REQUEST
 *
	tReque°
,

253 
	tIN
 
	tEFI_USB_DATA_DIRECTION
 
	tTøns„rDúe˘i⁄
,

254 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
 
	tOPTIONAL
,

255 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
 
	tOPTIONAL
,

256 
	tIN
 
	tUINTN
 
	tTimeOut
,

257 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
,

258 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


261 
	#EFI_USB_MAX_BULK_BUFFER_NUM
 10

	)

293 
	gEFI_STATUS


294 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_BULK_TRANSFER
)(

295 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

296 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

297 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

298 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

299 
	tIN
 
	tUINTN
 
	tMaximumPackëLígth
,

300 
	tIN
 
	tUINT8
 
	tD©aBuf„rsNumbî
,

301 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
[
EFI_USB_MAX_BULK_BUFFER_NUM
],

302 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

303 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

304 
	tIN
 
	tUINTN
 
	tTimeOut
,

305 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
,

306 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


342 
	gEFI_STATUS


343 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER
)(

344 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

345 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

346 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

347 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

348 
	tIN
 
	tUINTN
 
	tMaxiumPackëLígth
,

349 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

350 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

351 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
 
	tOPTIONAL
,

352 
	tIN
 
	tUINTN
 
	tD©aLígth
 
	tOPTIONAL
,

353 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
 
	tOPTIONAL
,

354 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tCÆlBackFun˘i⁄
 
	tOPTIONAL
,

355 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


389 
	gEFI_STATUS


390 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_SYNC_INTERRUPT_TRANSFER
)(

391 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

392 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

393 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

394 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

395 
	tIN
 
	tUINTN
 
	tMaximumPackëLígth
,

396 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

397 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

398 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

399 
	tIN
 
	tUINTN
 
	tTimeOut
,

400 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
,

401 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


404 
	#EFI_USB_MAX_ISO_BUFFER_NUM
 7

	)

405 
	#EFI_USB_MAX_ISO_BUFFER_NUM1
 2

	)

465 
	gEFI_STATUS


466 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_ISOCHRONOUS_TRANSFER
)(

467 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

468 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

469 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

470 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

471 
	tIN
 
	tUINTN
 
	tMaximumPackëLígth
,

472 
	tIN
 
	tUINT8
 
	tD©aBuf„rsNumbî
,

473 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
[
EFI_USB_MAX_ISO_BUFFER_NUM
],

474 
	tIN
 
	tUINTN
 
	tD©aLígth
,

475 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
,

476 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


540 
	gEFI_STATUS


541 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_ASYNC_ISOCHRONOUS_TRANSFER
)(

542 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

543 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

544 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

545 
	tIN
 
	tUINT8
 
	tDevi˚S≥ed
,

546 
	tIN
 
	tUINTN
 
	tMaximumPackëLígth
,

547 
	tIN
 
	tUINT8
 
	tD©aBuf„rsNumbî
,

548 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
[
EFI_USB_MAX_ISO_BUFFER_NUM
],

549 
	tIN
 
	tUINTN
 
	tD©aLígth
,

550 
	tIN
 
	tEFI_USB2_HC_TRANSACTION_TRANSLATOR
 *
	tTøn¶©‹
,

551 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tIsochr⁄ousCÆlBack
,

552 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


569 
	gEFI_STATUS


570 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_GET_ROOTHUB_PORT_STATUS
)(

571 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

572 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

573 
	tOUT
 
	tEFI_USB_PORT_STATUS
 *
	tP‹tSètus


590 
	gEFI_STATUS


591 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_SET_ROOTHUB_PORT_FEATURE
)(

592 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

593 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

594 
	tIN
 
	tEFI_USB_PORT_FEATURE
 
	tP‹tFótuª


611 
	gEFI_STATUS


612 (
	tEFIAPI
 *
	tEFI_USB2_HC_PROTOCOL_CLEAR_ROOTHUB_PORT_FEATURE
)(

613 
	tIN
 
	tEFI_USB2_HC_PROTOCOL
 *
	tThis
,

614 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

615 
	tIN
 
	tEFI_USB_PORT_FEATURE
 
	tP‹tFótuª


626 
	s_EFI_USB2_HC_PROTOCOL
 {

627 
EFI_USB2_HC_PROTOCOL_GET_CAPABILITY
 
	mGëC≠abûôy
;

628 
EFI_USB2_HC_PROTOCOL_RESET
 
	mRe£t
;

629 
EFI_USB2_HC_PROTOCOL_GET_STATE
 
	mGëSèã
;

630 
EFI_USB2_HC_PROTOCOL_SET_STATE
 
	mSëSèã
;

631 
EFI_USB2_HC_PROTOCOL_CONTROL_TRANSFER
 
	mC⁄åﬁTøns„r
;

632 
EFI_USB2_HC_PROTOCOL_BULK_TRANSFER
 
	mBulkTøns„r
;

633 
EFI_USB2_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER
 
	mAsyncI¡îru±Tøns„r
;

634 
EFI_USB2_HC_PROTOCOL_SYNC_INTERRUPT_TRANSFER
 
	mSyncI¡îru±Tøns„r
;

635 
EFI_USB2_HC_PROTOCOL_ISOCHRONOUS_TRANSFER
 
	mIsochr⁄ousTøns„r
;

636 
EFI_USB2_HC_PROTOCOL_ASYNC_ISOCHRONOUS_TRANSFER
 
	mAsyncIsochr⁄ousTøns„r
;

637 
EFI_USB2_HC_PROTOCOL_GET_ROOTHUB_PORT_STATUS
 
	mGëRoŸHubP‹tSètus
;

638 
EFI_USB2_HC_PROTOCOL_SET_ROOTHUB_PORT_FEATURE
 
	mSëRoŸHubP‹tFótuª
;

639 
EFI_USB2_HC_PROTOCOL_CLEAR_ROOTHUB_PORT_FEATURE
 
	mCÀ¨RoŸHubP‹tFótuª
;

646 
UINT16
 
	mMaj‹Revisi⁄
;

653 
UINT16
 
	mMö‹Revisi⁄
;

656 
EFI_GUID
 
gEfiUsb2HcPrŸocﬁGuid
;

	@UsbFunctionIo.h

22 #i‚de‡
__USB_FUNCTION_IO_H__


23 
	#__USB_FUNCTION_IO_H__


	)

25 
	~<PrŸocﬁ/UsbIo.h
>

27 
	#EFI_USBFN_IO_PROTOCOL_GUID
 \

	)

32 
_EFI_USBFN_IO_PROTOCOL
 
	tEFI_USBFN_IO_PROTOCOL
;

34 
	#EFI_USBFN_IO_PROTOCOL_REVISION
 0x00010001

	)

36 
	e_EFI_USBFN_PORT_TYPE
 {

37 
	mEfiUsbUnknownP‹t
 = 0,

38 
	mEfiUsbSènd¨dDown°ªamP‹t
,

39 
	mEfiUsbCh¨gögDown°ªamP‹t
,

40 
	mEfiUsbDediˇãdCh¨gögP‹t
,

41 
	mEfiUsbInvÆidDediˇãdCh¨gögP‹t


42 } 
	tEFI_USBFN_PORT_TYPE
;

45 
EFI_USB_INTERFACE_DESCRIPTOR
 *
	mI¡îÁ˚Des¸ùt‹
;

46 
EFI_USB_ENDPOINT_DESCRIPTOR
 **
	mEndpoötDes¸ùt‹TabÀ
;

47 } 
	tEFI_USB_INTERFACE_INFO
;

50 
EFI_USB_CONFIG_DESCRIPTOR
 *
	mC⁄figDes¸ùt‹
;

51 
EFI_USB_INTERFACE_INFO
 **
	mI¡îÁ˚InfoTabÀ
;

52 } 
	tEFI_USB_CONFIG_INFO
;

55 
EFI_USB_DEVICE_DESCRIPTOR
 *
	mDevi˚Des¸ùt‹
;

56 
EFI_USB_CONFIG_INFO
 **
	mC⁄figInfoTabÀ
;

57 } 
	tEFI_USB_DEVICE_INFO
;

59 
	e_EFI_USB_ENDPOINT_TYPE
 {

60 
	mUsbEndpoötC⁄åﬁ
 = 0x00,

62 
	mUsbEndpoötBulk
 = 0x02,

64 } 
	tEFI_USB_ENDPOINT_TYPE
;

66 
	e_EFI_USBFN_DEVICE_INFO_ID
 {

67 
	mEfiUsbDevi˚InfoUnknown
 = 0,

68 
	mEfiUsbDevi˚InfoSîülNumbî
,

69 
	mEfiUsbDevi˚InfoM™uÁ˘uªrName
,

70 
	mEfiUsbDevi˚InfoProdu˘Name


71 } 
	tEFI_USBFN_DEVICE_INFO_ID
;

73 
	e_EFI_USBFN_ENDPOINT_DIRECTION
 {

74 
	mEfiUsbEndpoötDúe˘i⁄Ho°Out
 = 0,

75 
	mEfiUsbEndpoötDúe˘i⁄Ho°In
,

76 
	mEfiUsbEndpoötDúe˘i⁄Devi˚Tx
 = 
EfiUsbEndpoötDúe˘i⁄Ho°In
,

77 
	mEfiUsbEndpoötDúe˘i⁄Devi˚Rx
 = 
EfiUsbEndpoötDúe˘i⁄Ho°Out


78 } 
	tEFI_USBFN_ENDPOINT_DIRECTION
;

80 
	e_EFI_USBFN_MESSAGE
 {

84 
	mEfiUsbMsgN⁄e
 = 0,

89 
	mEfiUsbMsgSëupPackë
,

97 
	mEfiUsbMsgEndpoötSètusCh™gedRx
,

105 
	mEfiUsbMsgEndpoötSètusCh™gedTx
,

109 
	mEfiUsbMsgBusEvítDëach
,

113 
	mEfiUsbMsgBusEvítAâach
,

117 
	mEfiUsbMsgBusEvítRe£t
,

121 
	mEfiUsbMsgBusEvítSu•íd
,

125 
	mEfiUsbMsgBusEvítResume
,

130 
	mEfiUsbMsgBusEvítS≥ed


131 } 
	tEFI_USBFN_MESSAGE
;

133 
	e_EFI_USBFN_TRANSFER_STATUS
 {

134 
	mUsbTøns„rSètusUnknown
 = 0,

135 
	mUsbTøns„rSètusCom∂ëe
,

136 
	mUsbTøns„rSètusAb‹ãd
,

137 
	mUsbTøns„rSètusA˘ive
,

138 
	mUsbTøns„rSètusN⁄e


139 } 
	tEFI_USBFN_TRANSFER_STATUS
;

141 
	s_EFI_USBFN_TRANSFER_RESULT
 {

142 
UINTN
 
	mByãsTøns„ºed
;

143 
EFI_USBFN_TRANSFER_STATUS
 
	mTøns„rSètus
;

144 
UINT8
 
	mEndpoötIndex
;

145 
EFI_USBFN_ENDPOINT_DIRECTION
 
	mDúe˘i⁄
;

146 
VOID
 *
	mBuf„r
;

147 } 
	tEFI_USBFN_TRANSFER_RESULT
;

149 
	e_EFI_USB_BUS_SPEED
 {

150 
	mUsbBusS≥edUnknown
 = 0,

151 
	mUsbBusS≥edLow
,

152 
	mUsbBusS≥edFuŒ
,

153 
	mUsbBusS≥edHigh
,

154 
	mUsbBusS≥edSu≥r
,

155 
	mUsbBusS≥edMaximum
 = 
UsbBusS≥edSu≥r


156 } 
	tEFI_USB_BUS_SPEED
;

158 
	u_EFI_USBFN_MESSAGE_PAYLOAD
 {

159 
EFI_USB_DEVICE_REQUEST
 
	mudr
;

160 
EFI_USBFN_TRANSFER_RESULT
 
	muå
;

161 
EFI_USB_BUS_SPEED
 
	mubs
;

162 } 
	tEFI_USBFN_MESSAGE_PAYLOAD
;

164 
	e_EFI_USBFN_POLICY_TYPE
 {

165 
	mEfiUsbPﬁicyUndeföed
 = 0,

166 
	mEfiUsbPﬁicyMaxTønß˘i⁄Size
,

167 
	mEfiUsbPﬁicyZîoLígthTîmö©i⁄Suµ‹t
,

168 
	mEfiUsbPﬁicyZîoLígthTîmö©i⁄


169 } 
	tEFI_USBFN_POLICY_TYPE
;

186 
	gEFI_STATUS


187 (
	tEFIAPI
 *
	tEFI_USBFN_IO_DETECT_PORT
) (

188 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

189 
	tOUT
 
	tEFI_USBFN_PORT_TYPE
 *
	tP‹tTy≥


216 
	gEFI_STATUS


217 (
	tEFIAPI
 *
	tEFI_USBFN_IO_CONFIGURE_ENABLE_ENDPOINTS
) (

218 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

219 
	tOUT
 
	tEFI_USB_DEVICE_INFO
 *
	tDevi˚Info


246 
	gEFI_STATUS


247 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_ENDPOINT_MAXPACKET_SIZE
) (

248 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

249 
	tIN
 
	tEFI_USB_ENDPOINT_TYPE
 
	tEndpoötTy≥
,

250 
	tIN
 
	tEFI_USB_BUS_SPEED
 
	tBusS≥ed
,

251 
	tOUT
 
	tUINT16
 *
	tMaxPackëSize


283 
	gEFI_STATUS


284 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_DEVICE_INFO
) (

285 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

286 
	tIN
 
	tEFI_USBFN_DEVICE_INFO_ID
 
	tId
,

287 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

288 
	tOUT
 
	tVOID
 *
	tBuf„r
 
	tOPTIONAL


304 
	gEFI_STATUS


305 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_VENDOR_ID_PRODUCT_ID
) (

306 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

307 
	tOUT
 
	tUINT16
 *
	tVid
,

308 
	tOUT
 
	tUINT16
 *
	tPid


330 
	gEFI_STATUS


331 (
	tEFIAPI
 *
	tEFI_USBFN_IO_ABORT_TRANSFER
) (

332 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

333 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

334 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄


357 
	gEFI_STATUS


358 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_ENDPOINT_STALL_STATE
) (

359 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

360 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

361 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄
,

362 
	tIN
 
	tOUT
 
	tBOOLEAN
 *
	tSèã


386 
	gEFI_STATUS


387 (
	tEFIAPI
 *
	tEFI_USBFN_IO_SET_ENDPOINT_STALL_STATE
) (

388 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

389 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

390 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄
,

391 
	tIN
 
	tOUT
 
	tBOOLEAN
 *
	tSèã


421 
	gEFI_STATUS


422 (
	tEFIAPI
 *
	tEFI_USBFN_IO_EVENTHANDLER
) (

423 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

424 
	tOUT
 
	tEFI_USBFN_MESSAGE
 *
	tMesßge
,

425 
	tIN
 
	tOUT
 
	tUINTN
 *
	tPaylﬂdSize
,

426 
	tOUT
 
	tEFI_USBFN_MESSAGE_PAYLOAD
 *
	tPaylﬂd


469 
	gEFI_STATUS


470 (
	tEFIAPI
 *
	tEFI_USBFN_IO_TRANSFER
) (

471 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

472 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

473 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄
,

474 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

475 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


495 
	gEFI_STATUS


496 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_MAXTRANSFER_SIZE
) (

497 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

498 
	tOUT
 
	tUINTN
 *
	tMaxTøns„rSize


523 
	gEFI_STATUS


524 (
	tEFIAPI
 *
	tEFI_USBFN_IO_ALLOCATE_TRANSFER_BUFFER
) (

525 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

526 
	tIN
 
	tUINTN
 
	tSize
,

527 
	tOUT
 
	tVOID
 **
	tBuf„r


546 
	gEFI_STATUS


547 (
	tEFIAPI
 *
	tEFI_USBFN_IO_FREE_TRANSFER_BUFFER
) (

548 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

549 
	tIN
 
	tVOID
 *
	tBuf„r


565 
	gEFI_STATUS


566 (
	tEFIAPI
 *
	tEFI_USBFN_IO_START_CONTROLLER
) (

567 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis


581 
	gEFI_STATUS


582 (
	tEFIAPI
 *
	tEFI_USBFN_IO_STOP_CONTROLLER
) (

583 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis


610 
	gEFI_STATUS


611 (
	tEFIAPI
 *
	tEFI_USBFN_IO_SET_ENDPOINT_POLICY
) (

612 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

613 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

614 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄
,

615 
	tIN
 
	tEFI_USBFN_POLICY_TYPE
 
	tPﬁicyTy≥
,

616 
	tIN
 
	tUINTN
 
	tBuf„rSize
,

617 
	tIN
 
	tVOID
 *
	tBuf„r


646 
	gEFI_STATUS


647 (
	tEFIAPI
 *
	tEFI_USBFN_IO_GET_ENDPOINT_POLICY
) (

648 
	tIN
 
	tEFI_USBFN_IO_PROTOCOL
 *
	tThis
,

649 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

650 
	tIN
 
	tEFI_USBFN_ENDPOINT_DIRECTION
 
	tDúe˘i⁄
,

651 
	tIN
 
	tEFI_USBFN_POLICY_TYPE
 
	tPﬁicyTy≥
,

652 
	tIN
 
	tOUT
 
	tUINTN
 *
	tBuf„rSize
,

653 
	tIN
 
	tOUT
 
	tVOID
 *
	tBuf„r


660 
	s_EFI_USBFN_IO_PROTOCOL
 {

661 
UINT32
 
	mRevisi⁄
;

662 
EFI_USBFN_IO_DETECT_PORT
 
	mDëe˘P‹t
;

663 
EFI_USBFN_IO_CONFIGURE_ENABLE_ENDPOINTS
 
	mC⁄figuªE«bÀEndpoöts
;

664 
EFI_USBFN_IO_GET_ENDPOINT_MAXPACKET_SIZE
 
	mGëEndpoötMaxPackëSize
;

665 
EFI_USBFN_IO_GET_DEVICE_INFO
 
	mGëDevi˚Info
;

666 
EFI_USBFN_IO_GET_VENDOR_ID_PRODUCT_ID
 
	mGëVíd‹IdProdu˘Id
;

667 
EFI_USBFN_IO_ABORT_TRANSFER
 
	mAb‹tTøns„r
;

668 
EFI_USBFN_IO_GET_ENDPOINT_STALL_STATE
 
	mGëEndpoötSèŒSèã
;

669 
EFI_USBFN_IO_SET_ENDPOINT_STALL_STATE
 
	mSëEndpoötSèŒSèã
;

670 
EFI_USBFN_IO_EVENTHANDLER
 
	mEvítH™dÀr
;

671 
EFI_USBFN_IO_TRANSFER
 
	mTøns„r
;

672 
EFI_USBFN_IO_GET_MAXTRANSFER_SIZE
 
	mGëMaxTøns„rSize
;

673 
EFI_USBFN_IO_ALLOCATE_TRANSFER_BUFFER
 
	mAŒoˇãTøns„rBuf„r
;

674 
EFI_USBFN_IO_FREE_TRANSFER_BUFFER
 
	mFªeTøns„rBuf„r
;

675 
EFI_USBFN_IO_START_CONTROLLER
 
	mSèπC⁄åﬁÀr
;

676 
EFI_USBFN_IO_STOP_CONTROLLER
 
	mSt›C⁄åﬁÀr
;

677 
EFI_USBFN_IO_SET_ENDPOINT_POLICY
 
	mSëEndpoötPﬁicy
;

678 
EFI_USBFN_IO_GET_ENDPOINT_POLICY
 
	mGëEndpoötPﬁicy
;

681 
EFI_GUID
 
gEfiUsbFun˘i⁄IoPrŸocﬁGuid
;

	@UsbHostController.h

13 #i‚de‡
_USB_HOSTCONTROLLER_H_


14 
	#_USB_HOSTCONTROLLER_H_


	)

16 
	~<PrŸocﬁ/Usb2Ho°C⁄åﬁÀr.h
>

18 
	#EFI_USB_HC_PROTOCOL_GUID
 \

	)

26 
_EFI_USB_HC_PROTOCOL
 
	tEFI_USB_HC_PROTOCOL
;

46 
	gEFI_STATUS


47 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_RESET
)(

48 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

49 
	tIN
 
	tUINT16
 
	tAâribuãs


66 
	gEFI_STATUS


67 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_GET_STATE
)(

68 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

69 
	tOUT
 
	tEFI_USB_HC_STATE
 *
	tSèã


85 
	gEFI_STATUS


86 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_SET_STATE
)(

87 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

88 
	tIN
 
	tEFI_USB_HC_STATE
 
	tSèã


123 
	gEFI_STATUS


124 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_CONTROL_TRANSFER
)(

125 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

126 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

127 
	tIN
 
	tBOOLEAN
 
	tIsSlowDevi˚
,

128 
	tIN
 
	tUINT8
 
	tMaximumPackëLígth
,

129 
	tIN
 
	tEFI_USB_DEVICE_REQUEST
 *
	tReque°
,

130 
	tIN
 
	tEFI_USB_DATA_DIRECTION
 
	tTøns„rDúe˘i⁄
,

131 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
 
	tOPTIONAL
,

132 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
 
	tOPTIONAL
,

133 
	tIN
 
	tUINTN
 
	tTimeOut
,

134 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


169 
	gEFI_STATUS


170 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_BULK_TRANSFER
)(

171 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

172 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

173 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

174 
	tIN
 
	tUINT8
 
	tMaximumPackëLígth
,

175 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

176 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

177 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

178 
	tIN
 
	tUINTN
 
	tTimeOut
,

179 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


225 
	gEFI_STATUS


226 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER
)(

227 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

228 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

229 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

230 
	tIN
 
	tBOOLEAN
 
	tIsSlowDevi˚
,

231 
	tIN
 
	tUINT8
 
	tMaxiumPackëLígth
,

232 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

233 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

234 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
 
	tOPTIONAL
,

235 
	tIN
 
	tUINTN
 
	tD©aLígth
 
	tOPTIONAL
,

236 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tCÆlBackFun˘i⁄
 
	tOPTIONAL
,

237 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


277 
	gEFI_STATUS


278 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_SYNC_INTERRUPT_TRANSFER
)(

279 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

280 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

281 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

282 
	tIN
 
	tBOOLEAN
 
	tIsSlowDevi˚
,

283 
	tIN
 
	tUINT8
 
	tMaximumPackëLígth
,

284 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

285 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

286 
	tIN
 
	tOUT
 
	tUINT8
 *
	tD©aToggÀ
,

287 
	tIN
 
	tUINTN
 
	tTimeOut
,

288 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


320 
	gEFI_STATUS


321 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_ISOCHRONOUS_TRANSFER
)(

322 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

323 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

324 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

325 
	tIN
 
	tUINT8
 
	tMaximumPackëLígth
,

326 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

327 
	tIN
 
	tUINTN
 
	tD©aLígth
,

328 
	tOUT
 
	tUINT32
 *
	tTøns„rResu…


363 
	gEFI_STATUS


364 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_ASYNC_ISOCHRONOUS_TRANSFER
)(

365 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

366 
	tIN
 
	tUINT8
 
	tDevi˚Addªss
,

367 
	tIN
 
	tUINT8
 
	tEndPoötAddªss
,

368 
	tIN
 
	tUINT8
 
	tMaximumPackëLígth
,

369 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

370 
	tIN
 
	tUINTN
 
	tD©aLígth
,

371 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tIsochr⁄ousCÆlBack
,

372 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


387 
	gEFI_STATUS


388 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_GET_ROOTHUB_PORT_NUMBER
)(

389 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

390 
	tOUT
 
	tUINT8
 *
	tP‹tNumbî


409 
	gEFI_STATUS


410 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_GET_ROOTHUB_PORT_STATUS
)(

411 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

412 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

413 
	tOUT
 
	tEFI_USB_PORT_STATUS
 *
	tP‹tSètus


433 
	gEFI_STATUS


434 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_SET_ROOTHUB_PORT_FEATURE
)(

435 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

436 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

437 
	tIN
 
	tEFI_USB_PORT_FEATURE
 
	tP‹tFótuª


457 
	gEFI_STATUS


458 (
	tEFIAPI
 *
	tEFI_USB_HC_PROTOCOL_CLEAR_ROOTHUB_PORT_FEATURE
)(

459 
	tIN
 
	tEFI_USB_HC_PROTOCOL
 *
	tThis
,

460 
	tIN
 
	tUINT8
 
	tP‹tNumbî
,

461 
	tIN
 
	tEFI_USB_PORT_FEATURE
 
	tP‹tFótuª


472 
	s_EFI_USB_HC_PROTOCOL
 {

473 
EFI_USB_HC_PROTOCOL_RESET
 
	mRe£t
;

474 
EFI_USB_HC_PROTOCOL_GET_STATE
 
	mGëSèã
;

475 
EFI_USB_HC_PROTOCOL_SET_STATE
 
	mSëSèã
;

476 
EFI_USB_HC_PROTOCOL_CONTROL_TRANSFER
 
	mC⁄åﬁTøns„r
;

477 
EFI_USB_HC_PROTOCOL_BULK_TRANSFER
 
	mBulkTøns„r
;

478 
EFI_USB_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER
 
	mAsyncI¡îru±Tøns„r
;

479 
EFI_USB_HC_PROTOCOL_SYNC_INTERRUPT_TRANSFER
 
	mSyncI¡îru±Tøns„r
;

480 
EFI_USB_HC_PROTOCOL_ISOCHRONOUS_TRANSFER
 
	mIsochr⁄ousTøns„r
;

481 
EFI_USB_HC_PROTOCOL_ASYNC_ISOCHRONOUS_TRANSFER
 
	mAsyncIsochr⁄ousTøns„r
;

482 
EFI_USB_HC_PROTOCOL_GET_ROOTHUB_PORT_NUMBER
 
	mGëRoŸHubP‹tNumbî
;

483 
EFI_USB_HC_PROTOCOL_GET_ROOTHUB_PORT_STATUS
 
	mGëRoŸHubP‹tSètus
;

484 
EFI_USB_HC_PROTOCOL_SET_ROOTHUB_PORT_FEATURE
 
	mSëRoŸHubP‹tFótuª
;

485 
EFI_USB_HC_PROTOCOL_CLEAR_ROOTHUB_PORT_FEATURE
 
	mCÀ¨RoŸHubP‹tFótuª
;

491 
UINT16
 
	mMaj‹Revisi⁄
;

497 
UINT16
 
	mMö‹Revisi⁄
;

500 
EFI_GUID
 
gEfiUsbHcPrŸocﬁGuid
;

	@UsbIo.h

13 #i‚de‡
__USB_IO_H__


14 
	#__USB_IO_H__


	)

16 
	~<Indu°rySènd¨d/Usb.h
>

21 
	#EFI_USB_IO_PROTOCOL_GUID
 \

	)

26 
_EFI_USB_IO_PROTOCOL
 
	tEFI_USB_IO_PROTOCOL
;

35 
USB_DEVICE_REQUEST
 
	tEFI_USB_DEVICE_REQUEST
;

36 
USB_DEVICE_DESCRIPTOR
 
	tEFI_USB_DEVICE_DESCRIPTOR
;

37 
USB_CONFIG_DESCRIPTOR
 
	tEFI_USB_CONFIG_DESCRIPTOR
;

38 
USB_INTERFACE_DESCRIPTOR
 
	tEFI_USB_INTERFACE_DESCRIPTOR
;

39 
USB_ENDPOINT_DESCRIPTOR
 
	tEFI_USB_ENDPOINT_DESCRIPTOR
;

45 
	mEfiUsbD©aIn
,

46 
	mEfiUsbD©aOut
,

47 
	mEfiUsbNoD©a


48 } 
	tEFI_USB_DATA_DIRECTION
;

53 
	#EFI_USB_NOERROR
 0x00

	)

54 
	#EFI_USB_ERR_NOTEXECUTE
 0x01

	)

55 
	#EFI_USB_ERR_STALL
 0x02

	)

56 
	#EFI_USB_ERR_BUFFER
 0x04

	)

57 
	#EFI_USB_ERR_BABBLE
 0x08

	)

58 
	#EFI_USB_ERR_NAK
 0x10

	)

59 
	#EFI_USB_ERR_CRC
 0x20

	)

60 
	#EFI_USB_ERR_TIMEOUT
 0x40

	)

61 
	#EFI_USB_ERR_BITSTUFF
 0x80

	)

62 
	#EFI_USB_ERR_SYSTEM
 0x100

	)

79 
	gEFI_STATUS


80 (
	tEFIAPI
 *
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
)(

81 
	tIN
 
	tVOID
 *
	tD©a
,

82 
	tIN
 
	tUINTN
 
	tD©aLígth
,

83 
	tIN
 
	tVOID
 *
	tC⁄ãxt
,

84 
	tIN
 
	tUINT32
 
	tSètus


115 
	gEFI_STATUS


116 (
	tEFIAPI
 *
	tEFI_USB_IO_CONTROL_TRANSFER
)(

117 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

118 
	tIN
 
	tEFI_USB_DEVICE_REQUEST
 *
	tReque°
,

119 
	tIN
 
	tEFI_USB_DATA_DIRECTION
 
	tDúe˘i⁄
,

120 
	tIN
 
	tUINT32
 
	tTimeout
,

121 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
 
	tOPTIONAL
,

122 
	tIN
 
	tUINTN
 
	tD©aLígth
 
	tOPTIONAL
,

123 
	tOUT
 
	tUINT32
 *
	tSètus


158 
	gEFI_STATUS


159 (
	tEFIAPI
 *
	tEFI_USB_IO_BULK_TRANSFER
)(

160 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

161 
	tIN
 
	tUINT8
 
	tDevi˚Endpoöt
,

162 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

163 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

164 
	tIN
 
	tUINTN
 
	tTimeout
,

165 
	tOUT
 
	tUINT32
 *
	tSètus


203 
	gEFI_STATUS


204 (
	tEFIAPI
 *
	tEFI_USB_IO_ASYNC_INTERRUPT_TRANSFER
)(

205 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

206 
	tIN
 
	tUINT8
 
	tDevi˚Endpoöt
,

207 
	tIN
 
	tBOOLEAN
 
	tIsNewTøns„r
,

208 
	tIN
 
	tUINTN
 
	tPﬁlögI¡îvÆ
 
	tOPTIONAL
,

209 
	tIN
 
	tUINTN
 
	tD©aLígth
 
	tOPTIONAL
,

210 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tI¡îru±CÆlBack
 
	tOPTIONAL
,

211 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


243 
	gEFI_STATUS


244 (
	tEFIAPI
 *
	tEFI_USB_IO_SYNC_INTERRUPT_TRANSFER
)(

245 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

246 
	tIN
 
	tUINT8
 
	tDevi˚Endpoöt
,

247 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

248 
	tIN
 
	tOUT
 
	tUINTN
 *
	tD©aLígth
,

249 
	tIN
 
	tUINTN
 
	tTimeout
,

250 
	tOUT
 
	tUINT32
 *
	tSètus


279 
	gEFI_STATUS


280 (
	tEFIAPI
 *
	tEFI_USB_IO_ISOCHRONOUS_TRANSFER
)(

281 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

282 
	tIN
 
	tUINT8
 
	tDevi˚Endpoöt
,

283 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

284 
	tIN
 
	tUINTN
 
	tD©aLígth
,

285 
	tOUT
 
	tUINT32
 *
	tSètus


316 
	gEFI_STATUS


317 (
	tEFIAPI
 *
	tEFI_USB_IO_ASYNC_ISOCHRONOUS_TRANSFER
)(

318 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

319 
	tIN
 
	tUINT8
 
	tDevi˚Endpoöt
,

320 
	tIN
 
	tOUT
 
	tVOID
 *
	tD©a
,

321 
	tIN
 
	tUINTN
 
	tD©aLígth
,

322 
	tIN
 
	tEFI_ASYNC_USB_TRANSFER_CALLBACK
 
	tIsochr⁄ousCÆlBack
,

323 
	tIN
 
	tVOID
 *
	tC⁄ãxt
 
	tOPTIONAL


338 
	gEFI_STATUS


339 (
	tEFIAPI
 *
	tEFI_USB_IO_PORT_RESET
)(

340 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis


355 
	gEFI_STATUS


356 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_DEVICE_DESCRIPTOR
)(

357 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

358 
	tOUT
 
	tEFI_USB_DEVICE_DESCRIPTOR
 *
	tDevi˚Des¸ùt‹


374 
	gEFI_STATUS


375 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_CONFIG_DESCRIPTOR
)(

376 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

377 
	tOUT
 
	tEFI_USB_CONFIG_DESCRIPTOR
 *
	tC⁄figuøti⁄Des¸ùt‹


394 
	gEFI_STATUS


395 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_INTERFACE_DESCRIPTOR
)(

396 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

397 
	tOUT
 
	tEFI_USB_INTERFACE_DESCRIPTOR
 *
	tI¡îÁ˚Des¸ùt‹


415 
	gEFI_STATUS


416 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_ENDPOINT_DESCRIPTOR
)(

417 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

418 
	tIN
 
	tUINT8
 
	tEndpoötIndex
,

419 
	tOUT
 
	tEFI_USB_ENDPOINT_DESCRIPTOR
 *
	tEndpoötDes¸ùt‹


440 
	gEFI_STATUS


441 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_STRING_DESCRIPTOR
)(

442 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

443 
	tIN
 
	tUINT16
 
	tL™gID
,

444 
	tIN
 
	tUINT8
 
	tSåögID
,

445 
	tOUT
 
	tCHAR16
 **
	tSåög


463 
	gEFI_STATUS


464 (
	tEFIAPI
 *
	tEFI_USB_IO_GET_SUPPORTED_LANGUAGE
)(

465 
	tIN
 
	tEFI_USB_IO_PROTOCOL
 *
	tThis
,

466 
	tOUT
 
	tUINT16
 **
	tL™gIDTabÀ
,

467 
	tOUT
 
	tUINT16
 *
	tTabÀSize


477 
	s_EFI_USB_IO_PROTOCOL
 {

481 
EFI_USB_IO_CONTROL_TRANSFER
 
	mUsbC⁄åﬁTøns„r
;

482 
EFI_USB_IO_BULK_TRANSFER
 
	mUsbBulkTøns„r
;

483 
EFI_USB_IO_ASYNC_INTERRUPT_TRANSFER
 
	mUsbAsyncI¡îru±Tøns„r
;

484 
EFI_USB_IO_SYNC_INTERRUPT_TRANSFER
 
	mUsbSyncI¡îru±Tøns„r
;

485 
EFI_USB_IO_ISOCHRONOUS_TRANSFER
 
	mUsbIsochr⁄ousTøns„r
;

486 
EFI_USB_IO_ASYNC_ISOCHRONOUS_TRANSFER
 
	mUsbAsyncIsochr⁄ousTøns„r
;

491 
EFI_USB_IO_GET_DEVICE_DESCRIPTOR
 
	mUsbGëDevi˚Des¸ùt‹
;

492 
EFI_USB_IO_GET_CONFIG_DESCRIPTOR
 
	mUsbGëC⁄figDes¸ùt‹
;

493 
EFI_USB_IO_GET_INTERFACE_DESCRIPTOR
 
	mUsbGëI¡îÁ˚Des¸ùt‹
;

494 
EFI_USB_IO_GET_ENDPOINT_DESCRIPTOR
 
	mUsbGëEndpoötDes¸ùt‹
;

495 
EFI_USB_IO_GET_STRING_DESCRIPTOR
 
	mUsbGëSåögDes¸ùt‹
;

496 
EFI_USB_IO_GET_SUPPORTED_LANGUAGE
 
	mUsbGëSuµ‹ãdL™guages
;

501 
EFI_USB_IO_PORT_RESET
 
	mUsbP‹tRe£t
;

504 
EFI_GUID
 
gEfiUsbIoPrŸocﬁGuid
;

	@UserCredential.h

12 #i‚de‡
__USER_CREDENTIAL_H__


13 
	#__USER_CREDENTIAL_H__


	)

15 
	~<PrŸocﬁ/U£rM™agî.h
>

17 
	#EFI_USER_CREDENTIAL_PROTOCOL_GUID
 \

	)

22 
_EFI_USER_CREDENTIAL_PROTOCOL
 
	tEFI_USER_CREDENTIAL_PROTOCOL
;

44 
	gEFI_STATUS


45 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_ENROLL
)(

46 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

47 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r


71 
	gEFI_STATUS


72 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_FORM
)(

73 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

74 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

75 
	tOUT
 
	tEFI_GUID
 *
	tF‹mSëId
,

76 
	tOUT
 
	tEFI_FORM_ID
 *
	tF‹mId


100 
	gEFI_STATUS


101 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_TILE
)(

102 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

103 
	tIN
 
	tOUT
 
	tUINTN
 *
	tWidth
,

104 
	tIN
 
	tOUT
 
	tUINTN
 *
	tHeight
,

105 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

106 
	tOUT
 
	tEFI_IMAGE_ID
 *
	tImage


124 
	gEFI_STATUS


125 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_TITLE
)(

126 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

127 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

128 
	tOUT
 
	tEFI_STRING_ID
 *
	tSåög


152 
	gEFI_STATUS


153 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_USER
)(

154 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

155 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

156 
	tOUT
 
	tEFI_USER_INFO_IDENTIFIER
 *
	tIdítifõr


173 
	gEFI_STATUS


174 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_SELECT
)(

175 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

176 
	tOUT
 
	tEFI_CREDENTIAL_LOGON_FLAGS
 *
	tAutoLog⁄


189 
	gEFI_STATUS


190 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_DESELECT
)(

191 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis


207 
	gEFI_STATUS


208 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_DEFAULT
)(

209 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

210 
	tOUT
 
	tEFI_CREDENTIAL_LOGON_FLAGS
 *
	tAutoLog⁄


234 
	gEFI_STATUS


235 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_GET_INFO
)(

236 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

237 
	tIN
 
	tEFI_USER_INFO_HANDLE
 
	tU£rInfo
,

238 
	tOUT
 
	tEFI_USER_INFO
 *
	tInfo
,

239 
	tIN
 
	tOUT
 
	tUINTN
 *
	tInfoSize


259 
	gEFI_STATUS


260 (
	tEFIAPI
 *
	tEFI_CREDENTIAL_GET_NEXT_INFO
)(

261 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL_PROTOCOL
 *
	tThis
,

262 
	tIN
 
	tOUT
 
	tEFI_USER_INFO_HANDLE
 *
	tU£rInfo


268 
	s_EFI_USER_CREDENTIAL_PROTOCOL
 {

269 
EFI_GUID
 
	mIdítifõr
;

270 
EFI_GUID
 
	mTy≥
;

271 
EFI_CREDENTIAL_ENROLL
 
	mEƒﬁl
;

272 
EFI_CREDENTIAL_FORM
 
	mF‹m
;

273 
EFI_CREDENTIAL_TILE
 
	mTûe
;

274 
EFI_CREDENTIAL_TITLE
 
	mTôÀ
;

275 
EFI_CREDENTIAL_USER
 
	mU£r
;

276 
EFI_CREDENTIAL_SELECT
 
	mSñe˘
;

277 
EFI_CREDENTIAL_DESELECT
 
	mDe£À˘
;

278 
EFI_CREDENTIAL_DEFAULT
 
	mDeÁu…
;

279 
EFI_CREDENTIAL_GET_INFO
 
	mGëInfo
;

280 
EFI_CREDENTIAL_GET_NEXT_INFO
 
	mGëNextInfo
;

281 
EFI_CREDENTIAL_CAPABILITIES
 
	mC≠abûôõs
;

284 
EFI_GUID
 
gEfiU£rCªdítülPrŸocﬁGuid
;

	@UserCredential2.h

11 #i‚de‡
__USER_CREDENTIAL2_H__


12 
	#__USER_CREDENTIAL2_H__


	)

14 
	~<PrŸocﬁ/U£rM™agî.h
>

16 
	#EFI_USER_CREDENTIAL2_PROTOCOL_GUID
 \

	)

21 
_EFI_USER_CREDENTIAL2_PROTOCOL
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
;

42 
	gEFI_STATUS


43 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_ENROLL
)(

44 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

45 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r


69 
	gEFI_STATUS


70 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_FORM
)(

71 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

72 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

73 
	tOUT
 
	tEFI_GUID
 *
	tF‹mSëId
,

74 
	tOUT
 
	tEFI_FORM_ID
 *
	tF‹mId


98 
	gEFI_STATUS


99 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_TILE
)(

100 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

101 
	tIN
 
	tOUT
 
	tUINTN
 *
	tWidth
,

102 
	tIN
 
	tOUT
 
	tUINTN
 *
	tHeight
,

103 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

104 
	tOUT
 
	tEFI_IMAGE_ID
 *
	tImage


122 
	gEFI_STATUS


123 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_TITLE
)(

124 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

125 
	tOUT
 
	tEFI_HII_HANDLE
 *
	tHii
,

126 
	tOUT
 
	tEFI_STRING_ID
 *
	tSåög


150 
	gEFI_STATUS


151 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_USER
)(

152 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

153 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

154 
	tOUT
 
	tEFI_USER_INFO_IDENTIFIER
 *
	tIdítifõr


171 
	gEFI_STATUS


172 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_SELECT
)(

173 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

174 
	tOUT
 
	tEFI_CREDENTIAL_LOGON_FLAGS
 *
	tAutoLog⁄


187 
	gEFI_STATUS


188 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_DESELECT
)(

189 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis


205 
	gEFI_STATUS


206 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_DEFAULT
)(

207 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

208 
	tOUT
 
	tEFI_CREDENTIAL_LOGON_FLAGS
 *
	tAutoLog⁄


232 
	gEFI_STATUS


233 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_GET_INFO
)(

234 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

235 
	tIN
 
	tEFI_USER_INFO_HANDLE
 
	tU£rInfo
,

236 
	tOUT
 
	tEFI_USER_INFO
 *
	tInfo
,

237 
	tIN
 
	tOUT
 
	tUINTN
 *
	tInfoSize


257 
	gEFI_STATUS


258 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_GET_NEXT_INFO
)(

259 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

260 
	tIN
 
	tOUT
 
	tEFI_USER_INFO_HANDLE
 *
	tU£rInfo


280 
	gEFI_STATUS


281 (
	tEFIAPI
 *
	tEFI_CREDENTIAL2_DELETE
)(

282 
	tIN
 
	tCONST
 
	tEFI_USER_CREDENTIAL2_PROTOCOL
 *
	tThis
,

283 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r


289 
	s_EFI_USER_CREDENTIAL2_PROTOCOL
 {

290 
EFI_GUID
 
	mIdítifõr
;

291 
EFI_GUID
 
	mTy≥
;

292 
EFI_CREDENTIAL2_ENROLL
 
	mEƒﬁl
;

293 
EFI_CREDENTIAL2_FORM
 
	mF‹m
;

294 
EFI_CREDENTIAL2_TILE
 
	mTûe
;

295 
EFI_CREDENTIAL2_TITLE
 
	mTôÀ
;

296 
EFI_CREDENTIAL2_USER
 
	mU£r
;

297 
EFI_CREDENTIAL2_SELECT
 
	mSñe˘
;

298 
EFI_CREDENTIAL2_DESELECT
 
	mDe£À˘
;

299 
EFI_CREDENTIAL2_DEFAULT
 
	mDeÁu…
;

300 
EFI_CREDENTIAL2_GET_INFO
 
	mGëInfo
;

301 
EFI_CREDENTIAL2_GET_NEXT_INFO
 
	mGëNextInfo
;

302 
EFI_CREDENTIAL_CAPABILITIES
 
	mC≠abûôõs
;

303 
EFI_CREDENTIAL2_DELETE
 
	mDñëe
;

306 
EFI_GUID
 
gEfiU£rCªdítül2PrŸocﬁGuid
;

	@UserManager.h

11 #i‚de‡
__USER_MANAGER_H__


12 
	#__USER_MANAGER_H__


	)

17 
	#EFI_USER_MANAGER_PROTOCOL_GUID
 \

	)

22 
	#EFI_EVENT_GROUP_USER_PROFILE_CHANGED
 \

	)

27 
VOID
 *
	tEFI_USER_PROFILE_HANDLE
;

28 
VOID
 *
	tEFI_USER_INFO_HANDLE
;

33 
UINT16
 
	tEFI_USER_INFO_ATTRIBS
;

34 
	#EFI_USER_INFO_STORAGE
 0x000F

	)

35 
	#EFI_USER_INFO_STORAGE_VOLATILE
 0x0000

	)

36 
	#EFI_USER_INFO_STORAGE_CREDENTIAL_NV
 0x0001

	)

37 
	#EFI_USER_INFO_STORAGE_PLATFORM_NV
 0x0002

	)

39 
	#EFI_USER_INFO_ACCESS
 0x0070

	)

40 
	#EFI_USER_INFO_PUBLIC
 0x0010

	)

41 
	#EFI_USER_INFO_PRIVATE
 0x0020

	)

42 
	#EFI_USER_INFO_PROTECTED
 0x0030

	)

43 
	#EFI_USER_INFO_EXCLUSIVE
 0x0080

	)

53 
EFI_GUID
 
	mCªdítül
;

57 
UINT8
 
	mInfoTy≥
;

61 
UINT8
 
	mRe£rved1
;

65 
EFI_USER_INFO_ATTRIBS
 
	mInfoAâribs
;

69 
UINT32
 
	mInfoSize
;

70 } 
	tEFI_USER_INFO
;

75 
	#EFI_USER_CREDENTIAL_CLASS_UNKNOWN
 \

	)

77 
	#EFI_USER_CREDENTIAL_CLASS_PASSWORD
 \

	)

79 
	#EFI_USER_CREDENTIAL_CLASS_SMART_CARD
 \

	)

81 
	#EFI_USER_CREDENTIAL_CLASS_FINGERPRINT
 \

	)

83 
	#EFI_USER_CREDENTIAL_CLASS_HANDPRINT
 \

	)

85 
	#EFI_USER_CREDENTIAL_CLASS_SECURE_CARD
 \

	)

88 
UINT64
 
	tEFI_CREDENTIAL_CAPABILITIES
;

89 
	#EFI_CREDENTIAL_CAPABILITIES_ENROLL
 0x0000000000000001

	)

94 
UINT32
 
	tEFI_CREDENTIAL_LOGON_FLAGS
;

95 
	#EFI_CREDENTIAL_LOGON_FLAG_AUTO
 0x00000001

	)

96 
	#EFI_CREDENTIAL_LOGON_FLAG_DEFAULT
 0x00000002

	)

105 
	#EFI_USER_INFO_EMPTY_RECORD
 0x00

	)

109 
	#EFI_USER_INFO_NAME_RECORD
 0x01

	)

110 
CHAR16
 *
	tEFI_USER_INFO_NAME
;

114 
	#EFI_USER_INFO_CREATE_DATE_RECORD
 0x02

	)

115 
EFI_TIME
 
	tEFI_USER_INFO_CREATE_DATE
;

119 
	#EFI_USER_INFO_USAGE_DATE_RECORD
 0x03

	)

120 
EFI_TIME
 
	tEFI_USER_INFO_USAGE_DATE
;

124 
	#EFI_USER_INFO_USAGE_COUNT_RECORD
 0x04

	)

125 
UINT64
 
	tEFI_USER_INFO_USAGE_COUNT
;

129 
	#EFI_USER_INFO_IDENTIFIER_RECORD
 0x05

	)

130 
UINT8
 
	tEFI_USER_INFO_IDENTIFIER
[16];

134 
	#EFI_USER_INFO_CREDENTIAL_TYPE_RECORD
 0x06

	)

135 
EFI_GUID
 
	tEFI_USER_INFO_CREDENTIAL_TYPE
;

139 
	#EFI_USER_INFO_CREDENTIAL_TYPE_NAME_RECORD
 0x07

	)

140 
CHAR16
 *
	tEFI_USER_INFO_CREDENTIAL_TYPE_NAME
;

144 
	#EFI_USER_INFO_CREDENTIAL_PROVIDER_RECORD
 0x08

	)

145 
EFI_GUID
 
	tEFI_USER_INFO_CREDENTIAL_PROVIDER
;

149 
	#EFI_USER_INFO_CREDENTIAL_PROVIDER_NAME_RECORD
 0x09

	)

150 
CHAR16
 *
	tEFI_USER_INFO_CREDENTIAL_PROVIDER_NAME
;

154 
	#EFI_USER_INFO_PKCS11_RECORD
 0x0A

	)

159 
	#EFI_USER_INFO_CBEFF_RECORD
 0x0B

	)

160 
VOID
 *
	tEFI_USER_INFO_CBEFF
;

164 
	#EFI_USER_INFO_FAR_RECORD
 0x0C

	)

165 
UINT8
 
	tEFI_USER_INFO_FAR
;

170 
	#EFI_USER_INFO_RETRY_RECORD
 0x0D

	)

171 
UINT8
 
	tEFI_USER_INFO_RETRY
;

175 
	#EFI_USER_INFO_ACCESS_POLICY_RECORD
 0x0E

	)

178 
UINT32
 
	mTy≥
;

179 
UINT32
 
	mSize
;

180 } 
	tEFI_USER_INFO_ACCESS_CONTROL
;

182 
EFI_USER_INFO_ACCESS_CONTROL
 
	tEFI_USER_INFO_ACCESS_POLICY
;

192 
	#EFI_USER_INFO_ACCESS_FORBID_LOAD
 0x00000001

	)

200 
	#EFI_USER_INFO_ACCESS_PERMIT_LOAD
 0x00000002

	)

204 
	#EFI_USER_INFO_ACCESS_ENROLL_SELF
 0x00000003

	)

208 
	#EFI_USER_INFO_ACCESS_ENROLL_OTHERS
 0x00000004

	)

212 
	#EFI_USER_INFO_ACCESS_MANAGE
 0x00000005

	)

216 
	#EFI_USER_INFO_ACCESS_SETUP
 0x00000006

	)

220 
	#EFI_USER_INFO_ACCESS_SETUP_ADMIN_GUID
 \

	)

222 
	#EFI_USER_INFO_ACCESS_SETUP_NORMAL_GUID
 \

	)

224 
	#EFI_USER_INFO_ACCESS_SETUP_RESTRICTED_GUID
 \

	)

230 
	#EFI_USER_INFO_ACCESS_FORBID_CONNECT
 0x00000007

	)

234 
	#EFI_USER_INFO_ACCESS_PERMIT_CONNECT
 0x00000008

	)

238 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER
 0x00000009

	)

239 
UINT32
 
	tEFI_USER_INFO_ACCESS_BOOT_ORDER_HDR
;

241 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER_MASK
 0x0000000F

	)

245 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER_INSERT
 0x00000000

	)

249 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER_APPEND
 0x00000001

	)

253 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER_REPLACE
 0x00000002

	)

258 
	#EFI_USER_INFO_ACCESS_BOOT_ORDER_NODEFAULT
 0x00000010

	)

263 
	#EFI_USER_INFO_IDENTITY_POLICY_RECORD
 0x0F

	)

266 
UINT32
 
	mTy≥
;

267 
UINT32
 
	mLígth
;

268 } 
	tEFI_USER_INFO_IDENTITY_POLICY
;

273 
	#EFI_USER_INFO_IDENTITY_FALSE
 0x00

	)

274 
	#EFI_USER_INFO_IDENTITY_TRUE
 0x01

	)

275 
	#EFI_USER_INFO_IDENTITY_CREDENTIAL_TYPE
 0x02

	)

276 
	#EFI_USER_INFO_IDENTITY_CREDENTIAL_PROVIDER
 0x03

	)

277 
	#EFI_USER_INFO_IDENTITY_NOT
 0x10

	)

278 
	#EFI_USER_INFO_IDENTITY_AND
 0x11

	)

279 
	#EFI_USER_INFO_IDENTITY_OR
 0x12

	)

284 
	#EFI_USER_INFO_GUID_RECORD
 0xFF

	)

285 
EFI_GUID
 
	tEFI_USER_INFO_GUID
;

292 
UINT64
 
	mSize
;

293 } 
	tEFI_USER_INFO_TABLE
;

295 
_EFI_USER_MANAGER_PROTOCOL
 
	tEFI_USER_MANAGER_PROTOCOL
;

313 
	gEFI_STATUS


314 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_CREATE
)(

315 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

316 
	tOUT
 
	tEFI_USER_PROFILE_HANDLE
 *
	tU£r


332 
	gEFI_STATUS


333 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_DELETE
)(

334 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

335 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r


355 
	gEFI_STATUS


356 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_GET_NEXT
)(

357 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

358 
	tIN
 
	tOUT
 
	tEFI_USER_PROFILE_HANDLE
 *
	tU£r


371 
	gEFI_STATUS


372 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_CURRENT
)(

373 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

374 
	tOUT
 
	tEFI_USER_PROFILE_HANDLE
 *
	tCuºítU£r


394 
	gEFI_STATUS


395 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_IDENTIFY
)(

396 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

397 
	tOUT
 
	tEFI_USER_PROFILE_HANDLE
 *
	tU£r


430 
	gEFI_STATUS


431 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_FIND
)(

432 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

433 
	tIN
 
	tOUT
 
	tEFI_USER_PROFILE_HANDLE
 *
	tU£r
,

434 
	tIN
 
	tOUT
 
	tEFI_USER_INFO_HANDLE
 *
	tU£rInfo
 
	tOPTIONAL
,

435 
	tIN
 
	tCONST
 
	tEFI_USER_INFO
 *
	tInfo
,

436 
	tIN
 
	tUINTN
 
	tInfoSize


462 
	gEFI_STATUS


463 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_NOTIFY
)(

464 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

465 
	tIN
 
	tEFI_HANDLE
 
	tCh™ged


496 
	gEFI_STATUS


497 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_GET_INFO
)(

498 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

499 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

500 
	tIN
 
	tEFI_USER_INFO_HANDLE
 
	tU£rInfo
,

501 
	tOUT
 
	tEFI_USER_INFO
 *
	tInfo
,

502 
	tIN
 
	tOUT
 
	tUINTN
 *
	tInfoSize


536 
	gEFI_STATUS


537 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_SET_INFO
)(

538 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

539 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

540 
	tIN
 
	tOUT
 
	tEFI_USER_INFO_HANDLE
 *
	tU£rInfo
,

541 
	tIN
 
	tCONST
 
	tEFI_USER_INFO
 *
	tInfo
,

542 
	tIN
 
	tUINTN
 
	tInfoSize


559 
	gEFI_STATUS


560 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_DELETE_INFO
)(

561 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

562 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

563 
	tIN
 
	tEFI_USER_INFO_HANDLE
 
	tU£rInfo


582 
	gEFI_STATUS


583 (
	tEFIAPI
 *
	tEFI_USER_PROFILE_GET_NEXT_INFO
)(

584 
	tIN
 
	tCONST
 
	tEFI_USER_MANAGER_PROTOCOL
 *
	tThis
,

585 
	tIN
 
	tEFI_USER_PROFILE_HANDLE
 
	tU£r
,

586 
	tIN
 
	tOUT
 
	tEFI_USER_INFO_HANDLE
 *
	tU£rInfo


592 
	s_EFI_USER_MANAGER_PROTOCOL
 {

593 
EFI_USER_PROFILE_CREATE
 
	mCª©e
;

594 
EFI_USER_PROFILE_DELETE
 
	mDñëe
;

595 
EFI_USER_PROFILE_GET_NEXT
 
	mGëNext
;

596 
EFI_USER_PROFILE_CURRENT
 
	mCuºít
;

597 
EFI_USER_PROFILE_IDENTIFY
 
	mIdítify
;

598 
EFI_USER_PROFILE_FIND
 
	mFöd
;

599 
EFI_USER_PROFILE_NOTIFY
 
	mNŸify
;

600 
EFI_USER_PROFILE_GET_INFO
 
	mGëInfo
;

601 
EFI_USER_PROFILE_SET_INFO
 
	mSëInfo
;

602 
EFI_USER_PROFILE_DELETE_INFO
 
	mDñëeInfo
;

603 
EFI_USER_PROFILE_GET_NEXT_INFO
 
	mGëNextInfo
;

606 
EFI_GUID
 
gEfiU£rM™agîPrŸocﬁGuid
;

607 
EFI_GUID
 
gEfiEvítU£rProfûeCh™gedGuid
;

608 
EFI_GUID
 
gEfiU£rCªdítülCœssUnknownGuid
;

609 
EFI_GUID
 
gEfiU£rCªdítülCœssPassw‹dGuid
;

610 
EFI_GUID
 
gEfiU£rCªdítülCœssSm¨tC¨dGuid
;

611 
EFI_GUID
 
gEfiU£rCªdítülCœssFögî¥ötGuid
;

612 
EFI_GUID
 
gEfiU£rCªdítülCœssH™d¥ötGuid
;

613 
EFI_GUID
 
gEfiU£rCªdítülCœssSecuªC¨dGuid
;

614 
EFI_GUID
 
gEfiU£rInfoAc˚ssSëupAdmöGuid
;

615 
EFI_GUID
 
gEfiU£rInfoAc˚ssSëupN‹mÆGuid
;

616 
EFI_GUID
 
gEfiU£rInfoAc˚ssSëupRe°ri˘edGuid
;

	@Variable.h

28 #i‚de‡
__ARCH_PROTOCOL_VARIABLE_ARCH_H__


29 
	#__ARCH_PROTOCOL_VARIABLE_ARCH_H__


	)

34 
	#EFI_VARIABLE_ARCH_PROTOCOL_GUID
 \

	)

37 
EFI_GUID
 
gEfiV¨übÀArchPrŸocﬁGuid
;

	@VariableWrite.h

28 #i‚de‡
__ARCH_PROTOCOL_VARIABLE_WRITE_ARCH_H__


29 
	#__ARCH_PROTOCOL_VARIABLE_WRITE_ARCH_H__


	)

34 
	#EFI_VARIABLE_WRITE_ARCH_PROTOCOL_GUID
 \

	)

37 
EFI_GUID
 
gEfiV¨übÀWrôeArchPrŸocﬁGuid
;

	@VlanConfig.h

12 #i‚de‡
__EFI_VLANCONFIG_PROTOCOL_H__


13 
	#__EFI_VLANCONFIG_PROTOCOL_H__


	)

16 
	#EFI_VLAN_CONFIG_PROTOCOL_GUID
 \

	)

21 
_EFI_VLAN_CONFIG_PROTOCOL
 
	tEFI_VLAN_CONFIG_PROTOCOL
;

28 
UINT16
 
	mVœnId
;

29 
UINT8
 
	mPri‹ôy
;

30 } 
	tEFI_VLAN_FIND_DATA
;

65 
	gEFI_STATUS


66 (
	tEFIAPI
 *
	tEFI_VLAN_CONFIG_SET
)(

67 
	tIN
 
	tEFI_VLAN_CONFIG_PROTOCOL
 *
	tThis
,

68 
	tIN
 
	tUINT16
 
	tVœnId
,

69 
	tIN
 
	tUINT8
 
	tPri‹ôy


92 
	gEFI_STATUS


93 (
	tEFIAPI
 *
	tEFI_VLAN_CONFIG_FIND
)(

94 
	tIN
 
	tEFI_VLAN_CONFIG_PROTOCOL
 *
	tThis
,

95 
	tIN
 
	tUINT16
 *
	tVœnId
 
	tOPTIONAL
,

96 
	tOUT
 
	tUINT16
 *
	tNumbîOfVœn
,

97 
	tOUT
 
	tEFI_VLAN_FIND_DATA
 **
	tE¡rõs


118 
	gEFI_STATUS


119 (
	tEFIAPI
 *
	tEFI_VLAN_CONFIG_REMOVE
)(

120 
	tIN
 
	tEFI_VLAN_CONFIG_PROTOCOL
 *
	tThis
,

121 
	tIN
 
	tUINT16
 
	tVœnId


129 
	s_EFI_VLAN_CONFIG_PROTOCOL
 {

130 
EFI_VLAN_CONFIG_SET
 
	mSë
;

131 
EFI_VLAN_CONFIG_FIND
 
	mFöd
;

132 
EFI_VLAN_CONFIG_REMOVE
 
	mRemove
;

135 
EFI_GUID
 
gEfiVœnC⁄figPrŸocﬁGuid
;

	@WatchdogTimer.h

10 #i‚de‡
__ARCH_PROTOCOL_WATCHDOG_TIMER_H__


11 
	#__ARCH_PROTOCOL_WATCHDOG_TIMER_H__


	)

16 
	#EFI_WATCHDOG_TIMER_ARCH_PROTOCOL_GUID
 \

	)

22 
_EFI_WATCHDOG_TIMER_ARCH_PROTOCOL
 
	tEFI_WATCHDOG_TIMER_ARCH_PROTOCOL
;

36 
	gVOID


37 (
	tEFIAPI
 *
	tEFI_WATCHDOG_TIMER_NOTIFY
)(

38 
	tIN
 
	tUINT64
 
	tTime


66 
	gEFI_STATUS


67 (
	tEFIAPI
 *
	tEFI_WATCHDOG_TIMER_REGISTER_HANDLER
)(

68 
	tIN
 
	tEFI_WATCHDOG_TIMER_ARCH_PROTOCOL
 *
	tThis
,

69 
	tIN
 
	tEFI_WATCHDOG_TIMER_NOTIFY
 
	tNŸifyFun˘i⁄


89 
	gEFI_STATUS


90 (
	tEFIAPI
 *
	tEFI_WATCHDOG_TIMER_SET_TIMER_PERIOD
)(

91 
	tIN
 
	tEFI_WATCHDOG_TIMER_ARCH_PROTOCOL
 *
	tThis
,

92 
	tIN
 
	tUINT64
 
	tTimîPîiod


111 
	gEFI_STATUS


112 (
	tEFIAPI
 *
	tEFI_WATCHDOG_TIMER_GET_TIMER_PERIOD
)(

113 
	tIN
 
	tEFI_WATCHDOG_TIMER_ARCH_PROTOCOL
 *
	tThis
,

114 
	tOUT
 
	tUINT64
 *
	tTimîPîiod


129 
	s_EFI_WATCHDOG_TIMER_ARCH_PROTOCOL
 {

130 
EFI_WATCHDOG_TIMER_REGISTER_HANDLER
 
	mRegi°îH™dÀr
;

131 
EFI_WATCHDOG_TIMER_SET_TIMER_PERIOD
 
	mSëTimîPîiod
;

132 
EFI_WATCHDOG_TIMER_GET_TIMER_PERIOD
 
	mGëTimîPîiod
;

135 
EFI_GUID
 
gEfiW©chdogTimîArchPrŸocﬁGuid
;

	@WiFi.h

14 #i‚de‡
__EFI_WIFI_PROTOCOL_H__


15 
	#__EFI_WIFI_PROTOCOL_H__


	)

17 
	~<PrŸocﬁ/WiFi2.h
>

19 
	#EFI_WIRELESS_MAC_CONNECTION_PROTOCOL_GUID
 \

	)

24 
_EFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
;

30 
	mIìePriv©e
 = 0,

31 
	mIìePriv©ewôhGue°
 = 1,

32 
	mIìeCh¨góbÀPublic
 = 2,

33 
	mIìeFªePublic
 = 3,

34 
	mIìePîs⁄Æ
 = 4,

35 
	mIìeEmîgícySîvO∆y
 = 5,

36 
	mIìeTe°OrExp
 = 14,

37 
	mIìeWûdˇrd
 = 15

38 } 
	tEFI_80211_ACC_NET_TYPE
;

44 
	mAssocüãSuc˚ss
,

45 
	mAssocüãRefu£dRós⁄Un•ecifõd
,

46 
	mAssocüãRefu£dC≠sMism©ch
,

47 
	mAssocüãRefu£dExtRós⁄
,

48 
	mAssocüãRefu£dAPOutOfMem‹y
,

49 
	mAssocüãRefu£dBasicR©esMism©ch
,

50 
	mAssocüãReje˘edEmîgícySîvi˚sNŸSuµ‹ãd
,

51 
	mAssocüãRefu£dTemp‹¨ûy


52 } 
	tEFI_80211_ASSOCIATE_RESULT_CODE
;

61 
	mSˇnSuc˚ss
,

65 
	mSˇnNŸSuµ‹ãd


66 } 
	tEFI_80211_SCAN_RESULT_CODE
;

72 
	mIìe80211Un•ecifõdRós⁄
 = 1,

73 
	mIìe80211PªviousAuthítiˇãInvÆid
 = 2,

74 
	mIìe80211DóuthítiˇãdSö˚Lóvög
 = 3,

75 
	mIìe80211DißssocüãdDueToI«˘ive
 = 4,

76 
	mIìe80211DißssocüãdSö˚ApU«bÀ
 = 5,

77 
	mIìe80211Cœss2FømeN⁄authítiˇãd
 = 6,

78 
	mIìe80211Cœss3FømeN⁄assocüãd
 = 7,

79 
	mIìe80211DißssocüãdSö˚Lóvög
 = 8,

81 } 
	tEFI_80211_REASON_CODE
;

90 
	mDißssocüãSuc˚ss
,

94 
	mDißssocüãInvÆidP¨amëîs


95 } 
	tEFI_80211_DISASSOCIATE_RESULT_CODE
;

104 
	mO≥nSy°em
,

109 
	mSh¨edKey
,

114 
	mFa°BSSTønsôi⁄
,

119 
	mSAE


120 } 
	tEFI_80211_AUTHENTICATION_TYPE
;

126 
	mAuthítiˇãSuc˚ss
,

127 
	mAuthítiˇãRefu£d
,

128 
	mAuthítiˇãA¡icLoggögTokíRequúed
,

129 
	mAuthítiˇãFöôeCy˛icGroupNŸSuµ‹ãd
,

130 
	mAuthítiˇti⁄Reje˘ed
,

131 
	mAuthítiˇãInvÆidP¨amëî


132 } 
	tEFI_80211_AUTHENTICATE_RESULT_CODE
;

141 
UINT8
 
	mEÀmítID
;

145 
UINT8
 
	mLígth
;

146 } 
	tEFI_80211_ELEMENT_HEADER
;

155 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

160 
UINT8
 
	mReque°IDs
[1];

161 } 
	tEFI_80211_ELEMENT_REQ
;

170 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

174 
UINT8
 
	mSSId
[32];

175 } 
	tEFI_80211_ELEMENT_SSID
;

185 
EFI_80211_BSS_TYPE
 
	mBSSTy≥
;

189 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

193 
UINT8
 
	mSSIdLí
;

197 
UINT8
 *
	mSSId
;

201 
BOOLEAN
 
	mPassiveMode
;

207 
UINT32
 
	mProbeDñay
;

212 
UINT32
 *
	mCh™√lLi°
;

217 
UINT32
 
	mMöCh™√lTime
;

222 
UINT32
 
	mMaxCh™√lTime
;

227 
EFI_80211_ELEMENT_REQ
 *
	mReque°Inf‹m©i⁄
;

232 
EFI_80211_ELEMENT_SSID
 *
	mSSIDLi°
;

237 
EFI_80211_ACC_NET_TYPE
 
	mAc˚ssNëw‹kTy≥
;

241 
UINT8
 *
	mVíd‹S≥cificInfo
;

242 } 
	tEFI_80211_SCAN_DATA
;

252 
UINT8
 
	mFú°Ch™√lNum
;

256 
UINT8
 
	mNumOfCh™√ls
;

260 
UINT8
 
	mMaxTxPowîLevñ
;

261 } 
	tEFI_80211_COUNTRY_TRIPLET_SUBBAND
;

271 
UINT8
 
	mO≥øtögExtId
;

275 
UINT8
 
	mO≥øtögCœss
;

280 
UINT8
 
	mCovîageCœss
;

281 } 
	tEFI_80211_COUNTRY_TRIPLET_OPERATE
;

290 
EFI_80211_COUNTRY_TRIPLET_SUBBAND
 
	mSubb™d
;

294 
EFI_80211_COUNTRY_TRIPLET_OPERATE
 
	mO≥øtög
;

295 } 
	tEFI_80211_COUNTRY_TRIPLET
;

304 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

308 
UINT8
 
	mCou¡rySå
[3];

313 
EFI_80211_COUNTRY_TRIPLET
 
	mCou¡ryTrùÀt
[1];

314 } 
	tEFI_80211_ELEMENT_COUNTRY
;

324 
UINT16
 
	mVîsi⁄
;

328 
UINT32
 
	mGroupD©aCùhîSuôe
;

365 } 
	tEFI_80211_ELEMENT_DATA_RSN
;

374 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

378 
EFI_80211_ELEMENT_DATA_RSN
 *
	mD©a
;

379 } 
	tEFI_80211_ELEMENT_RSN
;

388 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

394 
UINT8
 
	mC≠abûôõs
[1];

395 } 
	tEFI_80211_ELEMENT_EXT_CAP
;

404 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

408 
UINT8
 *
	mSSId
;

412 
UINT8
 
	mSSIdLí
;

416 
EFI_80211_BSS_TYPE
 
	mBSSTy≥
;

420 
UINT16
 
	mBóc⁄Pîiod
;

424 
UINT64
 
	mTime°amp
;

428 
UINT16
 
	mC≠abûôyInfo
;

433 
UINT8
 *
	mBSSBasicR©eSë
;

438 
UINT8
 *
	mO≥øti⁄ÆR©eSë
;

443 
EFI_80211_ELEMENT_COUNTRY
 *
	mCou¡ry
;

447 
EFI_80211_ELEMENT_RSN
 
	mRSN
;

451 
UINT8
 
	mRSSI
;

455 
UINT8
 
	mRCPIMósuªmít
;

459 
UINT8
 
	mRSNIMósuªmít
;

464 
UINT8
 *
	mReque°edEÀmíts
;

469 
UINT8
 *
	mBSSMembîshùSñe˘‹Së
;

474 
EFI_80211_ELEMENT_EXT_CAP
 *
	mExtC≠EÀmít
;

475 } 
	tEFI_80211_BSS_DESCRIPTION
;

484 
UINT8
 
	mSubEÀmítID
;

488 
UINT8
 
	mLígth
;

492 
UINT8
 
	mD©a
[1];

493 } 
	tEFI_80211_SUBELEMENT_INFO
;

502 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

507 
UINT8
 
	mIndiˇt‹
;

511 
EFI_80211_SUBELEMENT_INFO
 
	mSubEÀmít
[1];

512 } 
	tEFI_80211_MULTIPLE_BSSID
;

521 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

525 
EFI_80211_BSS_TYPE
 
	mBSSTy≥
;

529 
UINT8
 
	mC⁄C≠Info
;

533 
UINT8
 
	mC⁄Cou¡rySå
[2];

537 
UINT8
 
	mO≥øtögCœss
;

541 
UINT8
 
	mCh™√l
;

545 
UINT8
 
	mI¡îvÆ
;

549 
EFI_80211_MULTIPLE_BSSID
 *
	mMu…ùÀBSSID
;

553 
UINT8
 
	mRCPIMósuªmít
;

557 
UINT8
 
	mRSNIMósuªmít
;

558 } 
	tEFI_80211_BSS_DESP_PILOT
;

568 
UINTN
 
	mNumOfBSSDe•
;

572 
EFI_80211_BSS_DESCRIPTION
 **
	mBSSDe•Së
;

577 
UINTN
 
	mNumofBSSDe•FromPûŸ
;

581 
EFI_80211_BSS_DESP_PILOT
 **
	mBSSDe•FromPûŸSë
;

585 
UINT8
 *
	mVíd‹S≥cificInfo
;

586 } 
	tEFI_80211_SCAN_RESULT
;

596 
EFI_EVENT
 
	mEvít
;

605 
EFI_STATUS
 
	mSètus
;

609 
EFI_80211_SCAN_DATA
 *
	mD©a
;

613 
EFI_80211_SCAN_RESULT_CODE
 
	mResu…Code
;

617 
EFI_80211_SCAN_RESULT
 *
	mResu…
;

618 } 
	tEFI_80211_SCAN_DATA_TOKEN
;

627 
UINT8
 
	mFú°Ch™√lNumbî
;

631 
UINT8
 
	mNumbîOfCh™√ls
;

632 } 
	tEFI_80211_ELEMENT_SUPP_CHANNEL_TUPLE
;

641 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

645 
EFI_80211_ELEMENT_SUPP_CHANNEL_TUPLE
 
	mSubb™d
[1];

646 } 
	tEFI_80211_ELEMENT_SUPP_CHANNEL
;

655 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

659 
UINT16
 
	mC≠abûôyInfo
;

663 
UINT32
 
	mFaûuªTimeout
;

668 
UINT32
 
	mLi°íI¡îvÆ
;

672 
EFI_80211_ELEMENT_SUPP_CHANNEL
 *
	mCh™√ls
;

676 
EFI_80211_ELEMENT_RSN
 
	mRSN
;

681 
EFI_80211_ELEMENT_EXT_CAP
 *
	mExtC≠EÀmít
;

685 
UINT8
 *
	mVíd‹S≥cificInfo
;

686 } 
	tEFI_80211_ASSOCIATE_DATA
;

695 
EFI_80211_ELEMENT_HEADER
 
	mHdr
;

699 
UINT8
 
	mTy≥
;

703 
UINT32
 
	mVÆue
;

704 } 
	tEFI_80211_ELEMENT_TIMEOUT_VAL
;

714 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

718 
UINT16
 
	mC≠abûôyInfo
;

722 
UINT16
 
	mAssocüti⁄ID
;

727 
UINT8
 
	mRCPIVÆue
;

732 
UINT8
 
	mRSNIVÆue
;

737 
EFI_80211_ELEMENT_EXT_CAP
 *
	mExtC≠EÀmít
;

741 
EFI_80211_ELEMENT_TIMEOUT_VAL
 
	mTimeoutI¡îvÆ
;

745 
UINT8
 *
	mVíd‹S≥cificInfo
;

746 } 
	tEFI_80211_ASSOCIATE_RESULT
;

756 
EFI_EVENT
 
	mEvít
;

762 
EFI_STATUS
 
	mSètus
;

766 
EFI_80211_ASSOCIATE_DATA
 *
	mD©a
;

770 
EFI_80211_ASSOCIATE_RESULT_CODE
 
	mResu…Code
;

775 
EFI_80211_ASSOCIATE_RESULT
 *
	mResu…
;

776 } 
	tEFI_80211_ASSOCIATE_DATA_TOKEN
;

786 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

790 
EFI_80211_REASON_CODE
 
	mRós⁄Code
;

794 
UINT8
 *
	mVíd‹S≥cificInfo
;

795 } 
	tEFI_80211_DISASSOCIATE_DATA
;

805 
EFI_EVENT
 
	mEvít
;

814 
EFI_STATUS
 
	mSètus
;

818 
EFI_80211_DISASSOCIATE_DATA
 *
	mD©a
;

822 
EFI_80211_DISASSOCIATE_RESULT_CODE
 
	mResu…Code
;

823 } 
	tEFI_80211_DISASSOCIATE_DATA_TOKEN
;

833 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

838 
EFI_80211_AUTHENTICATION_TYPE
 
	mAuthTy≥
;

843 
UINT32
 
	mFaûuªTimeout
;

848 
UINT8
 *
	mFTC⁄ã¡
;

853 
UINT8
 *
	mSAEC⁄ã¡
;

857 
UINT8
 *
	mVíd‹S≥cificInfo
;

858 } 
	tEFI_80211_AUTHENTICATE_DATA
;

868 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

873 
UINT8
 *
	mFTC⁄ã¡
;

878 
UINT8
 *
	mSAEC⁄ã¡
;

882 
UINT8
 *
	mVíd‹S≥cificInfo
;

883 } 
	tEFI_80211_AUTHENTICATE_RESULT
;

893 
EFI_EVENT
 
	mEvít
;

904 
EFI_STATUS
 
	mSètus
;

908 
EFI_80211_AUTHENTICATE_DATA
 *
	mD©a
;

912 
EFI_80211_AUTHENTICATE_RESULT_CODE
 
	mResu…Code
;

917 
EFI_80211_AUTHENTICATE_RESULT
 *
	mResu…
;

918 } 
	tEFI_80211_AUTHENTICATE_DATA_TOKEN
;

928 
EFI_80211_MAC_ADDRESS
 
	mBSSId
;

932 
EFI_80211_REASON_CODE
 
	mRós⁄Code
;

936 
UINT8
 *
	mVíd‹S≥cificInfo
;

937 } 
	tEFI_80211_DEAUTHENTICATE_DATA
;

947 
EFI_EVENT
 
	mEvít
;

957 
EFI_STATUS
 
	mSètus
;

961 
EFI_80211_DEAUTHENTICATE_DATA
 *
	mD©a
;

962 } 
	tEFI_80211_DEAUTHENTICATE_DATA_TOKEN
;

984 
	gEFI_STATUS


985 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_SCAN
)(

986 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 *
	tThis
,

987 
	tIN
 
	tEFI_80211_SCAN_DATA_TOKEN
 *
	tD©a


1014 
	gEFI_STATUS


1015 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_ASSOCIATE
)(

1016 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 *
	tThis
,

1017 
	tIN
 
	tEFI_80211_ASSOCIATE_DATA_TOKEN
 *
	tD©a


1042 
	gEFI_STATUS


1043 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_DISASSOCIATE
)(

1044 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 *
	tThis
,

1045 
	tIN
 
	tEFI_80211_DISASSOCIATE_DATA_TOKEN
 *
	tD©a


1072 
	gEFI_STATUS


1073 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_AUTHENTICATE
)(

1074 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 *
	tThis
,

1075 
	tIN
 
	tEFI_80211_AUTHENTICATE_DATA_TOKEN
 *
	tD©a


1101 
	gEFI_STATUS


1102 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_DEAUTHENTICATE
)(

1103 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 *
	tThis
,

1104 
	tIN
 
	tEFI_80211_DEAUTHENTICATE_DATA_TOKEN
 *
	tD©a


1113 
	s_EFI_WIRELESS_MAC_CONNECTION_PROTOCOL
 {

1114 
EFI_WIRELESS_MAC_CONNECTION_SCAN
 
	mSˇn
;

1115 
EFI_WIRELESS_MAC_CONNECTION_ASSOCIATE
 
	mAssocüã
;

1116 
EFI_WIRELESS_MAC_CONNECTION_DISASSOCIATE
 
	mDißssocüã
;

1117 
EFI_WIRELESS_MAC_CONNECTION_AUTHENTICATE
 
	mAuthítiˇã
;

1118 
EFI_WIRELESS_MAC_CONNECTION_DEAUTHENTICATE
 
	mDóuthítiˇã
;

1121 
EFI_GUID
 
gEfiWiFiPrŸocﬁGuid
;

	@WiFi2.h

12 #i‚de‡
__EFI_WIFI2_PROTOCOL_H__


13 
	#__EFI_WIFI2_PROTOCOL_H__


	)

15 
	#EFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL_GUID
 \

	)

20 
_EFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
 
	tEFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
;

26 
	mIìeIn‰a°ru˘uªBSS
,

27 
	mIìeIndïídítBSS
,

28 
	mIìeMeshBSS
,

29 
	mIìeAnyBss


30 } 
	tEFI_80211_BSS_TYPE
;

39 
	mC⁄√˘Suc˚ss
,

43 
	mC⁄√˘Refu£d
,

48 
	mC⁄√˘Faûed
,

52 
	mC⁄√˘FaûuªTimeout
,

56 
	mC⁄√˘FaûedRós⁄Un•ecifõd


57 } 
	tEFI_80211_CONNECT_NETWORK_RESULT_CODE
;

63 
UINT8
 
	mAddr
[6];

64 } 
	tEFI_80211_MAC_ADDRESS
;

66 
	#EFI_MAX_SSID_LEN
 32

	)

75 
UINT8
 
	mSSIdLí
;

79 
UINT8
 
	mSSId
[
EFI_MAX_SSID_LEN
];

80 } 
	tEFI_80211_SSID
;

90 
UINT32
 
	mNumOfSSID
;

98 
EFI_80211_SSID
 
	mSSIDLi°
[1];

99 } 
	tEFI_80211_GET_NETWORKS_DATA
;

109 
UINT8
 
	mOui
[3];

113 
UINT8
 
	mSuôeTy≥
;

114 } 
	tEFI_80211_SUITE_SELECTOR
;

124 
UINT16
 
	mAKMSuôeCou¡
;

129 
EFI_80211_SUITE_SELECTOR
 
	mAKMSuôeLi°
[1];

130 } 
	tEFI_80211_AKM_SUITE_SELECTOR
;

140 
UINT16
 
	mCùhîSuôeCou¡
;

146 
EFI_80211_SUITE_SELECTOR
 
	mCùhîSuôeLi°
[1];

147 } 
	tEFI_80211_CIPHER_SUITE_SELECTOR
;

156 
EFI_80211_BSS_TYPE
 
	mBSSTy≥
;

160 
EFI_80211_SSID
 
	mSSId
;

164 
EFI_80211_AKM_SUITE_SELECTOR
 *
	mAKMSuôe
;

168 
EFI_80211_CIPHER_SUITE_SELECTOR
 *
	mCùhîSuôe
;

169 } 
	tEFI_80211_NETWORK
;

178 
EFI_80211_NETWORK
 
	mNëw‹k
;

183 
UINT8
 
	mNëw‹kQuÆôy
;

184 } 
	tEFI_80211_NETWORK_DESCRIPTION
;

194 
UINT8
 
	mNumOfNëw‹kDesc
;

199 
EFI_80211_NETWORK_DESCRIPTION
 
	mNëw‹kDesc
[1];

200 } 
	tEFI_80211_GET_NETWORKS_RESULT
;

212 
EFI_EVENT
 
	mEvít
;

222 
EFI_STATUS
 
	mSètus
;

226 
EFI_80211_GET_NETWORKS_DATA
 *
	mD©a
;

231 
EFI_80211_GET_NETWORKS_RESULT
 *
	mResu…
;

232 } 
	tEFI_80211_GET_NETWORKS_TOKEN
;

241 
EFI_80211_NETWORK
 *
	mNëw‹k
;

248 
UINT32
 
	mFaûuªTimeout
;

249 } 
	tEFI_80211_CONNECT_NETWORK_DATA
;

261 
EFI_EVENT
 
	mEvít
;

270 
EFI_STATUS
 
	mSètus
;

274 
EFI_80211_CONNECT_NETWORK_DATA
 *
	mD©a
;

278 
EFI_80211_CONNECT_NETWORK_RESULT_CODE
 
	mResu…Code
;

279 } 
	tEFI_80211_CONNECT_NETWORK_TOKEN
;

291 
EFI_EVENT
 
	mEvít
;

299 
EFI_STATUS
 
	mSètus
;

300 } 
	tEFI_80211_DISCONNECT_NETWORK_TOKEN
;

327 
	gEFI_STATUS


328 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_II_GET_NETWORKS
) (

329 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
 *
	tThis
,

330 
	tIN
 
	tEFI_80211_GET_NETWORKS_TOKEN
 *
	tTokí


358 
	gEFI_STATUS


359 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_II_CONNECT_NETWORK
) (

360 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
 *
	tThis
,

361 
	tIN
 
	tEFI_80211_CONNECT_NETWORK_TOKEN
 *
	tTokí


387 
	gEFI_STATUS


388 (
	tEFIAPI
 *
	tEFI_WIRELESS_MAC_CONNECTION_II_DISCONNECT_NETWORK
) (

389 
	tIN
 
	tEFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
 *
	tThis
,

390 
	tIN
 
	tEFI_80211_DISCONNECT_NETWORK_TOKEN
 *
	tTokí


399 
	s_EFI_WIRELESS_MAC_CONNECTION_II_PROTOCOL
 {

400 
EFI_WIRELESS_MAC_CONNECTION_II_GET_NETWORKS
 
	mGëNëw‹ks
;

401 
EFI_WIRELESS_MAC_CONNECTION_II_CONNECT_NETWORK
 
	mC⁄√˘Nëw‹k
;

402 
EFI_WIRELESS_MAC_CONNECTION_II_DISCONNECT_NETWORK
 
	mDisc⁄√˘Nëw‹k
;

405 
EFI_GUID
 
gEfiWiFi2PrŸocﬁGuid
;

	@
1
.
1
/usr/include
252
3845
AbsolutePointer.h
AcpiSystemDescriptionTable.h
AcpiTable.h
AdapterInformation.h
Arp.h
AtaPassThru.h
AuthenticationInfo.h
Bds.h
Bis.h
BlockIo.h
BlockIo2.h
BlockIoCrypto.h
BluetoothAttribute.h
BluetoothConfig.h
BluetoothHc.h
BluetoothIo.h
BluetoothLeConfig.h
BootManagerPolicy.h
BusSpecificDriverOverride.h
Capsule.h
ComponentName.h
ComponentName2.h
Cpu.h
CpuIo2.h
DebugPort.h
DebugSupport.h
Decompress.h
DeferredImageLoad.h
DeviceIo.h
DevicePath.h
DevicePathFromText.h
DevicePathToText.h
DevicePathUtilities.h
Dhcp4.h
Dhcp6.h
DiskInfo.h
DiskIo.h
DiskIo2.h
Dns4.h
Dns6.h
DriverBinding.h
DriverConfiguration.h
DriverConfiguration2.h
DriverDiagnostics.h
DriverDiagnostics2.h
DriverFamilyOverride.h
DriverHealth.h
DriverSupportedEfiVersion.h
DxeMmReadyToLock.h
DxeSmmReadyToLock.h
Eap.h
EapConfiguration.h
EapManagement.h
EapManagement2.h
Ebc.h
EdidActive.h
EdidDiscovered.h
EdidOverride.h
EraseBlock.h
FirmwareManagement.h
FirmwareVolume2.h
FirmwareVolumeBlock.h
FormBrowser2.h
Ftp4.h
GraphicsOutput.h
GuidedSectionExtraction.h
Hash.h
Hash2.h
HiiConfigAccess.h
HiiConfigKeyword.h
HiiConfigRouting.h
HiiDatabase.h
HiiFont.h
HiiImage.h
HiiImageDecoder.h
HiiImageEx.h
HiiPackageList.h
HiiPopup.h
HiiString.h
Http.h
HttpBootCallback.h
HttpUtilities.h
I2cBusConfigurationManagement.h
I2cEnumerate.h
I2cHost.h
I2cIo.h
I2cMaster.h
IScsiInitiatorName.h
IdeControllerInit.h
IncompatiblePciDeviceSupport.h
Ip4.h
Ip4Config.h
Ip4Config2.h
Ip6.h
Ip6Config.h
IpSec.h
IpSecConfig.h
IsaHc.h
Kms.h
LegacyRegion2.h
LegacySpiController.h
LegacySpiFlash.h
LegacySpiSmmController.h
LegacySpiSmmFlash.h
LoadFile.h
LoadFile2.h
LoadedImage.h
ManagedNetwork.h
Metronome.h
MmAccess.h
MmBase.h
MmCommunication.h
MmCommunication2.h
MmConfiguration.h
MmControl.h
MmCpu.h
MmCpuIo.h
MmEndOfDxe.h
MmGpiDispatch.h
MmIoTrapDispatch.h
MmMp.h
MmPciRootBridgeIo.h
MmPeriodicTimerDispatch.h
MmPowerButtonDispatch.h
MmReadyToLock.h
MmReportStatusCodeHandler.h
MmStandbyButtonDispatch.h
MmStatusCode.h
MmSwDispatch.h
MmSxDispatch.h
MmUsbDispatch.h
MonotonicCounter.h
MpService.h
Mtftp4.h
Mtftp6.h
NetworkInterfaceIdentifier.h
NvdimmLabel.h
NvmExpressPassthru.h
PartitionInfo.h
Pcd.h
PcdInfo.h
PciEnumerationComplete.h
PciHostBridgeResourceAllocation.h
PciHotPlugInit.h
PciHotPlugRequest.h
PciIo.h
PciOverride.h
PciPlatform.h
PciRootBridgeIo.h
PiPcd.h
PiPcdInfo.h
Pkcs7Verify.h
PlatformDriverOverride.h
PlatformToDriverConfiguration.h
PxeBaseCode.h
PxeBaseCodeCallBack.h
RamDisk.h
RealTimeClock.h
RegularExpressionProtocol.h
ReportStatusCodeHandler.h
Reset.h
ResetNotification.h
Rest.h
RestEx.h
RestJsonStructure.h
Rng.h
Runtime.h
S3SaveState.h
S3SmmSaveState.h
ScsiIo.h
ScsiPassThru.h
ScsiPassThruExt.h
SdMmcPassThru.h
Security.h
Security2.h
SecurityPolicy.h
SerialIo.h
ServiceBinding.h
Shell.h
ShellDynamicCommand.h
ShellParameters.h
SimpleFileSystem.h
SimpleNetwork.h
SimplePointer.h
SimpleTextIn.h
SimpleTextInEx.h
SimpleTextOut.h
SmartCardEdge.h
SmartCardReader.h
Smbios.h
SmbusHc.h
SmmAccess2.h
SmmBase2.h
SmmCommunication.h
SmmConfiguration.h
SmmControl2.h
SmmCpu.h
SmmCpuIo2.h
SmmEndOfDxe.h
SmmGpiDispatch2.h
SmmIoTrapDispatch2.h
SmmPciRootBridgeIo.h
SmmPeriodicTimerDispatch2.h
SmmPowerButtonDispatch2.h
SmmReadyToLock.h
SmmReportStatusCodeHandler.h
SmmStandbyButtonDispatch2.h
SmmStatusCode.h
SmmSwDispatch2.h
SmmSxDispatch2.h
SmmUsbDispatch2.h
SpiConfiguration.h
SpiHc.h
SpiIo.h
SpiNorFlash.h
SpiSmmConfiguration.h
SpiSmmHc.h
SpiSmmNorFlash.h
StatusCode.h
StorageSecurityCommand.h
SuperIo.h
SuperIoControl.h
Supplicant.h
TapeIo.h
Tcg2Protocol.h
TcgService.h
Tcp4.h
Tcp6.h
Timer.h
Timestamp.h
Tls.h
TlsConfig.h
TrEEProtocol.h
Udp4.h
Udp6.h
UfsDeviceConfig.h
UgaDraw.h
UgaIo.h
UnicodeCollation.h
Usb2HostController.h
UsbFunctionIo.h
UsbHostController.h
UsbIo.h
UserCredential.h
UserCredential2.h
UserManager.h
Variable.h
VariableWrite.h
VlanConfig.h
WatchdogTimer.h
WiFi.h
WiFi2.h
